<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C002360</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>1</tariff_id>
    <tariff_title>MBR Tariff</tariff_title>
    <tariff_export_date>2025-09-16T19:39Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>1</record_id>
      <option_code>A</option_code>
      <record_title>Electric Tariff Volume No. 1</record_title>
      <record_content_desc>Holcim (US) MBR Tariff</record_content_desc>
      <record_version_num>1.1.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>100000000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2011-05-09</proposed_effective_date>
      <priority_order>600</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>HOLCIM (US) INC.
FERC ELECTRIC TARIFF, VOLUME NO. 1

1.	Availability:  Holcim (US) Inc. ("Holcim") makes electric energy, capacity, and ancillary services available under this FERC electric tariff to any purchaser, except as prohibited below. 
2. 	Rates:  All sales shall be made at rates established by agreement between the purchaser and Holcim. 
3. 	Seller Category:  Holcim is a Category 1 seller, as defined in 18 CFR 35.36(a), in all regions.
4.	Compliance with Commission Regulations:  Holcim shall comply with the provisions of 18 CFR Part 35, Subpart H, as applicable, and with any conditions the Commission imposes in its orders concerning Holcim’s market-based rate authority, including orders in which the Commission authorizes Holcim to engage in affiliate sales under this tariff or otherwise restricts or limits the Holcim’s market-based rate authority.  Failure to comply with the applicable provisions of 18 CFR Part 35, Subpart H, and with any orders of the Commission concerning Holcim’s market-based rate authority, will constitute a violation of this tariff. 
5. 	Limitations and Exemptions Regarding Market-Based Rate Authority:  Holcim has received waiver of:  Subparts B and C of Part 35, except for sections 35.12(a), 35.13(b), 35.15 and 35.16;  Part 41, Part 101, and Part 141, except sections 141.14 and 141.15; and received blanket approval under Part 34. (Holcim (US) Inc., Docket No. ER11-3053-000 (2011))
6.	Ancillary Services:
PJM:  Seller offers regulation and frequency response service, energy imbalance service, and operating reserve service (which includes spinning, 10-minute, and 30-minute reserves) for sale into the market administered by PJM Interconnection, L.L.C. ("PJM") and, where the PJM Open Access Transmission Tariff permits, the self-supply of these services to purchasers for a bilateral sale that is used to satisfy the ancillary services requirements of the PJM Office of Interconnection. 
New York:  Seller offers regulation and frequency response service, and operating reserve service (which include 10-minute non-synchronous, 30-minute operating reserves, 10-minute spinning reserves, and 10-minute non-spinning reserves) for sale to purchasers in the market administered by the New York Independent System Operator, Inc. 
New England:  Seller offers regulation and frequency response service (automatic generator control), operating reserve service (which includes 10-minute spinning reserve, 10-minute non-spinning reserve, and 30-minute operating reserve service) to purchasers within the markets administered by the ISO New England Inc. 
California:  Seller offers regulation service, spinning reserve service, and non-spinning reserve service to the California Independent System Operator Corporation ("CAISO") and to others that are self-supplying ancillary services to the CAISO. 
Midwest ISO:  Seller offers regulation service and operating reserve service (which include 10-minute spinning reserve and 10-minute supplemental reserve) for sale to the Midwest Independent Transmission System Operator, Inc. ("Midwest ISO") and to others that are self-supplying ancillary services to Midwest ISO.
Third-party ancillary services:  Seller offers Regulation Service, Energy Imbalance Service, Spinning Reserves, and Supplemental Reserves.  Sales will not include the following: (1) sales to an RTO or an ISO, i.e., where that entity has no ability to self-supply ancillary services but instead depends on third parties; (2) sales to a traditional, franchised public utility affiliated with the third-party supplier, or sales where the underlying transmission service is on the system of the public utility affiliated with the third-party supplier; and (3) sales to a public utility that is purchasing ancillary services to satisfy its own open access transmission tariff requirements to offer ancillary services to its own customers.
7.	Effective Date:  This tariff is effective May 9, 2011.</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>101</filing_id>
      <filing_title>Holcim MBRA App Amendment</filing_title>
      <filing_type>120</filing_type>
      <associated_filing_id>100</associated_filing_id>
      <associated_record_id>1</associated_record_id>
      <associated_option_code>A</associated_option_code>
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2011-05-09</current_effective_date>
      <ferc_order_date>2011-05-02</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>