<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C002412</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>65</tariff_id>
    <tariff_title>Rate Schedules</tariff_title>
    <tariff_export_date>2025-09-16T19:41Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>1</record_id>
      <option_code>A</option_code>
      <record_title>FERC Electric Rate Schedule, Volume No. 2</record_title>
      <record_content_desc>Title Page</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name>Second WestConnect Point-to-Point Regional Transmission Service Experiment Participation Agreement</record_narrative_name>
      <collation_value>250000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2011-07-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>WESTCONNECT      FERC Electric Rate Schedule, Volume No. 2    Second WestConnect Point-to-Point Regional Transmission Service Experiment Participation Agreement</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>51</filing_id>
      <filing_title>FERC Electric Rate Schedule, Volume No. 2, WestConnect Participation Agreement</filing_title>
      <filing_type>390</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2011-07-01</current_effective_date>
      <ferc_order_date>2011-06-30</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>2</record_id>
      <option_code>A</option_code>
      <record_title>Point-to-Point Regional Transmission Service Experiment</record_title>
      <record_content_desc>Participation Agreement</record_content_desc>
      <record_version_num>1.0.0</record_version_num>
      <record_narrative_name>WestConnect Point-to-Point Regional Transmission Service Participation Agreement</record_narrative_name>
      <collation_value>375000</collation_value>
      <record_parent_id>1</record_parent_id>
      <proposed_effective_date>2013-07-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>WESTCONNECT 
AMENDED AND RESTATED POINT-TO-POINT REGIONAL TRANSMISSION SERVICE PARTICIPATION AGREEMENT

This WestConnect Amended and Restated Point-to-Point Regional Transmission Service Participation Agreement ("this Agreement") is entered into by and among the initial regional transmission providers listed in Exhibit A together with any other regional transmission provider who executes an addendum in the form attached as Exhibit C after the Execution Date (defined below)  (each, an "RTP" and, collectively, the "RTPs").  The RTPs are sometimes herein referred to individually as a "Party" and collectively as the "Parties."
	
RECITALS:

WHEREAS, WestConnect is a group of utilities providing transmission service within the Western Interconnection that have agreed to work collaboratively to assess stakeholder and market needs in the wholesale electricity market and to pursue implementation of cost-effective enhancements to the wholesale electricity market ("WestConnect");1

WHEREAS, in furtherance of the goals of WestConnect, a predecessor group of regional transmission providers (the "Initial RTPs") agreed in November 2008 to develop and implement, on an experimental trial basis for a period of two years, regional transmission service across their transmission systems, at non-pancaked transmission rates; 

WHEREAS, on July 1, 2009, the Initial RTPs began providing regional transmission service pursuant to the WestConnect Point-to-Point Regional Transmission Service Experiment Participation Agreement, executed as of November 25, 2008, as amended by Amendment 1 thereto, executed as of June 12, 2009 (the "Initial Participation Agreement");

WHEREAS, following the end of the two-year Operational Period as defined in the Initial Participation Agreement on June 30, 2011, the RTPs entered into the Second WestConnect Point-to-Point Regional Transmission Service Experiment Participation Agreement ("Second Participation Agreement"), executed as of March 31, 2011, to provide, on an experimental trial basis, regional transmission service across their transmission systems for the period of July 1, 2011 through June 30, 2013; and
 
WHEREAS, the RTPs wish to amend and restate the Second Participation Agreement, as set forth herein;

NOW, THEREFORE, the RTPs, intending to be legally bound, agree to amend and restate the Second Participation Agreement in its entirety as of the Effective Date as follows:

ARTICLE 1
DEFINITIONS; INTERPRETATION
      1.1 Definitions.  In addition to terms defined elsewhere in this Agreement and unless the context otherwise requires, capitalized and defined terms used herein shall have the meanings given to them below:

             "Billing Agent" means an independent third party to be retained by the Parties to act as billing agent for Regional Transactions. 
            
            "Commission" means the Federal Energy Regulatory Commission or any successor thereto.

            "Committee Representative" has the meaning set forth in Section 3.1.
            
            "Effective Date" means July 1, 2013 or such later date as the Commission may establish.
            
            "Execution  Date" means the last date on which all the initial RTPs listed in the attached Exhibit A have executed this Agreement.

            "Eligible Customer" is an entity that has met the conditions required of transmission customers to take point-to-point transmission service under the respective OATT of each RTP providing service for a particular Regional Transaction.
            
		"Good Utility Practice" shall mean any of the practices, methods and acts engaged in or approved by a significant portion of the electric utility industry operating within the western reliability region of the North American Electric Reliability Corporation during the relevant time period, or any of the practices, methods and acts which, in the exercise of reasonable judgment in light of the facts known at the time the decision was made, could have been expected to accomplish the desired result at a reasonable cost consistent with good business practices, reliability, safety and expedition.  Good Utility Practice is not intended to be limited to the optimum practice, method, or act to the exclusion of all others, but rather to be acceptable practices, methods, or acts generally accepted in the region.

            "Jurisdictional RTP" means an RTP that is subject to the jurisdiction of the Commission under Sections 205 and 206 of the Federal Power Act, 16 U.S.C.  842d &amp; 824e.
             
            "Management Committee" has the meaning set forth in Section 3.1.

		"Non-Jurisdictional RTP" means an RTP that is not subject to the jurisdiction of the Commission under Sections 205 and 206 of the Federal Power Act.

            "OATT" means, in respect of a particular RTP, the open access transmission tariff of such RTP on file with the Commission or, if such RTP is not required to file such tariff with the Commission, the open access transmission tariff of such RTP posted on its OASIS.
            
            "Party" and "Parties" have the meanings set forth in the preamble.
	
            "Regional Rate" means the highest of the ceiling rates for hourly non-firm transmission service posted on the respective OASIS of the RTPs who would provide Regional Transmission Service, for service under their OATTs at the time of the Regional Transaction.  The Regional Rate is not a discounted rate subject to Schedule 8 of the Commission's pro forma open access transmission tariff and shall not be subject to discount.
            
            "Regional Tariff" means the WestConnect Point-To-Point Regional Transmission Service Tariff attached hereto as Exhibit B.
            
             "Regional Transaction" means a single transaction in which Regional Transmission Service is provided to an Eligible Customer, pursuant to the Regional Tariff.

		"Regional Transmission Customer" means an Eligible Customer taking Regional Transmission Service under the Regional Tariff.

            "Regional Transmission Service" means hourly non-firm point-to-point transmission service across the Regional Transmission System provided by the RTPs pursuant to the Regional Tariff and this Agreement. 

            "Regional Transmission System" means the aggregate facilities owned, controlled or operated by the RTPs that are used to provide Regional Transmission Service pursuant to the Regional Tariff.

            "Regulatory Approval" means any authorization, consent, approval, license, lease, ruling, permit, tariff, rate, acceptance for filing, certification, exemption, variance, order, judgment, decree, publication, declaration or registration issued by a Regulatory Authority.

            "Regulatory Authority" means any federal, state, county, municipal or other government, quasi-government or regulatory authority, agency, board, body, commission, instrumentality, court or tribunal, or any political subdivision of any thereof.	 

            "Term" has the meaning set forth in Section 2.1.
            
            "Western Interconnection" means the interconnected electrical transmission system located in the western region of the United States.
            
            "wesTTrans" means the OASIS site of the RTPs, or its successor site.

ARTICLE 2
TERM; WITHDRAWAL; TERMINATION; ADDITIONAL RTPS
      2.1	Term.  The Term commenced on July 1, 2011 under the Second Participation Agreement and shall continue on following the Effective Date until terminated pursuant to Section 2.4 below.  Following the Execution Date, the initial Parties listed on Exhibit A of this Agreement shall be bound as provided in Sections 2.2(a) and (b), 4.1 and 4.4 below only, and all other terms of this Agreement shall become effective on the Effective Date.  The Regional Tariff shall become operational on the Effective Date, and shall remain operational until this Agreement is terminated by the Parties pursuant to Section 2.4 below. 

Subject to the provisions of Section 2.4 below, this Agreement shall remain in full force and effect for a period (the "Term") commencing on the Effective Date and continuing until terminated by the Parties pursuant to Section 2.4 below. 

      2.2	Tasks During Certain Periods.  
      
            (a)	Between the Execution Date and the Effective Date, the Parties shall take all reasonable action necessary and appropriate to obtain all necessary Regulatory Approvals in connection with the performance by the Parties of their respective obligations under this Agreement and the consummation by the Parties of the transactions contemplated hereby.  

            (b)	The Parties shall cooperate with each other in taking all reasonable action necessary and appropriate to complete or satisfy as soon as reasonably practicable the conditions precedent that must be completed or satisfied in order to initiate service under the Regional Tariff.  

            (c)	Following the Effective Date, the Parties shall cooperate with one another in implementing the Regional Tariff and this Agreement in accordance with their terms. 
	
            (d)	Following termination of this Agreement pursuant to Section 2.4, below, the Parties shall cooperate with each other in taking all reasonable action necessary and appropriate to conclude all remaining financial settlements in connection with service provided under the Regional Tariff.

      2.3	Withdrawal.  Notwithstanding any provision to the contrary contained in this Agreement, an RTP may withdraw from this Agreement (a) at any time prior to the Effective Date, at the sole discretion of the withdrawing RTP; (b) at any time (either before, on or after the Effective Date), due to the occurrence or material risk of adverse regulatory action (subject to any obligations incurred for transactions already consummated under the Regional Tariff in which the withdrawing RTP participated), as determined in the sole discretion of the withdrawing RTP, including, but not limited to, conditions that may be imposed by the Commission or any other Regulatory Authority, or as a result of intervenor action or a complaint, on the Regional Transmission Service such as subjecting the rates, transmission revenue requirements or costs of a Non-Jurisdictional RTP to review under the Federal Power Act, either directly or indirectly, or subjecting an RTP to refunds or the possibility thereof; or (c) upon ninety (90) days prior written notice, following the Effective Date, for any reason and at the sole discretion of the withdrawing RTP.  A withdrawing RTP shall provide a written notice of withdrawal to the Management Committee stating the basis for withdrawal and the effective date of the withdrawal and shall request the Management Committee to remove its name from the list of Parties posted on its Internet site.  A Jurisdictional RTP also shall comply with any requirements of the Commission with respect to its withdrawal.  It shall be a condition precedent to the effectiveness of any withdrawal that the withdrawing RTP pay all amounts due and payable under this Agreement prior to such withdrawal.  The Parties acknowledge and agree that this Agreement shall continue in effect with respect to the remaining Parties in accordance with its terms notwithstanding the withdrawal of one or more RTPs.

      2.4	Termination.  This Agreement shall terminate on the date the Parties may mutually agree upon in writing.  Notwithstanding the termination of this Agreement, each RTP shall remain liable for all amounts due and payable under this Agreement prior to such termination.

      2.5	Additional RTPs.  Any entity (including an entity which is not a member of WestConnect) may become a party to this Agreement if it: (a) owns, controls or operates transmission facilities in the Western Interconnection rated at 115 kV and above that are interconnected with the Regional Transmission System; (b) has an OATT and maintains an OASIS on wesTTrans (or another compatible site) with one or more Posted Paths (as defined in the Commission's rules and regulations at 18 C.F.R.  37.6(b)(1)(i)) over which transmission service is available for sale to Eligible Customers; and (c) executes an addendum to this Agreement in the form attached hereto as Exhibit C (the "Addendum") and, where applicable, the Addendum is accepted for filing by the Commission and any other Regulatory Approval is received with respect thereto.  Where applicable, effective as of the date the Addendum is declared effective by the Commission and upon receipt of any other applicable Regulatory Approvals, the new entity shall become an RTP for all purposes of this Agreement, shall be bound by the terms and conditions of this Agreement, and shall have all of the rights, duties and obligations of an RTP under this Agreement.  Any new RTP shall be responsible for all costs and expenses associated with integrating its facilities into the Regional Transmission System and wesTTrans for purposes of the Regional Tariff.


ARTICLE 3
MANAGEMENT COMMITTEE

      3.1 Management Committee.  Each Party shall appoint one committee representative ("Committee Representative") and an alternate to the WestConnect Point-to-Point Regional Transmission Service Management Committee ("Management Committee") to oversee and facilitate the performance of the responsibilities set forth in this Agreement and any other agreements related thereto.

      3.2 Certain Procedures.  Each Committee Representative shall serve on the Management Committee at the pleasure of the Party that appointed such Committee Representative and may be removed or replaced by such Party at any time.  The Committee Representatives shall elect one Committee Representative as chairperson ("Chairperson") of the Management Committee on an annual basis.  If a Party's designated Committee Representative is unable to attend or participate in a Management Committee meeting, the Committee Representative may designate an alternate person to represent that Party as its Committee Representative.

      3.3 Committee Responsibilities.  The responsibilities of the Management Committee shall be as follows:

            (a)	To appoint a Chairperson for the Management Committee and to appoint or dissolve permanent or ad hoc committees or work groups, as necessary, to oversee administration of the Regional Tariff.
            
            (b)	To ensure that each RTP has secured the services of the Billing Agent.

            (c)	To work cooperatively with the WestConnect Steering Committee.
            
            (d)	To address and facilitate decisions respecting termination of this Agreement, as applicable, consistent with the provision of Article 2 hereof.

            (e)	To maintain an Internet site containing this Agreement, the Regional Tariff, a current list of all Parties to this Agreement and the mail and e-mail address of the person that each Party designates to receive notices under this Agreement.
            
            (f)	To do such other things and carry on any other activities that the Management Committee determines to be necessary, advisable, appropriate, convenient or incidental for administration of the Regional Tariff.

3.4. Management Committee Voting.

            (a)	Each Committee Representative shall have one vote on all matters put to a vote of the Management Committee.

(b)	Voting Percentages

(i)	Except as provided in Section 3.4(h), the Management Committee shall vote on decision items only upon the establishment of a quorum, which shall equal at least fifty-one (51) percent of the Committee Representatives or their designated alternates.  Once a quorum has been established, the approval of any decision item other than those indicated in clause (ii) of this Section shall require the affirmative vote of eighty (80) percent  or greater of the Committee Representatives present in person or by conference telephone.

(ii)	Management Committee approval of (A) election of the Chairperson, (B) appointment of the Billing Agent, or (C) termination or modification of this Agreement, shall require the affirmative vote of eighty (80) percent or greater of all Committee Representatives.

            (c) The Management Committee shall meet at least one time per year.  Additional meetings may be held at other times upon a call for a meeting by the Chairperson or by any two or more Committee Representatives.  The meetings may be held in any reasonably accessible location in the Western region of the United States or in any other location upon approval of the Management Committee.  It is the intent of the Parties that meetings of the Management Committee be coordinated with meetings of the WestConnect Steering Committee to the extent possible.

            (d)	Notice of any meeting of the Management Committee, including the meeting agenda, shall be given to each Committee Representative by the Chairperson at least five (5) business days in advance of the meeting by (i) giving notice to such Committee Representative in person or by telephone, (ii) by sending a telecopy or electronic mail, or delivering written notice by hand, to such Committee Representative's last known business, home or electronic mail address, or (iii) by sending written notice, via reputable overnight courier providing a receipt for delivery, to such Committee Representative's last known business or home address.  Notice shall include a proposed agenda for each meeting.  Emergency meetings of the Management Committee may be called upon fewer than five (5) business days' notice upon approval of a majority of the members of the Management Committee; provided that an attempt to give notice to each Committee Representative is made with such notice describing the subject matter to be discussed at the emergency meeting.

            (e)	A Committee Representative may appear and vote at any meeting of the Management Committee and may execute waivers of notice, consents or approvals through the agency of any employee of the Party that appointed such Committee Representative; provided such agent is authorized to so act on behalf of the Committee Representative by the terms of a written or electronically mailed proxy that has been executed by such Committee Representative and delivered in advance to the Chairperson of the Management Committee.
            
            (f)	Committee Representatives may participate in meetings of the Management Committee or any subcommittee thereof by means of conference telephone or other communications equipment by means of which all persons participating in the meetings can hear each other, and participation by such means shall constitute presence in person at such meeting.
            
            (g)	Entities not parties to this Agreement may attend and participate in meetings of the Management Committee, but may not vote on matters that come before the Management Committee for decision.  The Management Committee may enter into closed-door sessions to deliberate upon sensitive issues or other matters requiring privacy, during which time other meeting attendees will be required to withdraw.
            
            (h)	Any action required or permitted to be taken at any meeting of the Management Committee may be taken without a meeting if prior notice is provided to all Committee Representatives and eighty (80) percent of all Committee Representatives consent in writing or by electronic transmission to take the action without a meeting, with copies of the written consents and electronic transmissions sent to all Committee Representatives.

ARTICLE 4
REGIONAL TRANSMISSION SERVICE

      4.1	Adoption of the Regional Tariff.  Each RTP shall take all necessary action to adopt the Regional Tariff and, where applicable, seek all necessary Regulatory Approvals in connection therewith as contemplated by Section 4.4.

      4.2	Regional Transmission Service.  Each RTP shall provide Regional Transmission Service over the Regional Transmission System pursuant to the Regional Tariff unless and until such RTP withdraws from this Agreement or this Agreement is terminated, in each case in accordance with its terms. 

      4.3	General Purpose and Structure of Regional Transmission Service.  The Regional Tariff and Regional Transmission Services to be provided thereunder are designed to offer Eligible Customers the alternative of purchasing non-firm point-to-point transmission service across the Regional Transmission System at a single regional rate, instead of "pancaked" rates that would otherwise apply by the application of each RTP's OATT rates.  Under the Regional Tariff, the Regional Transmission Customer will have the right to obtain Regional Transmission Service at the Regional Rate.  Charges for Regional Transmission Service will also include, among other things, an Administrative Charge (as defined in the Regional Tariff) to cover the costs of the Billing Agent, all in accordance with the Regional Tariff.

      4.4	Filing of Agreement.  Each of the Jurisdictional RTPs shall use commercially reasonable efforts to concurrently file, as soon as practicable, this Agreement and the Regional Tariff with the Commission and to make such other filings and take such other actions as may be necessary to make the provisions of this Agreement and the Regional Tariff legally effective.  Each of the RTPs is encouraged to file comments in support of all such filings and actions and shall not take any action against, or support any other person in any action against, any such filings or actions.  The rates for service specified in the Regional Tariff and the related distribution of revenues specified herein shall remain in effect, subject to the rights of parties to join or withdraw as provided herein, and shall not be subject to change through application to the Commission pursuant to the provisions of sections 205 or 206 of the Federal Power Act absent the agreement of all Parties to this Agreement. 

      4.5	Other Transmission Service Not Affected.  Regional Transmission Service provided by the RTPs pursuant to the Regional Tariff shall not supplant or otherwise affect the transmission service(s) offered separately by each RTP under its respective OATT.  In addition to, or in lieu of, Regional Transmission Service provided under the Regional Tariff, Eligible Customers may obtain non-regional transmission service(s) (e.g., network integration transmission service or point-to-point transmission service) from one or more RTPs under each RTP's respective OATT or other applicable tariff. 

      4.6	Revenue Distribution.  Subject to the further provisions of this paragraph, revenues derived from the provision of Regional Transmission Service for each transaction shall be distributed such that each RTP that provides transmission service for the transaction will receive a share of those revenues based on the ratio of (i) its applicable OASIS-posted ceiling rate for the transmission service provided to (ii) the sum of the applicable OASIS-posted ceiling rates for the transmission service of all of the RTPs providing the service.  For all Regional Transactions in which the Western Area Power Administration ("Western") participates, its share of revenues shall be capped at its applicable OASIS-posted all-hours non-firm rate.  The revenues from transactions in which Western participates when the cap on its revenue share applies shall be distributed first to Western up to its cap and then between the other RTPs providing transmission service for the transaction in accordance with the foregoing ratio calculated among themselves only; provided that none of the RTPs shall receive more than the ceiling rate for non-firm point-to-point transmission service posted on its OASIS.
            
ARTICLE 5
INDEMNITY; NO CONSEQUENTIAL DAMAGES
      5.1	Indemnification.

            (a)	Except as may be prohibited by law and subject to paragraphs (b) and (c) of this Section 5.1, each RTP shall indemnify, defend and hold harmless each other RTP and its respective directors, officers, employees, principals, representatives and agents from and against any and all third-party claims, demands, liabilities, losses, causes of action, awards, fines, penalties, litigations, costs and expenses (collectively, "Claims") asserted against or incurred by any of them resulting from or based upon: (i) breach of the terms and conditions of this Agreement and the Regional Tariff or (ii) by the first-referenced RTP's gross negligence or willful misconduct in the performance of this Agreement and the Regional Tariff. 
            
            (b)  	Each RTP shall, to the extent provided herein, indemnify each other RTP from and against liability for refunds to Regional Transmission Customers resulting from or based upon an order of the Commission or other Regulatory Authority having jurisdiction in the matter finding that the Regional Rate charged for Regional Transactions from which such first referenced RTP received revenues was in excess of the lawful rate.  The amount of such indemnification shall be limited to the amount of excess revenue received by the indemnifying Party plus any applicable interest, as determined in accordance with such order.  As a condition for benefiting from the indemnification provided for in paragraphs (a) and (b) of this Section 5.1, a Party that may be entitled to indemnification shall give prompt notice of any proceeding concerning such potential liability to any Party that may become obligated to provide indemnification and shall not object to the participation of the latter Party in any such proceeding.
            
            (c)	Nothing in this Agreement shall be deemed to waive, limit or impair in any degree the exemption of any Non-Jurisdictional RTP from the provisions of the Federal Power Act, or to submit any Non-Jurisdictional RTP to the jurisdiction of the Commission thereunder.  Nothing in this Section 5.1 shall be deemed to prevent any RTP from indemnifying any other RTP to the extent provided in paragraph 5.1(b) for refund liability arising out of transactions from which the indemnifying RTP received revenue; provided that no Parties are voluntarily submitting to refund authority that the Commission does not otherwise have.  
            
            (d)	The obligations of the Parties under this Agreement are several and not joint, and no Party has an obligation to: (1) cure any breach or default of another Party, (2) pay any fees or fines owed by another Party or (3) compensate a third party by or on behalf of any other Party.
            
            (e) 	Notwithstanding the foregoing, the Western Area Power Administration ("Western") shall be liable for negligence on the part of its officers and employees in accordance with the Federal Tort Claims Act, as amended, and shall be liable to reimburse any other RTP for excess revenue received by Western, plus any applicable interest, only to the extent consistent with applicable federal law. 
            
      5.2	No Consequential Damages.  The RTPs shall not be liable to one another under this Agreement (by way of indemnification, damages or otherwise) for any indirect, incidental, exemplary, punitive, special or consequential damages.
      
      5.3	Survival.  The rights, obligations and liabilities of each RTP under this Article 5 shall survive termination of this Agreement and the withdrawal of an RTP from this Agreement.

ARTICLE 6
DISPUTE RESOLUTION
      6.1	Disputes.  Any controversy, claim or dispute of whatsoever nature or kind between or among the Parties arising out of or in connection with this Agreement (each a "Dispute") shall be resolved pursuant to the procedures of this Article 6.

	6.2	Dispute Notices.  If a Dispute arises between or among the Parties, then any Party to such Dispute may provide written notice thereof to the other Parties, including a detailed description of the subject matter of the Dispute (the "Dispute Notice").  The Dispute Notice shall identify the Party or Parties to the Dispute, which shall participate in the dispute resolution process.  Each other Party shall inform the other Parties in writing whether it will participate in the dispute resolution process.  The Party providing the Dispute Notice, each other Party identified in the Dispute Notice as a party to the Dispute and each other Party electing to participate in the Dispute shall be referred to as a "Disputing Party."

	6.3	Informal Resolution of Disputes.  Upon the issuance or receipt of a Dispute Notice, the representatives of each Disputing Party shall in good faith attempt to resolve such Dispute by informal negotiations within sixty (60) days from the date of receipt of such Dispute Notice.  If the Dispute is not resolved within sixty (60) days following receipt of the Dispute Notice or such later date as the Disputing Parties may mutually agree, then each Disputing Party shall promptly designate its most senior executive responsible for the subject matter of the Dispute who shall have authority to resolve the Dispute.  The senior executives shall obtain such information as may be necessary to inform themselves of the substance and particulars of the Dispute and shall meet within thirty (30) days, at a time and place mutually acceptable to the senior executives.  If the senior executives are unable to resolve the Dispute within forty-five (45) days of their first meeting or such later date as the senior executives may mutually agree, then, unless prohibited by law, the Dispute shall be resolved solely and exclusively by binding arbitration in accordance with Section 6.4; provided, however, that the Parties acknowledge and agree that a Dispute over which a governmental authority has exclusive jurisdiction shall, in the first instance, be brought before and resolved by such governmental authority.
      
      6.4	Binding Arbitration.  Disputes that are not resolved pursuant to Section 6.3 shall be resolved by binding arbitration before an independent arbitrator mutually acceptable to the Disputing Parties.  The arbitration shall be conducted in a place to be mutually agreed to by the Disputing Parties and in the absence of such agreement, in Phoenix, Arizona.  The arbitration shall be conducted in accordance with the American Arbitration Association's commercial arbitration rules then in force and effect. 

ARTICLE 7
REPRESENTATIONS AND WARRANTIES
      Each Party listed on Exhibit A to this Agreement represents and warrants to the other Parties as of the Execution Date as follows:
            (a)	It is duly formed, validly existing and in good standing under the laws of the jurisdiction of its formation or organization.
            (b)	Subject to Regulatory Approvals, it has all requisite power necessary to own its assets and carry on its business as now being conducted or as proposed to be conducted under this Agreement.
            (c)	Subject to Regulatory Approvals, it has all necessary power and authority to execute and deliver this Agreement and to perform its obligations under this Agreement, and the execution and delivery of this Agreement and the performance by it of this Agreement have been duly authorized by all necessary action on its part.
            (d)	The execution and delivery of this Agreement and the performance by it of this Agreement do not and shall not: (i) violate its organizational documents; (ii) violate any applicable laws; or (iii) result in a breach of or constitute a default of any material agreement to which it is a party.
            (e)	Assuming the due authorization, execution and delivery of this Agreement by each other Party, and subject to Regulatory Approvals, this Agreement constitutes its legal, valid and binding obligation enforceable against it in accordance with its terms, except as the same may be limited by bankruptcy, insolvency or other similar laws affecting creditors' rights generally and by principles of equity regardless of whether such principles are considered in a proceeding at law or in equity.
ARTICLE 8
MISCELLANEOUS TERMS
      8.1	Governing Law.  This Agreement shall be governed by, and construed in accordance with, the laws of the State of Arizona, except to the extent preempted by federal law.

      8.2	Notices.  All notices, consents, waivers and other communications required or permitted by this Agreement to be given to another Party will be in writing and will be deemed to have been given when (a) delivered to the other Party's address personally, by messenger, by a nationally or internationally recognized overnight delivery service or otherwise, (b) sent to the other Party by facsimile, e-mail or other electronic transmission, with confirmation of transmission by the transmitting equipment; or (c) received or rejected by the other Party, if sent by certified mail, return receipt requested, in each case, addressed to the other Party at its address, facsimile number or email address posted on the WestConnect Internet site for this Agreement.
      8.3	Entire Agreement.  This Agreement constitutes and expresses the entire understanding among the Parties with respect to the subject matter hereof, and supersedes all prior agreements and understandings, inducements, commitments or conditions, express or implied, oral or written.

      8.4	Amendments.  Neither this Agreement nor any provision hereof may be amended or modified other than by an agreement in writing signed by all of the RTPs.

      8.5	No Waiver.  No failure on the part of any Party to exercise, and no delay in exercising, any right hereunder shall operate as a waiver thereof; nor shall any single or partial exercise of any such right preclude any other or further exercise thereof or the exercise of any other right.

      8.6	Severability of Provisions.  The provisions of this Agreement are independent of and separable from each other.  If any provision of this Agreement shall for any reason be held invalid or unenforceable, such invalidity or unenforceability shall not affect the validity or enforceability of any other provision hereof, but this Agreement shall be construed as if such invalid or unenforceable provision had never been contained herein.

      8.7	Assignments; Successors.  
      
            (a)	Except as otherwise provided in this Section 8.7, no Party may assign any of its rights or delegate any of its duties or obligations under this Agreement without the prior written consent of the other Parties, such consent not to be unreasonably withheld, except that any RTP may, without the consent of the other RTPs, assign its rights and delegate its duties and obligations under this Agreement to a successor to which all or substantially all of the transmission assets of such RTP shall be transferred or to an affiliate of the assigning RTP for the purposes of a corporate restructuring, provided, however, that in each such case the successor or affiliate has executed an Addendum to this Agreement and if required, made all necessary filings in connection with any applicable Regulatory Approvals.  Subject to the preceding sentence, this Agreement will apply to, be binding in all respects upon, and inure to the benefit of, the successors and permitted assigns of the Parties. 
            
            (b)	The Parties shall have the right at any time and from time to time to mortgage, create or provide for a security interest in or convey in trust their respective rights, titles and interests in this Agreement to a trustee or trustees or a mortgagee or mortgagees under deeds of trust, mortgages or indentures, or to secured parties under a security agreement, and to any successors or assigns thereof without need for the prior consent of the other Parties, and without such mortgagee, trustee or secured party assuming or becoming in any respect obligated to perform any of the obligations of the Parties.
            
      	(c)	Any mortgagee, trustee or secured party under present or future deeds of trust, mortgages, indentures or security agreements of any of the Parties and any successor or assign thereof, and any receiver, referee, or trustee in bankruptcy or reorganization of any of the Parties, and any successor by action of law or otherwise, and any purchaser, transferee or assignee of any thereof may, without need for the prior consent of the other Parties, succeed to and acquire all the rights, titles and interests of such Party in this Agreement and may foreclose upon said rights, titles and interests of such Party.

      8.8	No Third Party Beneficiaries.  Nothing expressed or referred to in this Agreement will be construed to give any person other than the Parties any legal or equitable right, remedy or claim under or with respect to this Agreement or any provision of this Agreement, except such rights as shall inure to a successor or permitted assignee pursuant to Section 8.7.

      8.9	Joint Effort.  Preparation of this Agreement has been a joint effort of the Parties and the resulting document shall not be construed more severely against one of the Parties than against the others and no provision in this Agreement is to be interpreted for or against any Party because that Party or its counsel drafted such provision.  Each Party acknowledges that in executing this Agreement it has relied solely on its own judgment, belief and knowledge, and such advice as it may have received from its own counsel, and it has not been influenced by any representation or statement made by the other Parties or their counsel not contained in this Agreement.

      8.10	Schedules and Exhibits.  The Schedules and Exhibits hereto together with all attachments referenced therein, are incorporated herein by reference and made a part of this Agreement.

      8.11	Counterparts.  This Agreement may be executed in one or more counterparts, each of which will be deemed to be an original copy of this Agreement and all of which, when taken together, will be deemed to constitute one and the same agreement.  The exchange of copies of this Agreement and of signature pages by facsimile or email transmission shall constitute effective execution and delivery of this Agreement as to the Parties and may be used in lieu of the original Agreement for all purposes.  Signatures of the Parties transmitted by facsimile or email shall be deemed to be their original signatures for all purposes.

	8.12	Consistency with Federal Laws and Regulations.  Nothing in this Agreement shall compel any Party to (i) violate federal statutes or regulations; or (ii) in the case of a federal governmental authority or instrumentality, to exceed its statutory authority, as defined by any applicable federal statutes, regulations, or orders lawfully promulgated thereunder.  If any provision of this Agreement is inconsistent with any obligation imposed on any Party by federal law or regulation, to that extent it shall be inapplicable to that Party.  No Party shall incur any liability by failing to comply with a provision of this Agreement that is inapplicable to it by reason of being inconsistent with any federal statutes, regulations or orders lawfully promulgated thereunder; provided, however, that such Party shall use its best efforts to comply with the Agreement to the extent that applicable federal laws, regulations and orders lawfully promulgated thereunder permit it to do so.



[SIGNATURE PAGES FOLLOW] 


      IN WITNESS WHEREOF, the initial Parties to this Agreement (listed below) have caused their duly authorized representatives to execute this WestConnect Point-to-Point Regional Transmission Service Participation Agreement on its behalf as of the Execution Date.

ARIZONA PUBLIC SERVICE COMPANY

By: 	Robert R. Bean			
Title: 	Transmission Services Trading Section Leader	
Date: 						

EL PASO ELECTRIC COMPANY

By: 	Jose G. Nevarez			
Title: 	Assistant Vice President		
Date: 						

PUBLIC SERVICE COMPANY OF COLORADO

By 	Ian R. Benson				
Title 	Director, Transmission Business Relations &amp; Asset Management	
PUBLIC SERVICE COMPANY OF NEW MEXICO

By: 	David Eubank			
Title: 	Director, Power Operation
Date: 						


SOUTHWEST TRANSMISSION COOPERATIVE, INC.

By: 	Shane Sanders			
Title: 	Director of System Operations 			
Date: 						

TRI-STATE GENERATION AND TRANSMISSION ASSOCIATION, INC.

By: 	Joel K. Bladow				
Title: 	Senior Vice-President, Transmission		
Date: 						

TUCSON ELECTRIC POWER COMPANY

By: 	 Ed Beck					
Title: 	Director, Transmission Policy &amp; Contracts		
Date: 						

WESTERN AREA POWER ADMINISTRATION

By: 	Ronald E. Moulton			
Title: 	Transmission Services Manager	
Date: 						




EXHIBIT A

INITIAL PARTIES TO WESTCONNECT AMENDED AND RESTATED
POINT-TO-POINT REGIONAL TRANSMISSION SERVICE 
PARTICIPATION AGREEMENT




PARTY
DATE
Arizona Public Service Company

El Paso Electric Company
 
Public Service Company of Colorado
 
Public Service Company of New Mexico
 
Southwest Transmission Cooperative, Inc.

Tri-State Generation and Transmission Association, Inc.
 
Tucson Electric Power Company
 
Western Area Power Administration
 






EXHIBIT B 

WESTCONNECT 
POINT-TO-POINT 
REGIONAL TRANSMISSION SERVICE 
TARIFF

Article I. 
Preamble
            [Insert RTP Full Legal Name] (the "Transmission Provider"), in coordination with the other RTPs (as defined below) will provide Regional Transmission Service pursuant to the applicable terms and conditions of this WestConnect Point-To-Point Regional Transmission Service Tariff (the "Regional Tariff") commencing on the Effective Date (as defined below) and ending on the earlier of the date when this Regional Tariff is terminated or the Transmission Provider withdraws this Regional Tariff in accordance with its terms.  

Article II. 
Definitions
In addition to terms defined elsewhere in this Regional Tariff and unless the context otherwise requires, capitalized and defined terms used herein shall have the meanings given to them below:

		"Administrative Charge" has the meaning set forth in Section 7.1(f).

		"Balancing Authority" means the responsible entity that integrates resource plans ahead of time, maintains load-interchange-generation balance within a Balancing Authority Area, and supports interconnection frequency in real time.  The Balancing Authority shall be either the Transmission Provider or a designee of the Transmission Provider.

            "Balancing Authority Area" means the collection of generation, transmission, and loads within the metered boundaries of the Balancing Authority.  The Balancing Authority maintains load-resource balance within this area.

		"Billing Agent" means an independent third party retained by the RTPs to act as billing agent for Regional Transactions.
            
            "Commission" means the Federal Energy Regulatory Commission or any successor thereto.

            "Curtail" or "Curtailment" means a reduction in Regional Transmission Service in response to a transfer capability shortage as a result of emergency or system reliability conditions.

            "Delivering Party" means the entity supplying capacity and energy at Regional Point(s) of Receipt to be transmitted by the RTPs pursuant to this Regional Tariff.
            
            "Effective Date" means [Jurisdictional RTPs use the following language:  the date on which the Commission makes this Regional Tariff effective.]  [Non-jurisdictional RTPs use the following language:  the date on which the Transmission  Provider makes this Tariff effective pursuant to a posting on its OASIS.]  

            "Eligible Customer" is an entity that has met the conditions required of Transmission Customers to take point-to-point transmission service under the respective OATT of each RTP providing service for a particular Regional Transaction.  

            "Good Utility Practice" shall mean any of the practices, methods and acts engaged in or approved by a significant portion of the electric utility industry operating within the western reliability region of the North American Electric Reliability Corporation during the relevant time period, or any of the practices, methods and acts which, in the exercise of reasonable judgment in light of the facts known at the time the decision was made, could have been expected to accomplish the desired result at a reasonable cost consistent with good business practices, reliability, safety and expedition.  Good Utility Practice is not intended to be limited to the optimum practice, method, or act to the exclusion of all others, but rather to be acceptable practices, methods, or acts generally accepted in the region.

		"Interruption" or "Interrupt" means a reduction in Regional Transmission Service due to economic reasons.

		"Jurisdictional RTP" means an RTP that is subject to the jurisdiction of the Commission under Sections 205 and 206 of the Federal Power Act.

            "Native Load Customers" means the wholesale and retail customers of an RTP on whose behalf the RTP, by statute, franchise, regulatory requirement, or contract, has undertaken an obligation to construct and operate the RTP's Transmission System to meet the reliable electric needs of such customers.

		"Network Customers" means customers receiving transmission service pursuant to the terms of an RTP's Network Integration Transmission Service Agreement under Part III of the RTP's OATT.
            
            "Non-Firm Transmission Service" means hourly non-firm point-to-point transmission service provided by any RTP pursuant to its respective OATT.

            "Non-Jurisdictional RTP" means an RTP that is not subject to the jurisdiction of the Commission under Sections 205 and 206 of the Federal Power Act.
            
"OATT" means, in respect of a particular RTP, the open access transmission tariff of such RTP on file with the Commission or, if such RTP is not required to file such tariff with the Commission, the open access transmission tariff of such RTP posted on its OASIS. 
	
	"Participation Agreement" means that certain WestConnect Amended and Restated Point-to-Point Regional Transmission Service Participation Agreement effective as of the Effective Date (as defined therein) by and among the RTPs.

            "Receiving Party" means the entity receiving capacity and energy made available at, and transmitted by RTPs to, Regional Point(s) of Delivery pursuant to this Regional Tariff.

            "Regional Charge" has the meaning set forth in Section 7.1(a).

            "Regional Point(s) of Delivery" means the point(s) of interconnection on the Regional Transmission System where capacity and energy from the Delivering Party will be made available and delivered to the Receiving Party by the RTPs pursuant to this Regional Tariff.

            "Regional Point(s) of Receipt" means the point(s) of interconnection on the Regional Transmission System where capacity and energy from the Delivering Party will be received by the RTPs for transmission pursuant to this Regional Tariff.

            "Regional Rate" means the highest of the ceiling rates for hourly non-firm transmission service posted on the respective OASIS of the RTPs who would provide Regional Transmission Service, for service under their OATTs at the time of the Regional Transaction.  The Regional Rate is not a discounted rate subject to Schedule 8 of the Commission's pro forma open access transmission tariff and shall not be subject to discount.
            
            "Regional Tariff" means this WestConnect Point-To-Point Regional Transmission Service Tariff as set forth in the preamble.
            
            "Regional Transaction" means a single transaction in which Regional Transmission Service is provided to an Eligible Customer, pursuant to the Regional Tariff.

            "Regional Transmission Service" means hourly non-firm point-to-point transmission service across the Regional Transmission System provided by the Transmission Provider and other RTPs pursuant to this Regional Tariff. 

            "Regional Transmission System" means the aggregate facilities owned, controlled or operated by the RTPs that are used to provide Regional Transmission Service pursuant to this Regional Tariff.
            
            "RTP" means any entity that is a Party to the Participation Agreement, and that is providing Regional Transmission Service pursuant to the Regional Tariff as adopted by such entity.

		"Service Agreement" has the meaning set forth in Section 3.3.

            "Transmission Customer" means an Eligible Customer taking Regional Transmission Service under this Regional Tariff.

            "Transmission System" means, in respect of any RTP, the facilities owned by such RTP that are used to provide Regional Transmission Service pursuant to this Regional Tariff.
            
            "wesTTrans" means the OASIS site of the RTPs, or its successor site.

Article III. 
Nature of Regional Transmission Service
      3.1 Hourly Service
	Regional Transmission Service shall be provided on an hourly basis and can be reserved for up to twenty-four (24) consecutive hours.  Notwithstanding anything to the contrary contained in this Regional Tariff, in no event shall Regional Transmission Service be available on any RTP's Transmission System if the term would extend beyond the date on which that RTP would no longer be an RTP providing Regional Transmission Service pursuant to this Regional Tariff.

      3.2 Reservation Priority

	Regional Transmission Service shall be available from transfer capability in excess of that needed for reliable service to Native Load Customers, Network Customers and other transmission customers taking long-term and short-term firm point-to-point transmission service, or daily, weekly and monthly non-firm transmission service, previously-reserved hourly non-firm transmission service under an RTP's OATT, or service reserved pursuant to a grandfathered agreement, and for margins or reserves required or permitted under applicable reliability standards.  Subject to such availability, Regional Transmission Service shall be available on a first-come, first-served basis (i.e., in the chronological sequence in which each Eligible Customer has reserved such service). 

      3.3 Service Agreements

	Eligible Customers must execute an umbrella service agreement in the form attached hereto as Annex A, or must have executed an umbrella service agreement in the form attached as Annex A to any predecessor to this Regional Tariff (the "Service Agreement"), with all of the RTPs or each RTP whose Transmission System will be used to provide Regional Transmission Service for such Eligible Customer at any time; provided that the umbrella service agreements previously executed by Eligible Customers with RTPs shall be deemed to refer to this Regional Tariff and shall continue in effect and constitute Service Agreements for all purposes of this Regional Tariff until terminated in accordance with their terms.  Executed Service Agreements that contain the information required under this Regional Tariff for service provided by Jurisdictional RTPs shall be filed with the Commission if required by Commission regulations.

      3.4 Curtailment or Interruption of Regional Transmission Service

            (a)  If a Curtailment on the Regional Transmission System, or a portion thereof, is required, then Curtailments will be made on a non-discriminatory basis to the Regional Transaction(s) that effectively relieve the constraint.  When the RTPs determine that an electrical emergency exists on the Regional Transmission System and implement emergency procedures to Curtail Regional Transmission Service, the Transmission Customer shall make the required reductions upon request of the RTPs.  The RTPs reserve the right to Curtail, in whole or in part, Regional Transmission Service provided under this Regional Tariff for reliability reasons when an emergency or other unforeseen condition threatens to impair or degrade the reliability of the Regional Transmission System.  

            (b)	  The RTPs reserve the right to Interrupt, in whole or in part, Regional Transmission Service provided under this Regional Tariff for economic or other reasons in accordance with the product type priority rules established in the RTPs' OATTs.  The RTPs also will discontinue or reduce service to the Transmission Customer to the extent that deliveries for transmission are discontinued or reduced at the Regional Point(s) of Receipt.  
            
            (c)  Where required, Curtailments or Interruptions will be made on a non-discriminatory basis to the transaction(s) that effectively relieve the constraint; provided, however, that Regional Transmission Service shall be subordinate to firm transmission service provided to Native Load Customers, customers taking Firm Point-to-Point transmission service and Network Customers under transactions that are not Regional Transactions.  If multiple transactions require Curtailment or Interruption, to the extent practicable and consistent with Good Utility Practice, Curtailments or Interruptions will be made in accordance with the product type priority rules established in the RTPs' OATTs.  The RTPs will provide advance notice of Curtailment or Interruption where such notice can be provided consistent with Good Utility Practice.
            
            (d)  No credit will be given to Transmission Customers affected by Curtailments or Interruptions of Regional Transmission Service. 

      3.5 Classification of Regional Transmission Service
            (a)	Due to the short term, non-firm nature of the Regional Transmission Service, the Transmission Customer taking Regional Transmission Service may not change its Regional Point(s) of Receipt or Point(s) of Delivery to obtain alternative service on a non-firm basis.  Transmission Customers may not redirect, resell, rollover or convert Regional Transmission Service.
            (b)	The Palo Verde/Hassayampa Common Bus will be treated as a single Regional Point of Receipt and as a single Regional Point of Delivery for transactions scheduled to or from such Common Bus.
		(c)	The Transmission Provider shall provide deliveries of capacity and energy from the Regional Point(s) of Receipt to the Regional Point(s) of Delivery on a non-firm basis only.  Regional Points of Receipt and corresponding capacity reservations shall be as mutually agreed upon by the RTPs for Regional Transmission Service.  The Transmission Customer's reserved capacity shall be the greater of either (1) the sum of the capacity reservations at the Regional Point(s) of Receipt, or (2) the sum of the capacity reservations at the Regional Point(s) of Delivery.  The Transmission Customer will be billed for its reserved capacity.  The Transmission Customer may not exceed its capacity reserved at each Regional Point of Receipt and each Regional Point of Delivery.

		(d)	Eligible Customers requesting Regional Transmission Service for the transmission of power do so with the full realization that such service is subject to availability and to Curtailment or Interruption under the terms of this Regional Tariff.

      3.6 Withdrawal and Termination of the Regional Tariff
      	(a)	The Transmission Provider may withdraw this Regional Tariff, and any other RTP may withdraw its Regional Tariff, (i) at any time prior to the Effective Date, at the sole discretion of the Transmission Provider or the RTP, respectively; (ii) at any time (either before, on or after the Effective Date), due to the occurrence or material risk of adverse regulatory action (subject to any obligations incurred for transactions already consummated under the Regional Tariff in which the withdrawing Transmission Provider or other RTP participated), as determined in the sole discretion of the Transmission Provider or other RTP, including, but not limited, to, conditions that may be imposed by the Commission or any other governmental authority, or as a result of intervenor action or a complaint, on the Regional Transmission Service, such as subjecting the rates, transmission revenue requirements or costs of a Non-Jurisdictional RTP to review under the Federal Power Act, either directly or indirectly, or subjecting an RTP to refunds or the possibility thereof, or (iii) for any reason and at the sole discretion of the withdrawing RTP, upon ninety (90) days prior written notice to the other RTPs effective at any time following the Effective Date.  It shall be a condition precedent to the effectiveness of any withdrawal that the withdrawing Transmission Provider or other RTP pay all amounts due and payable under this Regional Tariff prior to such withdrawal.  The Transmission Provider acknowledges and agrees that this Regional Tariff will continue in effect as to other RTPs notwithstanding the withdrawal of one or more other RTPs.
      
		(b) 	This Regional Tariff will be in effect until the Transmission Provider and the other RTPs mutually agree to terminate Regional Transmission Service or the Transmission Provider has withdrawn this Regional Tariff in accordance with its terms.  

Article IV. 
Regional Transmission Service Terms
      4.1 General Conditions

	The Transmission Provider will provide Regional Transmission Service over its Transmission System to any Eligible Customer that has met the requirements of this Regional Tariff.

      4.2 Calculation of Available Transfer Capability

	Each RTP shall calculate the Available Transfer Capability ("ATC") consistent with the applicable requirements of the Reliability Standards adopted by the North American Electric Reliability Corporation and in accordance with its OATT.

      4.3 Real Power Losses

	Losses will be based on transactions across each Transmission System used in the Regional Transaction, as provided in Section 7.1(e) hereof, and will be monetized at the rate published in the ICE Palo Verde Financial Peak Daily Electricity Price Index or ICE Palo Verde Financial Off-Peak Daily Electricity Price Index ("Palo Verde Index") for the trade date of the transaction, and will be paid for by the Transmission Customer.

Article V. 
Transmission Customer Responsibilities 
      5.1 Conditions Required of Transmission Customers
      Regional Transmission Service shall be provided by the RTPs only if the following conditions are satisfied by the Transmission Customer: 
            (a)		The Transmission Customer has submitted a request for service via the wesTTrans.net OASIS site; 
            (b)	The Transmission Customer qualifies as an Eligible Customer as defined in this Regional Tariff, which includes satisfying the creditworthiness criteria as defined in the OATT of each RTP that will provide the transmission service;
            (c)	The Transmission Customer has arrangements in place for any other transmission service necessary to effect the delivery from the generating source to the Regional Transmission System prior to the time Regional Transmission Service commences; 
            (d)	The Transmission Customer has executed a Service Agreement with the Transmission Provider and each other RTP whose Transmission System will be used for the Regional Transaction; 
            (e)	If the Regional Transmission Service is to be used to serve load within the Balancing Authority Area of an RTP, the Transmission Customer satisfies any requirements for ancillary services under Schedules 3-6 of that RTP's OATT (as the same may be amended or revised from time to time); and
            (f)	If the Regional Transmission Service is to be used to deliver energy from a generator located within an RTP's Balancing Authority Area to load outside that Balancing Authority Area, the Transmission Customer satisfies any requirements for Generator Imbalance Service under Schedule 9 of that RTP's OATT (as the same may be amended or revised from time to time).
5.2 Conditions Applicable to RTPs who Own Facilities Financed by Local Furnishing Bonds or Other Tax-Exempt Bonds

      In addition to the conditions in Section 5.1, Regional Transmission Service shall be provided by the RTPs only if Eligible Customers requesting Regional Transmission Service comply with all special requirements (e.g., Two County Furnishing Bond requirements) applicable to the RTPs that own transmission, distribution or generation facilities financed by local furnishing bonds or other tax-exempt bonds, which special requirements are specified in the RTPs' OATTs.
Article VI. 
Procedures for Arranging Regional Transmission Service 
      6.1 Reservation of Regional Transmission Service
	Requests for Regional Transmission Service shall be submitted no earlier than 0700 MST of the day before the requested Regional Transmission Service is to commence and must be received no later than 1400 MST of such day.  Requests for Regional Transmission Service submitted after 1400 MST of such day will be accommodated if practicable. 
6.2 Processing of Requests for Regional Transmission Service that Would Be more Expensive than Service under Individual OATTs
	If the WestConnect Deal Wizard indicates that a proposed Regional Transaction is more expensive at the Regional Rate than it would be under the combined OATT rates of the RTPs that would provide the requested Regional Transmission Service - i.e., if the WestConnect Regional Transmission Service software shows a negative amount - each segment of the requested transmission path will be processed as a transmission service request under the relevant RTP's individual OATT.  A new submission of transmission service requests for the transaction to each of the relevant RTPs will not be required.  In such cases, each reserved segment of the transaction will be billed by the relevant RTP individually in accordance with its OATT, and will not be billed under this Regional Tariff.
 
      6.3 Determination of Available Transfer Capability
	Following receipt of a transmission service request, all RTPs will make a determination on a non-discriminatory basis of ATC pursuant to Section 4.2.  Such determination shall be made as soon as reasonably practicable after receipt, but not later than 30 minutes after receipt of the transmission service request.
      6.4 Scheduling Regional Transmission Service
	Schedules for Regional Transmission Service must be submitted to the RTPs no later than 1400 MST of the day prior to the day on which such service is to commence.  Schedules for Regional Transmission Service submitted after that time will be accommodated if practicable.  Hour-to-hour schedules of energy to be delivered must be stated in increments of 1 megawatt per hour.  Scheduling changes will be permitted up to 20 minutes before the start of the next clock hour provided that the Delivering Party and Receiving Party also agree to the schedule modification.  The RTPs participating in a Regional Transaction will furnish to the Delivering Party's system operator hour-to-hour schedules equal to those furnished by the Receiving Party and shall deliver the capacity and energy provided by such schedules on a non-firm basis.  Should the Transmission Customer, Delivering Party or Receiving Party revise or terminate any schedule, such party shall immediately notify the RTPs providing the Regional Transmission Service for the transaction, and the RTPs shall have the right to adjust accordingly the schedule for capacity and energy to be received and to be delivered.  A Regional Transaction can be annulled at the request of the Transmission Customer only if all of the RTPs that would participate in the Regional Transaction agree to annul it.  Transmission Customers will not be charged for a reservation of Regional Transmission Service if all of the RTPs that would have participated in providing the service agree to annul it.

      6.5 Tagging Regional Transactions
	Regional Transmission Service is to be utilized and tagged in each case across the Transmission Systems of all of the RTPs involved in the Regional Transaction.  Each Regional Transaction must be tagged with an E-Tag that includes all segments of the Regional Transmission Service reserved.  If a Transmission Customer tags only one of the segments of a reserved path, the E-Tag will not be considered a Regional Transmission Service tag, and will be processed in accordance with the individual RTP's OATT, with appropriate ancillary service charges and losses being assessed.  

Article VII. 
Regional Transmission Service Rates
      7.1 Regional Transmission Service Rates
For each Regional Transaction, Transmission Customer agrees to pay the following charges:

		(a)		Regional Charge.  A charge (in $) equal to the product of (i) the total reserved megawatts for such Regional Transaction (in MWs) multiplied by (ii) the Regional Rate (in $/MW) for such Regional Transaction; plus

		(b)		Ancillary Service 1 Charge.  An Ancillary Service 1 charge (in $) equal to the product of (i) the total megawatts for such Regional Transaction (in MWs) multiplied by (ii) the sum of the rate (in $/MW) for scheduling, system control and dispatch service as each component is specified in the OATT for each RTP that participated in the Regional Transaction, provided that for any such RTP that charges a per-transaction based Ancillary Service 1 rate, the Transmission Customer will  pay that RTP's per-transaction based Ancillary Service 1 rate; plus

		(c)		Ancillary Service 2 Charge.  An Ancillary Service 2 charge (in $) equal to the product of (i) the total megawatts for such Regional Transaction (in MWs) multiplied by (ii) the rate (in $/MW) for reactive supply and voltage control as each component is specified in the OATT of the last RTP (i.e., the RTP that transmits the Transmission Customer's energy to the Regional Point of Delivery) participating in the Regional Transaction; plus

		(d)		Additional Ancillary Services.  Additional Ancillary Services; i.e. Ancillary 3:  Regulation and Frequency Response Service; Ancillary 4:  Energy Imbalance Service; Ancillary 5:  Operating Reserve - Spinning Reserve Service; Ancillary 6:  Operating Reserve - Supplemental Reserve Service; and Ancillary 9 - Generator Imbalance Service, to the extent required in conjunction with a Regional Transaction, as offered in accordance with the appropriate RTP's OATT; plus

		(e)		Losses Charge.  A losses charge (in $) equal to the product of (i) the total megawatts for such Regional Transaction (in MWs) multiplied by (ii) the sum of the loss rates (in %) as each component is specified in the OATT for each RTP that participated in the Regional Transaction (monetized based on the applicable Palo Verde Index price); plus

		(f)		Administrative Charges.  The Administrative Charge is designed to cover the costs of the Billing Agent and is set at $1.26 per MWh.  The Administrative Charge shall not be changed prior to July 1, 2018. 

These charges shall not be discounted.

      7.2	Payment to Billing Agent Account

	All charges for Regional Transmission Service provided for in this Regional Tariff shall be billed to the Transmission Customer by the Billing Agent and paid by the Transmission Customer to the Billing Agent.  The Billing Agent will also be responsible for making any refunds to which the Transmission Customer may be entitled in respect of a Regional Transaction. 

Article VIII.
Dispute Resolution and Governing Law

8.1 Internal Dispute Resolution Procedures  

      Any dispute between a Transmission Customer and an RTP involving transmission service under this Regional Tariff (excluding applications for changes to the Regional Tariff, or to any Service Agreement entered into by a Jurisdictional RTP under the Regional Tariff or its predecessor, which shall be presented directly to the Commission for resolution) shall be referred to a designated senior representative of the RTP and a senior representative of the Transmission Customer for resolution on an informal basis as promptly as practicable.  In the event the designated representatives are unable to resolve the dispute within thirty (30) days (or such other period as the Transmission Customer and the RTP may agree upon) by mutual agreement, such dispute may be submitted to arbitration and resolved in accordance with the arbitration procedures set forth below.

8.2 External Arbitration Procedures
      
      Any arbitration initiated under this Regional Tariff shall be conducted before a single neutral arbitrator appointed by the parties to the dispute (hereinafter, the "Parties").  If the Parties fail to agree upon a single arbitrator within ten (10) days of the referral of the dispute to arbitration, each of the Parties shall choose one arbitrator who shall sit on a three-member arbitration panel.  The two arbitrators so chosen shall within twenty (20) days select a third arbitrator to chair the arbitration panel.  In either case, the arbitrators shall be knowledgeable in electric utility matters, including electric transmission and bulk power issues, and shall not have any current or past substantial business or financial relationships with any party to the arbitration (except prior arbitration).  The arbitrator(s) shall provide each of the Parties an opportunity to be heard and, except as otherwise provided herein, shall generally conduct the arbitration in accordance with the Commercial Arbitration Rules of the American Arbitration Association and any applicable Commission regulations. 
      
8.3 Arbitration Decisions  

      Unless otherwise agreed, the arbitrator(s) shall render a decision within ninety (90) days of appointment and shall notify the Parties in writing of such decision and the reasons therefor.  The arbitrator(s) shall be authorized only to interpret and apply the provisions of the Regional Tariff and any Service Agreement entered into under the Regional Tariff (or its predecessor) and shall have no power to modify or change any of the above in any manner.  The decision of the arbitrator(s) shall be final and binding upon the Parties, and judgment on the award may be entered in any court having jurisdiction.  The decision of the arbitrator(s) may be appealed solely on the grounds that the conduct of the arbitrator(s), or the decision itself, violated the standards set forth in the Federal Arbitration Act and/or the Administrative Dispute Resolution Act.  The final decision of the arbitrator must also be filed with the Commission if it affects jurisdictional rates, terms and conditions of service or facilities.
      
8.4 Costs  

      Each Party shall be responsible for its own costs incurred during the arbitration process and for the following costs, if applicable:
      
1. the cost of the arbitrator chosen by the Party to sit on the three member panel and one half of the cost of the third arbitrator chosen; or
2. one half the cost of the single arbitrator jointly chosen by the Parties.


8.5 Rights Under The Federal Power Act; Governing Law
  
		(a)	Nothing in this section shall restrict the rights of any party to file a complaint with the Commission under relevant provisions of the Federal Power Act.
		(b)	The validity, interpretation and performance of this Regional Tariff and each of its provisions shall be governed by federal law and/or by the law of the state in which the Transmission Provider has its principal place of business (unless preempted by federal law).

ANNEX A
Form of Service Agreement for
WestConnect Point-To-Point Regional Transmission Service Tariff

1.0 This Service Agreement, dated as of [_______________] (this "Service Agreement"), is entered into by and between [_______________]2("RTP" and collectively, with other transmission providers providing service in a Regional Transaction, the "RTPs") and [_______________]3 (the "Transmission Customer").  Capitalized terms used but not defined herein shall have the meanings assigned to them in the RTP's WestConnect Point-To-Point Regional Transmission Service Tariff (the "Regional Tariff").

2.0 The Transmission Customer has been determined by the RTP to be a Transmission Customer under the Regional Tariff.  

3.0 Service under this Service Agreement shall be provided by the RTP upon request by an authorized representative of the Transmission Customer.

4.0 The Transmission Customer agrees: (a) to supply information that the RTP deems reasonably necessary in accordance with Good Utility Practice in order to provide any requested Regional Transmission Service; and (b) to provide information to the RTPs and the Billing Agent pursuant to and in accordance with the Regional Tariff in connection with any requested Regional Transmission Service.

5.0 The RTP agrees to provide and the Transmission Customer agrees to take and pay for the requested Regional Transmission Service in accordance with the provisions of the Regional Tariff and this Service Agreement.

6.0 Regional Transmission Service under this Service Agreement shall commence on the later of (a) the requested commencement date, or (b) such other date as the requested Regional Transmission Service is permitted to become effective by the Commission, if applicable.  Regional Transmission Service under this Service Agreement shall terminate on such date as is mutually agreed upon by the Transmission Customer and the RTP, but no later than the earliest to occur of (i) the date of withdrawal of the Regional Tariff by the RTP, or (ii) the date of termination of the Regional Tariff by the RTPs.

7.0 Transmission Customer acknowledges and agrees that the RTP may withdraw at any time its Regional Tariff in accordance with the terms and conditions thereof and that effective upon withdrawal this Service Agreement shall automatically terminate solely with respect to the RTP, without any action by any party hereto.  


8.0 Any notice or request made to or by a party regarding this Service Agreement shall be made to the representative(s) of the other party or parties as indicated below:

RTP:
Name: _______________________________	
Address: ____________________________	
Address 2: ____________________________	
City, ST Zip: 	
Attention: ___________________________	



Transmission Customer:
Name: _________________________________
Address: _______________________________
Address 2: ____________________________	
City, ST Zip: 	
Attention: ______________________________

9.0 The Regional Tariff is incorporated and made a part of this Service Agreement.

IN WITNESS WHEREOF, the parties have caused this Service Agreement to be executed by their respective authorized officials.

RTP:  

By:	________________________________________	
	Name	

	________________________________________
      Printed Name	
      
      ________________________________________
      Title
      
      ________________________________________
      Date

Transmission Customer:

By:	________________________________________	
	Name	

	________________________________________
      Printed Name	
      
      ________________________________________
      Title
      
      ________________________________________
      Date
      
EXHIBIT C
FORM OF ADDENDUM

By execution of this addendum (this "Addendum") to the WestConnect Amended and Restated Point-to-Point Regional Transmission Service Participation Agreement, (the "Participation Agreement"), the undersigned hereby joins in the execution of the Participation Agreement, by and among Arizona Public Service Company, El Paso Electric Company, Public Service Company of Colorado, Public Service Company of New Mexico, Southwest Transmission Cooperative, Inc., Tri-State Generation and Transmission Association, Inc., Tucson Electric Power Company, Western Area Power Administration and each other person that becomes an RTP thereunder after the Execution Date and pursuant to the terms thereof (each, an "RTP" and, collectively, the "RTPs").  By executing this Addendum, the undersigned hereby agrees that it becomes a Party to the Participation Agreement and agrees to be bound by all of the terms and provisions of the Participation Agreement applicable to a Party thereto, subject to any applicable Regulatory Approvals.  Effective as of the date this Addendum is declared effective by the Commission, if applicable, and upon receipt of any other applicable Regulatory Approvals, the undersigned shall be an RTP for all purposes of the Participation Agreement, shall be bound by the terms and conditions thereof, and shall have all of the rights, duties and obligations of an RTP under the Participation Agreement.  

The undersigned represents and warrants to the other RTPs that each of the representations and warranties in Article 7 of the Participation Agreement is true and correct with respect to the undersigned as of the date hereof.  

[NEW RTP]

By _____________________________
Title ____________________________
_____________________________
_____________________________
_____________________________

Attn: ________________________

Telephone:  ([___]) [____________]
Facsimile:  ([___]) [____________]
Email:  [______________________









1 While the regional pricing initiative under the Regional Tariff  is a WestConnect-sponsored project, not all WestConnect members plan to participate at the time of filing of this Agreement.
2 Include name of applicable RTP.
3 Include name of Eligible Customer requesting Regional Transmission Service.
---------------


------------------------------------------------------------




---------------


------------------------------------------------------------










17








B11




Schedule 8.2-12</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>192</filing_id>
      <filing_title>WestConnect Point-to-Point Regional Transmission Service Participation Agreement</filing_title>
      <filing_type>10</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2013-07-01</current_effective_date>
      <ferc_order_date>2013-06-28</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>