<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C002456</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>1</tariff_id>
    <tariff_title>MBR Tariff</tariff_title>
    <tariff_export_date>2025-09-16T19:41Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>1</record_id>
      <option_code>A</option_code>
      <record_title>Electric Tariff Volume No. 1</record_title>
      <record_content_desc>TLC MBR Tariff</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>100000000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2011-07-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data>e1xydGYxXGFkZWZsYW5nMTAyNVxhbnNpXGFuc2ljcGcxMjUyXHVjMVxhZGVmZjBcZGVmZjBcc3RzaGZkYmNoMFxzdHNoZmxvY2gwXHN0c2hmaGljaDBcc3RzaGZiaTBcZGVmbGFuZzEwMzNcZGVmbGFuZ2ZlMTAzM3tcZm9udHRibHtcZjBcZnJvbWFuXGZjaGFyc2V0MFxmcHJxMntcKlxwYW5vc2UgMDIwMjA2MDMwNTA0MDUwMjAzMDR9VGltZXMgTmV3IFJvbWFuO317XGYxNzNcZnN3aXNzXGZjaGFyc2V0MFxmcHJxMntcKlxwYW5vc2UgMDIwZjA1MDIwMjAyMDQwMzAyMDR9Q2FsaWJyaTt9e1xmMjEyXGZyb21hblxmY2hhcnNldDIzOFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQ0U7fQ0Ke1xmMjEzXGZyb21hblxmY2hhcnNldDIwNFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQ3lyO317XGYyMTVcZnJvbWFuXGZjaGFyc2V0MTYxXGZwcnEyIFRpbWVzIE5ldyBSb21hbiBHcmVlazt9e1xmMjE2XGZyb21hblxmY2hhcnNldDE2MlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gVHVyO317XGYyMTdcZmJpZGkgXGZyb21hblxmY2hhcnNldDE3N1xmcHJxMiBUaW1lcyBOZXcgUm9tYW4gKEhlYnJldyk7fQ0Ke1xmMjE4XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNzhcZnBycTIgVGltZXMgTmV3IFJvbWFuIChBcmFiaWMpO317XGYyMTlcZnJvbWFuXGZjaGFyc2V0MTg2XGZwcnEyIFRpbWVzIE5ldyBSb21hbiBCYWx0aWM7fXtcZjIyMFxmcm9tYW5cZmNoYXJzZXQxNjNcZnBycTIgVGltZXMgTmV3IFJvbWFuIChWaWV0bmFtZXNlKTt9e1xmMTk0Mlxmc3dpc3NcZmNoYXJzZXQyMzhcZnBycTIgQ2FsaWJyaSBDRTt9DQp7XGYxOTQzXGZzd2lzc1xmY2hhcnNldDIwNFxmcHJxMiBDYWxpYnJpIEN5cjt9e1xmMTk0NVxmc3dpc3NcZmNoYXJzZXQxNjFcZnBycTIgQ2FsaWJyaSBHcmVlazt9e1xmMTk0Nlxmc3dpc3NcZmNoYXJzZXQxNjJcZnBycTIgQ2FsaWJyaSBUdXI7fXtcZjE5NDlcZnN3aXNzXGZjaGFyc2V0MTg2XGZwcnEyIENhbGlicmkgQmFsdGljO319e1xjb2xvcnRibDtccmVkMFxncmVlbjBcYmx1ZTA7XHJlZDBcZ3JlZW4wXGJsdWUyNTU7DQpccmVkMFxncmVlbjI1NVxibHVlMjU1O1xyZWQwXGdyZWVuMjU1XGJsdWUwO1xyZWQyNTVcZ3JlZW4wXGJsdWUyNTU7XHJlZDI1NVxncmVlbjBcYmx1ZTA7XHJlZDI1NVxncmVlbjI1NVxibHVlMDtccmVkMjU1XGdyZWVuMjU1XGJsdWUyNTU7XHJlZDBcZ3JlZW4wXGJsdWUxMjg7XHJlZDBcZ3JlZW4xMjhcYmx1ZTEyODtccmVkMFxncmVlbjEyOFxibHVlMDtccmVkMTI4XGdyZWVuMFxibHVlMTI4O1xyZWQxMjhcZ3JlZW4wXGJsdWUwOw0KXHJlZDEyOFxncmVlbjEyOFxibHVlMDtccmVkMTI4XGdyZWVuMTI4XGJsdWUxMjg7XHJlZDE5MlxncmVlbjE5MlxibHVlMTkyO317XHN0eWxlc2hlZXR7XHFqIFxmaS0zNjBcbGkzNjBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4zNjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNuZXh0MCBOb3JtYWw7fXtcKlxjczEwIFxhZGRpdGl2ZSBcc3NlbWloaWRkZW4gRGVmYXVsdCBQYXJhZ3JhcGggRm9udDt9e1wqDQpcdHMxMVx0c3Jvd2RcdHJmdHNXaWR0aEIzXHRycGFkZGwxMDhcdHJwYWRkcjEwOFx0cnBhZGRmbDNcdHJwYWRkZnQzXHRycGFkZGZiM1x0cnBhZGRmcjNcdGJsaW5kMFx0YmxpbmR0eXBlM1x0c2NlbGx3aWR0aGZ0czBcdHN2ZXJ0YWx0XHRzYnJkcnRcdHNicmRybFx0c2JyZHJiXHRzYnJkcnJcdHNicmRyZGdsXHRzYnJkcmRnclx0c2JyZHJoXHRzYnJkcnYgDQpccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGZzMjBcbGFuZzEwMjRcbGFuZ2ZlMTAyNFxjZ3JpZFxsYW5nbnAxMDI0XGxhbmdmZW5wMTAyNCBcc25leHQxMSBcc3NlbWloaWRkZW4gTm9ybWFsIFRhYmxlO317XHMxNVxxbCBcbGkwXHJpMFx3aWRjdGxwYXINClx0cWNcdHg0NjgwXHRxclx0eDkzNjBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDE1IGhlYWRlcjt9e1xzMTZccWwgXGxpMFxyaTBcd2lkY3RscGFyDQpcdHFjXHR4NDY4MFx0cXJcdHg5MzYwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQxNiBmb290ZXI7fXtcKlxjczE3IFxhZGRpdGl2ZSBccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXHNiYXNlZG9uMTAgcGFnZSBudW1iZXI7fXtcczE4XHFsIFxsaTI4ODBccmkwXHdpZGN0bHBhclxwaHBnXHBvc3hjXHBvc3liXGFic2gtMTk4MFxhYnN3NzkyMFxkeGZydGV4dDE4MFxkZnJtdHh0eDE4MFxkZnJtdHh0eTBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjI4ODBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MTggZW52ZWxvcGUgYWRkcmVzczt9e1xzMTlccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGZzMTJcbGFuZzEwMjRcbGFuZ2ZlMTAyNFxub3Byb29mXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MTkgRlBhdGg7fXtcczIwXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczIwXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQyMCBlbnZlbG9wZSByZXR1cm47fXtcczIxXHFqIFxmaS0zNjBcbGk3MjBccmk3MjBcc2w0ODBcc2xtdWx0MVx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjcyMFxsaW43MjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQyMSBCIEJsb2NrIDIsazI7fXtcczIyXHFqIFxmaTcyMFxsaTcyMFxyaTcyMFxzYTI0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjcyMFxsaW43MjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQyMiBCIEJsb2NrIDMsazM7fXtcczIzXHFqIFxmaS0zNjBcbGk3MjBccmk3MjBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW43MjBcbGluNzIwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MjMgQiBCbG9jayxrO317XHMyNFxxaiBcZmktMzYwXGxpMzYwXHJpMFxzbDQ4MFxzbG11bHQxXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4zNjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQyNCBCIEJvZHkgMixiMjt9e1xzMjVccWogXGZpLTM2MFxsaTM2MFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxmMTczXGhpY2hcYWYxNzNcZGJjaFxhZjE3M1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDI1IEIgQm9keSxiO317XHMyNlxxaiBcZmk3MjBcbGkzNjBccmkwXHNsNDgwXHNsbXVsdDFcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxmMTczXGhpY2hcYWYxNzNcZGJjaFxhZjE3M1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDI2IEIgRmlyc3QgSW5kIDIsZmkyO317XHMyN1xxbCBcZmk3MjBcbGkwXHJpMFxzYTI0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgDQpcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MjcgQiBGaXJzdCBJbmQsZmk7fXtcczI4XHFsIFxmaS0yMTYwXGxpMzYwMFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4zNjAwXGl0YXAwIFxydGxjaFxmY3MxIA0KXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDI4IEIgSGFuZ2luZyBJbmQgMixoaTI7fXtcczI5XHFqIFxmaS0yMTYwXGxpMjE2MFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjIxNjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgDQpcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQyOSBCIEhhbmdpbmcgSW5kLGhpO317XHMzMFxxaiBcZmk3MjBcbGk3MjBccmkwXHNhMjQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW43MjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgDQpcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQzMCBCIEluZGVudCAzLGkzO317XCpcY3MzMSBcYWRkaXRpdmUgXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcc3VwZXIgXHNiYXNlZG9uMTAgXHNzZW1paGlkZGVuIGVuZG5vdGUgcmVmZXJlbmNlO317DQpcczMyXHFsIFxmaTcyMFxsaTBccmkwXHNhMjQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MzIgXHNzZW1paGlkZGVuIGVuZG5vdGUgdGV4dDt9e1wqDQpcY3MzMyBcYWRkaXRpdmUgXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcc3VwZXIgXHNiYXNlZG9uMTAgXHNzZW1paGlkZGVuIGZvb3Rub3RlIHJlZmVyZW5jZTt9e1xzMzRccWwgXGZpNzIwXGxpMFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDM0IFxzc2VtaWhpZGRlbiBmb290bm90ZSB0ZXh0O317XHMzNVxxaiBcZmktMzYwXGxpMzYwXHJpMFxzYTM2MFxrZWVwXGtlZXBuXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9cb3V0bGluZWxldmVsMFxyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxiXGNhcHNcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQyNyBIZWFkaW5nIDEgTCxoMTt9e1xzMzZccWogXGZpLTM2MFxsaTM2MFxyaTBcc2EzNjBca2VlcFxrZWVwblx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXG91dGxpbmVsZXZlbDFccmluMFxsaW4zNjBcaXRhcDAgXHJ0bGNoXGZjczEgDQpcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQyNyBIZWFkaW5nIDIgTCxoMjt9ew0KXHMzN1xxYyBcZmktMzYwXGxpMzYwXHJpMFxzYTM2MFxrZWVwXGtlZXBuXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9cb3V0bGluZWxldmVsMFxyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxjYXBzXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0KXHNiYXNlZG9uMCBcc25leHQyNyBIZWFkaW5nIDMgQyxoMzt9e1xzMzhccWMgXGxpMFxyaTBcc2EzNjBca2VlcFxrZWVwblx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQyNyBIZWFkaW5nIDQgQyxoNDt9e1xzMzlccXIgXGZpLTM2MFxsaTM2MFxyaTBcc2EzNjBca2VlcFxrZWVwblx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXG91dGxpbmVsZXZlbDBccmluMFxsaW4zNjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcYlxjYXBzXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MjcgSGVhZGluZyA1IFIsaDU7fXtcczQwXHFyIFxmaS0zNjBcbGkzNjBccmkwXHNhMzYwXGtlZXBca2VlcG5cd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xvdXRsaW5lbGV2ZWwxXHJpbjBcbGluMzYwXGl0YXAwIFxydGxjaFxmY3MxIA0KXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MjcgSGVhZGluZyA2IFIsaDY7fXtcczQxXHFqIFxmaS0zNjBcbGkzNjBccmkwXHNhODQwXGtlZXBca2VlcG5cd2lkY3RscGFyXHR4NzIwXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjM2MFxpdGFwMCANClxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxmMTczXGhpY2hcYWYxNzNcZGJjaFxhZjE3M1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDQyIFNpZyBDYXB0aW9uLGM7fXtcczQyXHFqIFxmaS0zNjBcbGkzNjBccmkwXGtlZXBuXHdpZGN0bHBhcg0KXHRxclx0bHVsXHR4NDc1Mlx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4zNjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0NDMgU2lnIExpbmUsbDt9ew0KXHM0M1xxaiBcZmktMzYwXGxpMzYwXHJpMFxzYTI0MFxrZWVwXGtlZXBuXHdpZGN0bHBhclx0eDcyMFx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4zNjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MCANClNpZyBOYW1lLG47fXtcczQ0XHFqIFxmaS0zNjBcbGk3MjBccmkwXHNhMjQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW43MjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0NDQgDQpCIEluZGVudCxpO317XHM0NVxxaiBcZmktMzYwXGxpNzIwXHJpMFxzbDQ4MFxzbG11bHQxXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW43MjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0NDUgDQpCIEluZGVudCAyLGkyO317XHM0NlxxaiBcZmktMTA4MFxsaTEwODBccmkwXHNhMjQwXGtlZXBca2VlcG5cd2lkY3RscGFyXHR4MTA4MFx0eDUwNDBcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMTA4MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxmMTczXGhpY2hcYWYxNzNcZGJjaFxhZjE3M1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDQ2IE0gSGVhZGVyLG1oO317XHM0N1xxaiBcZmktMTA4MFxsaTEwODBccmkwXHNhNDAwXGtlZXBca2VlcG5cd2lkY3RscGFyXGJyZHJiXGJyZHJzXGJyZHJ3MTVcYnJzcDQ0MCANClx0eDEwODBcdHg1MDQwXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjEwODBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjQ2IFxzbmV4dDI2IE0gSGVhZGVyIExhc3QsbWhsO317XCpcY3M0OCBcYWRkaXRpdmUgDQpccnRsY2hcZmNzMSBcYWYwXGFmczEyIFxsdHJjaFxmY3MwIFxmMFxmczEyXHVsbm9uZVxjZjAgXHNiYXNlZG9uMTAgRlBhdGgyO317XHM0OVxxbCBcZmk3MjBcbGkwXHJpMFxzYTI0MFxub3dpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQ0OSBCb2R5IFRleHQ7fXtcczUwXHFsIFxsaTBccmkwXHNhMjQwXG5vd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb240OSBcc25leHQ0OSBCb2R5IFRleHQgQ29udGludWVkO317XHM1MVxxaiBcZmktMzYwXGxpMTQ0MFxyaTE0NDBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4xNDQwXGxpbjE0NDBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQ1MCBRdW90ZTt9e1xzNTJccWwgXGZpLTM2MFxsaTM2MFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxmMTczXGhpY2hcYWYxNzNcZGJjaFxhZjE3M1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDUyIFxzbGluazUzIEJvZHkgVGV4dCAyO317XCpcY3M1MyBcYWRkaXRpdmUgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMTAgXHNsaW5rNTIgXHNsb2NrZWQgIENoYXIgQ2hhcjM7fXtcczU0XHFsIFxmaS0zNjBcbGkzNjBccmkwXHNhMjQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4zNjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFpXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcaVxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxmMTczXGhpY2hcYWYxNzNcZGJjaFxhZjE3M1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb241MiBcc25leHQ1NCBcc2xpbms1NSBTdHlsZSBCb2R5IFRleHQgMiArIEl0YWxpYzt9e1wqXGNzNTUgXGFkZGl0aXZlIFxydGxjaFxmY3MxIFxhaVxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGlcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uNTMgXHNsaW5rNTQgXHNsb2NrZWQgU3R5bGUgQm9keSBUZXh0IDIgKyBJdGFsaWMgQ2hhcjt9e1wqXGNzNTYgXGFkZGl0aXZlIFxydGxjaFxmY3MxIFxhZjBcYWZzMTIgXGx0cmNoXGZjczAgDQpcZjE3M1xmczEyXHVsbm9uZVxleHBuZDBcZXhwbmR0dzBcY2YwXHVwMFxsYW5nMTAyNFxsYW5nZmUxMDI0XG5vc3VwZXJzdWJcYW5pbXRleHQwXHN0cmlrZWQwXG5vcHJvb2YgXHNiYXNlZG9uMTAgenptcFRyYWlsZXJJdGVtO319e1wqXGxhdGVudHN0eWxlc1xsc2RzdGltYXgxNTZcbHNkbG9ja2VkZGVmMH17XCpcbGlzdHRhYmxle1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTE2OTM4MTU4NDZcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1DQpcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDNcJzAwUTo7fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxjYXBzIFxmaS03MjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQ2NzI3MDk3NX0NCntcbGlzdFxsaXN0dGVtcGxhdGVpZDQyNTIzMTA2MFxsaXN0c2ltcGxle1xsaXN0bGV2ZWxcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGFvYmplY3Rpb246O317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxjYXBzXHVsdyBcZmktMTgwMFxsaTI1MjANClxqY2xpc3R0YWJcdHgyNTIwXGxpbjI1MjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMTE2Nzk2NDA1fXtcbGlzdFxsaXN0dGVtcGxhdGVpZDgwMjk4MDM0NlxsaXN0c2ltcGxle1xsaXN0bGV2ZWxcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDdhbnN3ZXI6O317XGxldmVsbnVtYmVyczt9DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGkwXGNhcHNcdWx3IFxmaS0xODAwXGxpMjUyMFxqY2xpc3R0YWJcdHgyNTIwXGxpbjI1MjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMzEwNDQ0NzE3fXtcbGlzdFxsaXN0dGVtcGxhdGVpZC02NDUxMDk3MjZcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTANClxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGFBbnN3ZXIgQU5EO317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxjYXBzXHVsbm9uZSBcZmkwXGxpMFxqY2xpc3R0YWJcdHgyMTYwXGxpbjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkNTQ4MzQ3ODM0fXtcbGlzdFxsaXN0dGVtcGxhdGVpZC01MzU5Mzk2OFxsaXN0c2ltcGxle1xsaXN0bGV2ZWxcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwDQpcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMkE6O317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMCBcZmktNzIwXGxpNzIwXGpjbGlzdHRhYlx0eDcyMFxsaW43MjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkNjEwNTQ5MzMwfXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0zMjM1ODMwOThcbGlzdHNpbXBsZXtcbGlzdGxldmVsDQpcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGRBTkQgUkVTUE9OU0U6O317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFx1bCBcZmktMjE2MFxsaTIxNjBcamNsaXN0dGFiXHR4MjUyMFxsaW4yMTYwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDg2ODAyNjE3MX0NCntcbGlzdFxsaXN0dGVtcGxhdGVpZC02MDg1NTQzOTRcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA5T0JKRUNUSU9OO317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxjYXBzIFxmaTBcbGkwDQpcamNsaXN0dGFiXHR4MTQ0MFxsaW4wIH17XGxpc3RuYW1lIDt9XGxpc3RpZDkzMDU0NjY1M317XGxpc3RcbGlzdHRlbXBsYXRlaWQxMDUzMzQ5MzIye1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcxN0RvY3VtZW50IFJlcXVlc3QgTk8uIFwnMDAuO317XGxldmVsbnVtYmVyc1wnMTY7fQ0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxzdHJpa2UwXG91dGwwXHNoYWQwXGVtYm8wXGltcHIwXGNhcHNcdjBcdWxcY2YwXG5vc3VwZXJzdWJcYW5pbXRleHQwXHN0cmlrZWQwIFxmaTBcbGkwXGpjbGlzdHRhYlx0eDM5NjBcbGluMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDANCntcbGV2ZWx0ZXh0XCcwZlJlc3BvbnNlIE5vLiBcJzAwLjt9e1xsZXZlbG51bWJlcnNcJzBlO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGkwXHN0cmlrZTBcb3V0bDBcc2hhZDBcZW1ibzBcaW1wcjBcY2Fwc1x2MFx1bFxjZjBcbm9zdXBlcnN1YlxhbmltdGV4dDBcc3RyaWtlZDAgXGZpMFxsaTBcamNsaXN0dGFiXHR4MjUyMFxsaW4wIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMFxsZXZlbGpjbjANClxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDMoXCcwMik7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaTBcc3RyaWtlMFxvdXRsMFxzaGFkMFxlbWJvMFxpbXByMFxzY2FwczBcY2FwczBcdjBcdWxub25lXGNmMFxub3N1cGVyc3ViXGFuaW10ZXh0MFxzdHJpa2VkMCBcZmkxNDQwXGxpMFxqY2xpc3R0YWJcdHgyMTYwXGxpbjAgfQ0Ke1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMyhcJzAzKTt9e1xsZXZlbG51bWJlcnNcJzAyO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGIwXGkwXHN0cmlrZTBcb3V0bDBcc2hhZDBcZW1ibzBcaW1wcjBcc2NhcHMwXGNhcHMwXHYwXHVsbm9uZVxjZjBcbm9zdXBlcnN1YlxhbmltdGV4dDBcc3RyaWtlZDAgXGZpMjE2MFxsaTBcamNsaXN0dGFiXHR4Mjg4MFxsaW4wIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpMFxzdHJpa2UwXG91dGwwXHNoYWQwXGVtYm8wXGltcHIwXHNjYXBzMFxjYXBzMFx2MFx1bG5vbmVcY2YwXG5vc3VwZXJzdWJcYW5pbXRleHQwXHN0cmlrZWQwIFxmaTI4ODBcbGkwXGpjbGlzdHRhYlx0eDM2MDBcbGluMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MA0KXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaTBcc3RyaWtlMFxvdXRsMFxzaGFkMFxlbWJvMFxpbXByMFxzY2FwczBcY2FwczBcdjBcdWxub25lXGNmMFxub3N1cGVyc3ViXGFuaW10ZXh0MFxzdHJpa2VkMCBcZmkzNjAwXGxpMFxqY2xpc3R0YWJcdHg0MzIwXGxpbjAgfXtcbGlzdGxldmVsDQpcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcYjBcaTBcc3RyaWtlMFxvdXRsMFxzaGFkMFxlbWJvMFxpbXByMFxzY2FwczBcY2FwczBcdjBcdWxub25lXGNmMFxub3N1cGVyc3ViXGFuaW10ZXh0MFxzdHJpa2VkMCBcZmk0MzIwXGxpMFxqY2xpc3R0YWJcdHg0NjgwXGxpbjAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwMlwnMDcpO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGkwXHN0cmlrZTBcb3V0bDBcc2hhZDBcZW1ibzBcaW1wcjBcc2NhcHMwXGNhcHMwXHYwXHVsbm9uZVxjZjBcbm9zdXBlcnN1YlxhbmltdGV4dDBcc3RyaWtlZDAgXGZpNTA0MFxsaTBcamNsaXN0dGFiXHR4NTc2MFxsaW4wIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJcJzA4KTt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpMFxzdHJpa2UwXG91dGwwXHNoYWQwXGVtYm8wXGltcHIwXHNjYXBzMFxjYXBzMFx2MFx1bG5vbmVcY2YwXG5vc3VwZXJzdWJcYW5pbXRleHQwXHN0cmlrZWQwIFxmaTU3NjBcbGkwXGpjbGlzdHRhYlx0eDY0ODBcbGluMCB9e1xsaXN0bmFtZSANClJlcXVlc3Q7fVxsaXN0aWQxMDYwNTkxNzUwfXtcbGlzdFxsaXN0dGVtcGxhdGVpZC04NjI4MTQ1NzB7XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzE0SW50ZXJyb2dhdG9yeSBOTy4gXCcwMC47fXtcbGV2ZWxudW1iZXJzXCcxMzt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxiXGkwXHN0cmlrZTBcb3V0bDBcc2hhZDBcZW1ibzBcaW1wcjBcY2Fwc1x2MFx1bFxjZjBcbm9zdXBlcnN1YlxhbmltdGV4dDBcc3RyaWtlZDAgXGZpMFxsaTBcamNsaXN0dGFiXHR4MzYwMFxsaW4wIH17XGxpc3RsZXZlbFxsZXZlbG5mYzI1NVxsZXZlbG5mY24yNTVcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzBmUmVzcG9uc2UgTm8uIFwnMDAuO317XGxldmVsbnVtYmVyc1wnMGU7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaTBcc3RyaWtlMFxvdXRsMFxzaGFkMFxlbWJvMFxpbXByMFxjYXBzXHYwXHVsXGNmMFxub3N1cGVyc3ViXGFuaW10ZXh0MFxzdHJpa2VkMCBcZmkwXGxpMFxqY2xpc3R0YWJcdHgyNTIwXGxpbjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzANClxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMyhcJzAyKTt9e1xsZXZlbG51bWJlcnNcJzAyO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpMFxzdHJpa2UwXG91dGwwXHNoYWQwXGVtYm8wXGltcHIwXHNjYXBzMFxjYXBzMFx2MFx1bG5vbmVcY2YwXG5vc3VwZXJzdWJcYW5pbXRleHQwXHN0cmlrZWQwIFxmaTE0NDBcbGkwXGpjbGlzdHRhYlx0eDIxNjBcbGluMCB9e1xsaXN0bGV2ZWwNClxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAzKFwnMDMpO317XGxldmVsbnVtYmVyc1wnMDI7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcYjBcaTBcc3RyaWtlMFxvdXRsMFxzaGFkMFxlbWJvMFxpbXByMFxzY2FwczBcY2FwczBcdjBcdWxub25lXGNmMFxub3N1cGVyc3ViXGFuaW10ZXh0MFxzdHJpa2VkMCBcZmkyMTYwXGxpMFxqY2xpc3R0YWJcdHgyODgwXGxpbjAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGkwXHN0cmlrZTBcb3V0bDBcc2hhZDBcZW1ibzBcaW1wcjBcc2NhcHMwXGNhcHMwXHYwXHVsbm9uZVxjZjBcbm9zdXBlcnN1YlxhbmltdGV4dDBcc3RyaWtlZDAgXGZpMjg4MFxsaTBcamNsaXN0dGFiXHR4MzYwMFxsaW4wIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpMFxzdHJpa2UwXG91dGwwXHNoYWQwXGVtYm8wXGltcHIwXHNjYXBzMFxjYXBzMFx2MFx1bG5vbmVcY2YwXG5vc3VwZXJzdWJcYW5pbXRleHQwXHN0cmlrZWQwIFxmaTM2MDBcbGkwXGpjbGlzdHRhYlx0eDQzMjBcbGluMCB9e1xsaXN0bGV2ZWwNClxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwNi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxiMFxpMFxzdHJpa2UwXG91dGwwXHNoYWQwXGVtYm8wXGltcHIwXHNjYXBzMFxjYXBzMFx2MFx1bG5vbmVcY2YwXG5vc3VwZXJzdWJcYW5pbXRleHQwXHN0cmlrZWQwIFxmaTQzMjBcbGkwXGpjbGlzdHRhYlx0eDQ2ODBcbGluMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzAyXCcwNyk7fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaTBcc3RyaWtlMFxvdXRsMFxzaGFkMFxlbWJvMFxpbXByMFxzY2FwczBcY2FwczBcdjBcdWxub25lXGNmMFxub3N1cGVyc3ViXGFuaW10ZXh0MFxzdHJpa2VkMCBcZmk1MDQwXGxpMFxqY2xpc3R0YWJcdHg1NzYwXGxpbjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzANClxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDgpO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGkwXHN0cmlrZTBcb3V0bDBcc2hhZDBcZW1ibzBcaW1wcjBcc2NhcHMwXGNhcHMwXHYwXHVsbm9uZVxjZjBcbm9zdXBlcnN1YlxhbmltdGV4dDBcc3RyaWtlZDAgXGZpNTc2MFxsaTBcamNsaXN0dGFiXHR4NjQ4MFxsaW4wIH17XGxpc3RuYW1lIA0KSW50ZXJyb2dhdG9yeTt9XGxpc3RpZDEwODQxODc2NDB9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkMTIzMzQ0MjE1OFxsaXN0c2ltcGxle1xsaXN0bGV2ZWxcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0M1xsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGFPQkpFQ1RJT046O317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxiXGkwXHVsIFxmaS0yMTYwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMTEzNTg3NDM5NH17XGxpc3RcbGlzdHRlbXBsYXRlaWQ4MzQ5NTc4NzBcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClwnMGJBbmQgQW5zd2VyOjt9e1xsZXZlbG51bWJlcnM7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaTBcY2Fwc1x1bCBcZmktMjUyMFxsaTI1MjBcamNsaXN0dGFiXHR4MjUyMFxsaW4yNTIwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDE0NzI5Mzg3NTZ9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTE5MjQ4NTg0NDhcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjANClxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDlSRVNQT05TRTo7fXtcbGV2ZWxudW1iZXJzO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGkwXGNhcHNcdWx3IFxmaS0xODAwXGxpMjUyMFxqY2xpc3R0YWJcdHgyNTIwXGxpbjI1MjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMTUzMTcyNDMyM317XGxpc3RcbGlzdHRlbXBsYXRlaWQtODQ5OTQ3MDk4XGxpc3RzaW1wbGUNCntcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA5T0JKRUNUSU9OO317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMCBcZmkwXGxpMFxqY2xpc3R0YWJcdHgxODAwXGxpbjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMTY5NTQ5OTA2OX0NCntcbGlzdFxsaXN0dGVtcGxhdGVpZDE5Nzk1ODc2NTZcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzBhT0JKRUNUSU9OOjt9e1xsZXZlbG51bWJlcnM7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaTBcY2Fwc1x1bCBcZmktMjE2MFxsaTIxNjANClxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMTczNTA4NDk5OX17XGxpc3RcbGlzdHRlbXBsYXRlaWQtNzY2NTU2NzJcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAzXCcwMEE6O317XGxldmVsbnVtYmVyc1wnMDE7fQ0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxjYXBzIFxmaS03MjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxNzM2OTMyNTc1fXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0yMzgzOTE5MzhcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTANClxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJROjt9e1xsZXZlbG51bWJlcnM7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaTAgXGZpLTcyMFxsaTcyMFxqY2xpc3R0YWJcdHg3MjBcbGluNzIwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDE4NjEwNDc5ODZ9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkOTAzNjUyMjIwXGxpc3RzaW1wbGV7XGxpc3RsZXZlbFxsZXZlbG5mYzI1NVxsZXZlbG5mY24yNTVcbGV2ZWxqYzBcbGV2ZWxqY24wDQpcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzBkXCcwMFJFU1BPTlNFIEFORDt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGkwXGNhcHMgXGZpMFxsaTBcamNsaXN0dGFiXHR4MjE2MFxsaW4wIH17XGxpc3RuYW1lIDt9XGxpc3RpZDE4NzA5OTQ4MTd9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkMTY2MTY1OTU1OFxsaXN0c2ltcGxlDQp7XGxpc3RsZXZlbFxsZXZlbG5mYzI1NVxsZXZlbG5mY24yNTVcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwOVJFU1BPTlNFOjt9e1xsZXZlbG51bWJlcnM7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaTBcY2Fwc1x1bCBcZmktMjE2MFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RuYW1lIA0KO31cbGlzdGlkMTkwODk1ODcxMH17XGxpc3RcbGlzdHRlbXBsYXRlaWQxMDY3NzEzNDMwXGxpc3RzaW1wbGV7XGxpc3RsZXZlbFxsZXZlbG5mYzI1NVxsZXZlbG5mY24yNTVcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwYU9CSkVDVElPTjo7fXtcbGV2ZWxudW1iZXJzO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGkwXGNhcHNcdWwgDQpcZmktMjE2MFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDE5MTY0MzQ4OTJ9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTUwNzg4NTgzMFxsaXN0c2ltcGxle1xsaXN0bGV2ZWxcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwYVwnMDBPQkpFQ1RJT047fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxjYXBzIFxmaTBcbGkwXGpjbGlzdHRhYlx0eDE4MDBcbGluMCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxOTc0MDkxNDQ4fXtcbGlzdFxsaXN0dGVtcGxhdGVpZDEzOTM4Njc3OTJcbGlzdHNpbXBsZXtcbGlzdGxldmVsXGxldmVsbmZjMjU1XGxldmVsbmZjbjI1NVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDdhbnN3ZXI6O317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxjYXBzXHVsIFxmaS0yMTYwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMjAyNDY3MzIxOH19e1wqXGxpc3RvdmVycmlkZXRhYmxle1xsaXN0b3ZlcnJpZGVcbGlzdGlkMzEwNDQ0NzE3DQpcbGlzdG92ZXJyaWRlY291bnQwXGxzMX17XGxpc3RvdmVycmlkZVxsaXN0aWQ5MzA1NDY2NTNcbGlzdG92ZXJyaWRlY291bnQwXGxzMn17XGxpc3RvdmVycmlkZVxsaXN0aWQxNDcyOTM4NzU2XGxpc3RvdmVycmlkZWNvdW50MFxsczN9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTE2Nzk2NDA1XGxpc3RvdmVycmlkZWNvdW50MFxsczR9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkNjcyNzA5NzVcbGlzdG92ZXJyaWRlY291bnQwXGxzNX0NCntcbGlzdG92ZXJyaWRlXGxpc3RpZDE3MzY5MzI1NzVcbGlzdG92ZXJyaWRlY291bnQwXGxzNn17XGxpc3RvdmVycmlkZVxsaXN0aWQxNTMxNzI0MzIzXGxpc3RvdmVycmlkZWNvdW50MFxsczd9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkNTQ4MzQ3ODM0XGxpc3RvdmVycmlkZWNvdW50MFxsczh9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTczNTA4NDk5OVxsaXN0b3ZlcnJpZGVjb3VudDBcbHM5fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDIwMjQ2NzMyMTgNClxsaXN0b3ZlcnJpZGVjb3VudDBcbHMxMH17XGxpc3RvdmVycmlkZVxsaXN0aWQxMDYwNTkxNzUwXGxpc3RvdmVycmlkZWNvdW50MFxsczExfXtcbGlzdG92ZXJyaWRlXGxpc3RpZDEwODQxODc2NDBcbGlzdG92ZXJyaWRlY291bnQwXGxzMTJ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTk3NDA5MTQ0OFxsaXN0b3ZlcnJpZGVjb3VudDBcbHMxM317XGxpc3RvdmVycmlkZVxsaXN0aWQxNjk1NDk5MDY5XGxpc3RvdmVycmlkZWNvdW50MFxsczE0fQ0Ke1xsaXN0b3ZlcnJpZGVcbGlzdGlkODY4MDI2MTcxXGxpc3RvdmVycmlkZWNvdW50MFxsczE1fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDE5MTY0MzQ4OTJcbGlzdG92ZXJyaWRlY291bnQwXGxzMTZ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTg2MTA0Nzk4NlxsaXN0b3ZlcnJpZGVjb3VudDBcbHMxN317XGxpc3RvdmVycmlkZVxsaXN0aWQ2MTA1NDkzMzBcbGlzdG92ZXJyaWRlY291bnQwXGxzMTh9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTg3MDk5NDgxNw0KXGxpc3RvdmVycmlkZWNvdW50MFxsczE5fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDExMzU4NzQzOTRcbGlzdG92ZXJyaWRlY291bnQwXGxzMjB9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTkwODk1ODcxMFxsaXN0b3ZlcnJpZGVjb3VudDBcbHMyMX19e1wqXGdlbmVyYXRvciBNaWNyb3NvZnQgV29yZCAxMS4wLjAwMDA7fXtcaW5mb3tcdGl0bGUgIH17XGF1dGhvciAgfXtcb3BlcmF0b3IgIH17XGNyZWF0aW1ceXIyMDExXG1vNlxkeTNcaHIxNVxtaW4yNn0NCntccmV2dGltXHlyMjAxMVxtbzZcZHkzXGhyMTVcbWluMjZ9e1x2ZXJzaW9uMn17XGVkbWluczF9e1xub2ZwYWdlczJ9e1xub2Z3b3JkczU5OH17XG5vZmNoYXJzMzQyNX17XCpcY29tcGFueSBEYXkgUGl0bmV5IExMUH17XG5vZmNoYXJzd3MzOTYzfXtcdmVybjI0NjE1fXtcKlxwYXNzd29yZCAwMDAwMDAwMH19e1wqXHhtbG5zdGJsIHtceG1sbnMxIGh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAwMy93b3JkbWx9DQp7XHhtbG5zMiB1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpzbWFydHRhZ3N9fVxwYXBlcncxMjI0MFxwYXBlcmgxNTg0MFxtYXJnbDE4MDBcbWFyZ3IxODAwXG1hcmd0MTQ0MFxtYXJnYjE0NDBcZ3V0dGVyMFxsdHJzZWN0IA0KXHdpZG93Y3RybFxmdG5ialxhZW5kZG9jXGRvbm90ZW1iZWRzeXNmb250MVxkb25vdGVtYmVkbGluZ2RhdGEwXGdyZmRvY2V2ZW50czBcdmFsaWRhdGV4bWwxXHNob3dwbGFjZWhvbGR0ZXh0MFxpZ25vcmVtaXhlZGNvbnRlbnQwXHNhdmVpbnZhbGlkeG1sMFxzaG93eG1sZXJyb3JzMVxwcmNvbGJsXHNwcnN0c3Bcbm94bGF0dG95ZW5cZXhwc2hydG5cbm91bHRybHNwYw0KXGRudGJsbnNiZGJcbm9zcGFjZWZvcnVsXGZvcm1zaGFkZVxob3J6ZG9jXGRnaHNwYWNlMTgwXGRndnNwYWNlMTgwXGRnaG9yaWdpbjE3MDFcZGd2b3JpZ2luMTk4NFxkZ2hzaG93MFxkZ3ZzaG93MFxqZXhwYW5kXHZpZXdraW5kMVx2aWV3c2NhbGUxMDBccGdicmRyaGVhZFxwZ2JyZHJmb290XG5vbG5odGFkanRibFxub2prZXJucHVuY3QgXGZldDB7XCpcd2dyZmZtdGZpbHRlciAwMTNmfVxpbGZvbWFjYXRjbG51cDANCntcKlxkb2N2YXIgezg1VHJhaWxlckNNfXswfX17XCpcZG9jdmFyIHs4NVRyYWlsZXJEYXRlfXswfX17XCpcZG9jdmFyIHs4NVRyYWlsZXJEYXRlRmllbGR9ezF9fXtcKlxkb2N2YXIgezg1VHJhaWxlckRyYWZ0fXswfX17XCpcZG9jdmFyIHs4NVRyYWlsZXJUaW1lfXswfX17XCpcZG9jdmFyIHs4NVRyYWlsZXJUeXBlfXsxMDJ9fXtcKlxkb2N2YXIge01QRG9jSUR9ezQyMzQ0NDUzXzEuRE9DfX17XCpcZG9jdmFyIHtOZXdEb2NTdGFtcFR5cGV9ezd9fQ0Ke1wqXGZ0bnNlcCBcbHRycGFyIFxwYXJkXHBsYWluIFxsdHJwYXJccWogXGZpLTM2MFxsaTM2MFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcYWYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSANClxhZjAgXGx0cmNoXGZjczAgXGNoZnRuc2VwIA0KXHBhciB9fXtcKlxmdG5zZXBjIFxsdHJwYXIgXHBhcmRccGxhaW4gXGx0cnBhclxxaiBcZmktMzYwXGxpMzYwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMzYwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxhZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY2hmdG5zZXBjIA0KXHBhciB9fXtcKlxhZnRuc2VwIFxsdHJwYXIgXHBhcmRccGxhaW4gXGx0cnBhclxxaiBcZmktMzYwXGxpMzYwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMzYwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxhZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY2hmdG5zZXAgDQpccGFyIH19e1wqXGFmdG5zZXBjIFxsdHJwYXIgXHBhcmRccGxhaW4gXGx0cnBhclxxaiBcZmktMzYwXGxpMzYwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMzYwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxhZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY2hmdG5zZXBjIA0KXHBhciB9fVxsdHJwYXIgXHNlY3RkIFxsdHJzZWN0XHBzejFcbGluZXgwXGVuZG5oZXJlXHRpdGxlcGdcc2VjdGRlZmF1bHRjbFxzZnRuYmoge1wqXHBuc2VjbHZsMVxwbnVjcm1ccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRhIC59fXtcKlxwbnNlY2x2bDJccG51Y2x0clxwbnN0YXJ0MVxwbmluZGVudDcyMFxwbmhhbmcge1xwbnR4dGEgLn19e1wqXHBuc2VjbHZsM1xwbmRlY1xwbnN0YXJ0MVxwbmluZGVudDcyMFxwbmhhbmcgDQp7XHBudHh0YSAufX17XCpccG5zZWNsdmw0XHBubGNsdHJccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRhICl9fXtcKlxwbnNlY2x2bDVccG5kZWNccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRiICh9e1xwbnR4dGEgKX19e1wqXHBuc2VjbHZsNlxwbmxjbHRyXHBuc3RhcnQxXHBuaW5kZW50NzIwXHBuaGFuZyB7XHBudHh0YiAofXtccG50eHRhICl9fXtcKlxwbnNlY2x2bDcNClxwbmxjcm1ccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRiICh9e1xwbnR4dGEgKX19e1wqXHBuc2VjbHZsOFxwbmxjbHRyXHBuc3RhcnQxXHBuaW5kZW50NzIwXHBuaGFuZyB7XHBudHh0YiAofXtccG50eHRhICl9fXtcKlxwbnNlY2x2bDlccG5sY3JtXHBuc3RhcnQxXHBuaW5kZW50NzIwXHBuaGFuZyB7XHBudHh0YiAofXtccG50eHRhICl9fVxwYXJkXHBsYWluIFxsdHJwYXINClxxYyBcZmktMzYwXGxpMzYwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMzYwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxhZjE3M1xoaWNoXGFmMTczXGRiY2hcYWYxNzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjBcYWZzMjggXGx0cmNoXGZjczAgXGJcZjBcZnMyOCANClxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgVHJ1ZUxpZ2h0IENvbW1vZGl0aWVzLCBMTEMNClxwYXIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmMCBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIEZFUkMgRWxlY3RyaWMgVGFyaWZmLCBWb2x1bWUgTm8uIDENClxwYXIgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFqIFxmaS0zNjBcbGkzNjBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4zNjBcaXRhcDAge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwIA0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzNTJccWwgXGZpLTM2MFxsaTM2MFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcYWYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGYwIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgMS5cdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjBcdWwgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBBdmFpbGFiaWxpdHl9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgXGhpY2hcZjAgOiAgVHJ1ZUxpZ2h0IENvbW1vZGl0aWVzLCBMTEMgKFwnOTNcbG9jaFxmMCANClxoaWNoXGYwIFRMQ1wnOTRcbG9jaFxmMCApIG1ha2VzIGVsZWN0cmljIGVuZXJneSwgY2FwYWNpdHksIGFuZCBhbmNpbGxhcnkgc2VydmljZXMgYXZhaWxhYmxlIHVuZGVyIHRoaXMgRkVSQyBlbGVjdHJpYyB0YXJpZmYgdG8gYW55IHB1cmNoYXNlciwgZXhjZXB0IGFzIHByb2hpYml0ZWQgYmVcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIGxvdy4gDQpccGFyIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgMi4gXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwXHVsIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgUmF0ZXN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgDQo6ICBBbGwgc2FsZXMgc2hhbGwgYmUgbWFkZSBhdCByYXRlcyBlc3RhYmxpc2hlZCBieSBhZ3JlZW1lbnQgYmV0d2VlbiB0aGUgcHVyY2hhc2VyIGFuZCBUTEMuIA0KXHBhciBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIDMuIFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmMFx1bCBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIFNlbGxlciBDYXRlZ29yeX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjAgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCANCjogIFRMQyBpcyBhIENhdGVnb3J5IDEgc2VsbGVyLCBhcyBkZWZpbmVkIGluIDE4IENGUiAzNS4zNihhKSwgaW4gYWxsIHJlZ2lvbnMuDQpccGFyIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgNC5cdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjBcdWwgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBDb21wbGlhbmNlIHdpdGggQ29tbWlzc2lvbiBSZWd1bGF0aW9uc317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjAgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCA6ICBUTEMgc2hhXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCANCmxsIGNvbXBseSB3aXRoIHRoZSBwcm92aXNpb25zIG9mIDE4IENGUiBQYXJ0IDM1LCBTdWJwYXJ0IEgsIGFzIGFwcGxpY2FibGUsIGFuZCB3aXRoIGFueSBjb25kaXRpb25zIHRoZSBDb21taXNzaW9uIGltcG9zZXMgaW4gaXRzIG9yZGVycyBjb25jZXJuaW5nIFRMQ1xoaWNoXGYwIFxycXVvdGUgXGxvY2hcZjAgDQpzIG1hcmtldC1iYXNlZCByYXRlIGF1dGhvcml0eSwgaW5jbHVkaW5nIG9yZGVycyBpbiB3aGljaCB0aGUgQ29tbWlzc2lvbiBhdXRob3JpemVzIFRMQyB0byBlbmdhZ2UgaW4gYWZmaVxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgbFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgaWF0ZSBzYWxlcyB1bmRlciB0aGlzIHRhcmlmZiBvciBvdGhlcndpc2UgcmVzdHJpY3RzIG9yIGxpbWl0cyBUTENcaGljaFxmMCBccnF1b3RlIFxsb2NoXGYwIA0KcyBtYXJrZXQtYmFzZWQgcmF0ZSBhdXRob3JpdHkuICBGYWlsdXJlIHRvIGNvbXBseSB3aXRoIHRoZSBhcHBsaWNhYmxlIHByb3Zpc2lvbnMgb2YgMTggQ0ZSIFBhcnQgMzUsIFN1YnBhcnQgSCwgYW5kIHdpdGggYW55IG9yZGVycyBvZiB0aGUgQ29tbWlzc2lvbiBjb25jZXJuaW5nIFRMQ1xoaWNoXGYwIFxycXVvdGUgXGxvY2hcZjAgcyBtYXJrZXQtYmFzZWQgcmF0ZSBhdXRob1xoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgcg0KXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBpdHksIHdpbGwgY29uc3RpdHV0ZSBhIHZpb2xhdGlvbiBvZiB0aGlzIHRhcmlmZi4gDQpccGFyIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgNS4gXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwXHVsIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgTGltaXRhdGlvbnMgYW5kIEV4ZW1wdGlvbnMgUmVnYXJkaW5nIE1hcmtldC1CYXNlZCBSYXRlIEF1dGhvcml0eX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjAgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCANCjogIFRMQyBoYXMgcmVjZWl2ZWQgd2FpdmVyIG9mOiAgU3VicGFydHMgQiBhbmQgQyBvZiBQYXJ0IDM1LCBleGNlcHQgZm9yIHNlY3Rpb25zIDM1LjEyKGEpLCAzNS4xMyhiKSwgMzUuMTUgYW5kIDM1LjE2OyAgUGFydCA0MSwgUGFydCAxMDEsIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgDQphbmQgUGFydCAxNDEsIGV4Y2VwdCBzZWN0aW9ucyAxNDEuMTQgYW5kIDE0MS4xNTsgYW5kIHJlY2VpdmVkIGJsYW5rZXQgYXBwcm92YWwgdW5kZXIgUGFydCAzNC4gKH17XHJ0bGNoXGZjczEgXGFpXGFmMCBcbHRyY2hcZmNzMCBcY3M1NVxpXGYwIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgVHJ1ZUxpZ2h0IENvbW1vZGl0aWVzLCBMTEMsIERvY2tldCBOby4gRVIxMS1bICAgIF0gKFsgIF0sIDIwMTEpfXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGYwIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgKQ0KXHBhciBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIDYuXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwXHVsIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgQW5jaWxsYXJ5IFNlcnZpY2VzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmMCBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIDoNClxwYXIgfVxwYXJkIFxsdHJwYXJcczUyXHFsIFxmaS0zNjBcbGk3MjBccmkwXHNhMjQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW43MjBcaXRhcDAge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgKGEpXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwXHVsIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgUEpNfXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGYwIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgOiAgVExDIG9mZmVycyByZWd1bGF0aW9uIGFuZCBmcmVxdWVuY3kgcmVzcG9uc2Ugc2VydmljZSwgZW5lcmd5IGltXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBcaGljaFxmMCANCmJhbGFuY2Ugc2VydmljZSwgYW5kIG9wZXJhdGluZyByZXNlcnZlIHNlcnZpY2UgKHdoaWNoIGluY2x1ZGVzIHNwaW5uaW5nLCAxMC1taW51dGUsIGFuZCAzMC1taW51dGUgcmVzZXJ2ZXMpIGZvciBzYWxlIGludG8gdGhlIG1hcmtldCBhZG1pbmlzdGVyZWQgYnkgUEpNIEludGVyY29ubmVjdGlvbiwgTC5MLkMuIChcJzkzXGxvY2hcZjAgXGhpY2hcZjAgUEpNXCc5NFxsb2NoXGYwIA0KKSBhbmQsIHdoZXJlIHRoZSBQSk0gT3BlbiBBY2Nlc3MgVHJhbnNtaXNzaW9uIFRhcmlmZiBwZXJtaXRzLCB0aGUgc2VsZi1zXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCB1XGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCANCnBwbHkgb2YgdGhlc2Ugc2VydmljZXMgdG8gcHVyY2hhc2VycyBmb3IgYSBiaWxhdGVyYWwgc2FsZSB0aGF0IGlzIHVzZWQgdG8gc2F0aXNmeSB0aGUgYW5jaWxsYXJ5IHNlcnZpY2VzIHJlcXVpcmVtZW50cyBvZiB0aGUgUEpNIE9mZmljZSBvZiBJbnRlcmNvbm5lY3Rpb24uIA0KXHBhciBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIChiKVx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmMFx1bCB7XCpceG1sb3Blblx4bWxuczJ7XGZhY3RvaWRuYW1lIFN0YXRlfX17XCpceG1sb3Blblx4bWxuczJ7XGZhY3RvaWRuYW1lIHBsYWNlfX1caGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIE5ldyBZb3JrfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmMCB7XCpceG1sY2xvc2V9e1wqXHhtbGNsb3NlfQ0KXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCA6ICBUTEMgb2ZmZXJzIHJlZ3VsYXRpb24gYW5kIGZyZXF1ZW5jeSByZXNwb25zZSBzZXJ2aWNlLCBhbmQgb3BlcmF0aW5nIHJlc2VydmUgc2VydmljZSBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIA0KKHdoaWNoIGluY2x1ZGUgMTAtbWludXRlIG5vbi1zeW5jaHJvbm91cywgMzAtbWludXRlIG9wZXJhdGluZyByZXNlcnZlcywgMTAtbWludXRlIHNwaW5uaW5nIHJlc2VydmVzLCBhbmQgMTAtbWludXRlIG5vbi1zcGlubmluZyByZXNlcnZlcykgZm9yIHNhbGUgdG8gcHVyY2hhc2VycyBpbiB0aGUgbWFya2V0IGFkbWluaXN0ZXJlZCBieSB0aGUgTmV3IFlvcmsgSW5kZXBlbmRlbnQgU3lzdGVtIE9wZXJhdG9yLCBJbmMuIA0KXHBhciBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIChjKVx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmMFx1bCB7XCpceG1sb3Blblx4bWxuczJ7XGZhY3RvaWRuYW1lIHBsYWNlfX1caGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIE5ldyBFbmdsYW5kfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmMCB7XCpceG1sY2xvc2V9XGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCA6IA0KXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCANCiBUTEMgb2ZmZXJzIHJlZ3VsYXRpb24gYW5kIGZyZXF1ZW5jeSByZXNwb25zZSBzZXJ2aWNlIChhdXRvbWF0aWMgZ2VuZXJhdG9yIGNvbnRyb2wpLCBvcGVyYXRpbmcgcmVzZXJ2ZSBzZXJ2aWNlICh3aGljaCBpbmNsdWRlcyAxMC1taW51dGUgc3Bpbm5pbmcgcmVzZXJ2ZSwgMTAtbWludXRlIG5vbi1zcGlubmluZyByZXNlcnZlLCBhbmQgMzAtbWludXRlIG9wZXJhdGluZyByZXNlcnZlIHNlcnZpY2UpIHRvIHB1cmNoYXNlcnMgd2l0aGluIHRoZSBtYQ0KXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCByXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBrZXRzIGFkbWluaXN0ZXJlZCBieSB0aGUgSVNPIE5ldyBFbmdsYW5kIEluYy4gDQpccGFyIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgKGQpXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwXHVsIHtcKlx4bWxvcGVuXHhtbG5zMntcZmFjdG9pZG5hbWUgU3RhdGV9fXtcKlx4bWxvcGVuXHhtbG5zMntcZmFjdG9pZG5hbWUgcGxhY2V9fVxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgQ2FsaWZvcm5pYX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjAge1wqXHhtbGNsb3NlfXtcKlx4bWxjbG9zZX0NClxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgXGhpY2hcZjAgOiAgVExDIG9mZmVycyByZWd1bGF0aW9uIHNlcnZpY2UsIHNwaW5uaW5nIHJlc2VydmUgc2VydmljZSwgYW5kIG5vbi1zcGlubmluZyByZXNlcnZlIHNlcnZpY2UgdG8gdGhlIENhbGlmb3JuaWEgSW5kZXBlbmRlbnQgU3lzdGVtIE9wZXJhdG9yIENvcnBvcmF0aW9uIChcJzkzXGxvY2hcZjAgXGhpY2hcZjAgQ0FJU09cJzk0XGxvY2hcZjAgDQopIGFuZCB0byBvdGhlcnMgdGhhdCBhcmUgc2VsZi1zdXBwbHlcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIGluZyBhbmNpbGxhcnkgc2VydmljZXMgdG8gdGhlIENBSVNPLiANClxwYXIgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCAoZSlcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjBcdWwgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBNaWR3ZXN0IElTT317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjAgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCANCjogIFRMQyBvZmZlcnMgcmVndWxhdGlvbiBzZXJ2aWNlIGFuZCBvcGVyYXRpbmcgcmVzZXJ2ZSBzZXJ2aWNlICh3aGljaCBpbmNsdWRlIDEwLW1pbnV0ZSBzcGlubmluZyByZXNlcnZlIGFuZCAxMC1taW51dGUgc3VwcGxlbWVudGFsIHJlc2VydmUpIGZvciBzYWxlIHRvIHRoZSBNaWR3ZXN0IEluZGVwZW5kZW50IFRyYW5zbWlzc2lvbiBTeXN0ZW0gT3BlcmF0XGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBcaGljaFxmMCBvciwgSW5jLiAoXCc5Mw0KXGxvY2hcZjAgXGhpY2hcZjAgTWlkd2VzdCBJU09cJzk0XGxvY2hcZjAgKSBhbmQgdG8gb3RoZXJzIHRoYXQgYXJlIHNlbGYtc3VwcGx5aW5nIGFuY2lsbGFyeSBzZXJ2aWNlcyB0byBNaWR3ZXN0IElTTy4NClxwYXIgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCAoZilcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjBcdWwgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBUaGlyZC1QYXJ0eSBBbmNpbGxhcnkgU2VydmljZXN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgDQo6ICBUTEMgb2ZmZXJzIFJlZ3VsYXRpb24gU2VydmljZSwgRW5lcmd5IEltYmFsYW5jZSBTZXJ2aWNlLCBTcGlubmluZyBSZXNlcnZlcywgYW5kIFN1cHBsZW1lbnRhbCBSZXNlcnZlcy4gIFNhbGVzIHdpbGwgbm90IGluXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCANCmNsdWRlIHRoZSBmb2xsb3dpbmc6ICgxKSBzYWxlcyB0byBhbiBSVE8gb3IgYW4gSVNPLCBpLmUuLCB3aGVyZSB0aGF0IGVudGl0eSBoYXMgbm8gYWJpbGl0eSB0byBzZWxmLXN1cHBseSBhbmNpbGxhcnkgc2VydmljZXMgYnV0IGluc3RlYWQgZGVwZW5kcyBvbiB0aGlyZCBwYXJ0aWVzOyAoMikgc2FsZXMgdG8gYSB0cmFkaXRpb25hbCwgZnJhbmNoaXNlZCBwdWJsaWMgdXRpbGl0eSBhZmZpbGlhdGVkIHdpdGggdGhlIHRoaXJkLXBhcnR5IHN1cHBsaQ0KXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBlXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCANCnIsIG9yIHNhbGVzIHdoZXJlIHRoZSB1bmRlcmx5aW5nIHRyYW5zbWlzc2lvbiBzZXJ2aWNlIGlzIG9uIHRoZSBzeXN0ZW0gb2YgdGhlIHB1YmxpYyB1dGlsaXR5IGFmZmlsaWF0ZWQgd2l0aCB0aGUgdGhpcmQtcGFydHkgc3VwcGxpZXI7IGFuZCAoMykgc2FsZXMgdG8gYSBwdWJsaWMgdXRpbGl0eSB0aGF0IGlzIHB1cmNoYXNpbmcgYW5jaWxsYXJ5IHNlcnZpY2VzIHRvIHNhdGlzZnkgaXRzIG93biBvcGVuIGFjY2VzcyB0cmFuc21pc3Npb24gdGFyaQ0KXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBmXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCBmIHJlcXVpcmVtZW50cyB0byBvZmZlciBhbmNpbGxhcnkgc2VydmljZXMgdG8gaXRzIG93biBjdXN0b21lcnMuDQpccGFyIH1ccGFyZCBcbHRycGFyXHM1MlxxbCBcZmktMzYwXGxpMzYwXHJpMFxzYTI0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMzYwXGl0YXAwIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmMCBcaGljaFxhZjBcZGJjaFxhZjE3M1xsb2NoXGYwIDcuXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGYwXHVsIFxoaWNoXGFmMFxkYmNoXGFmMTczXGxvY2hcZjAgRWZmZWN0aXZlIERhdGV9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZjAgXGhpY2hcYWYwXGRiY2hcYWYxNzNcbG9jaFxmMCA6ICB0YXJpZmYgaXMgZWZmZWN0aXZlIGFzIG9mIHRoZSBkYXRlIGFjY2VwdGVkIGJ5IChvciBzdWNoIG90aGVyIGRhdGUgc3BlY2lmaWVkIGJ5KSB0aGUgQ29tbWlzc2lvbi4NClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJccWogXGZpLTM2MFxsaTM2MFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGxvY2hcYWYxNzNcaGljaFxhZjE3M1xkYmNoXGFmMTczXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KDQpccGFyIH19</record_binary_data>
      <record_plain_text>TrueLight Commodities, LLC
FERC Electric Tariff, Volume No. 1


1.	Availability:  TrueLight Commodities, LLC ("TLC") makes electric energy, capacity, and ancillary services available under this FERC electric tariff to any purchaser, except as prohibited below. 
2. 	Rates:  All sales shall be made at rates established by agreement between the purchaser and TLC. 
3. 	Seller Category:  TLC is a Category 1 seller, as defined in 18 CFR 35.36(a), in all regions.
4.	Compliance with Commission Regulations:  TLC shall comply with the provisions of 18 CFR Part 35, Subpart H, as applicable, and with any conditions the Commission imposes in its orders concerning TLC's market-based rate authority, including orders in which the Commission authorizes TLC to engage in affiliate sales under this tariff or otherwise restricts or limits TLC's market-based rate authority.  Failure to comply with the applicable provisions of 18 CFR Part 35, Subpart H, and with any orders of the Commission concerning TLC's market-based rate authority, will constitute a violation of this tariff. 
5. 	Limitations and Exemptions Regarding Market-Based Rate Authority:  TLC has received waiver of:  Subparts B and C of Part 35, except for sections 35.12(a), 35.13(b), 35.15 and 35.16;  Part 41, Part 101, and Part 141, except sections 141.14 and 141.15; and received blanket approval under Part 34. (TrueLight Commodities, LLC, Docket No. ER11-[    ] ([  ], 2011))
6.	Ancillary Services:
(a)	PJM:  TLC offers regulation and frequency response service, energy imbalance service, and operating reserve service (which includes spinning, 10-minute, and 30-minute reserves) for sale into the market administered by PJM Interconnection, L.L.C. ("PJM") and, where the PJM Open Access Transmission Tariff permits, the self-supply of these services to purchasers for a bilateral sale that is used to satisfy the ancillary services requirements of the PJM Office of Interconnection. 
(b)	New York:  TLC offers regulation and frequency response service, and operating reserve service (which include 10-minute non-synchronous, 30-minute operating reserves, 10-minute spinning reserves, and 10-minute non-spinning reserves) for sale to purchasers in the market administered by the New York Independent System Operator, Inc. 
(c)	New England:  TLC offers regulation and frequency response service (automatic generator control), operating reserve service (which includes 10-minute spinning reserve, 10-minute non-spinning reserve, and 30-minute operating reserve service) to purchasers within the markets administered by the ISO New England Inc. 
(d)	California:  TLC offers regulation service, spinning reserve service, and non-spinning reserve service to the California Independent System Operator Corporation ("CAISO") and to others that are self-supplying ancillary services to the CAISO. 
(e)	Midwest ISO:  TLC offers regulation service and operating reserve service (which include 10-minute spinning reserve and 10-minute supplemental reserve) for sale to the Midwest Independent Transmission System Operator, Inc. ("Midwest ISO") and to others that are self-supplying ancillary services to Midwest ISO.
(f)	Third-Party Ancillary Services:  TLC offers Regulation Service, Energy Imbalance Service, Spinning Reserves, and Supplemental Reserves.  Sales will not include the following: (1) sales to an RTO or an ISO, i.e., where that entity has no ability to self-supply ancillary services but instead depends on third parties; (2) sales to a traditional, franchised public utility affiliated with the third-party supplier, or sales where the underlying transmission service is on the system of the public utility affiliated with the third-party supplier; and (3) sales to a public utility that is purchasing ancillary services to satisfy its own open access transmission tariff requirements to offer ancillary services to its own customers.
7.	Effective Date:  tariff is effective as of the date accepted by (or such other date specified by) the Commission.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>100</filing_id>
      <filing_title>TrueLight Commodities MBRA Application</filing_title>
      <filing_type>400</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2011-08-02</current_effective_date>
      <ferc_order_date>2011-07-21</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>