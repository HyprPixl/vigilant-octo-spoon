<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C003314</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>1</tariff_id>
    <tariff_title>Market Based Rates</tariff_title>
    <tariff_export_date>2025-09-16T20:38Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>10</record_id>
      <option_code>A</option_code>
      <record_title>Market Based Rates</record_title>
      <record_content_desc>Section1</record_content_desc>
      <record_version_num>3.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>10</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2020-01-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>1.	Availability.  Seller makes electric energy and/or capacity available under this Rate Schedule for wholesale sales to any purchaser for resale. Seller also makes available to any purchaser, the ancillary services listed in this Section 1 below: 
New England:	Seller offers regulation and frequency response service (automatic generator control), operating reserve service (which includes 10-minute spinning reserve, 10-minute non-spinning reserve, and 30-minute operating reserve service) to purchasers within the markets administered by the ISO New England Inc.
New York: Seller offers regulation and frequency response service, and operating reserve service (which include 10-minute non-synchronous, 30-minute operating reserves, 10-minute spinning reserves, and 10-minute non-spinning reserves) for sale to purchasers in the market administered by the New York Independent System Operator, Inc.
PJM: Seller offers regulation and frequency response service, energy imbalance service, and operating reserve service (which includes spinning, 10-minute, and 30-minute reserves) for sale into the market administered by PJM Interconnection, L.L.C. (“PJM”) and, where the PJM Open Access Transmission Tariff permits, the self-supply of these services to purchasers for a bilateral sale that is used to satisfy the ancillary services requirements of the PJM Office of Interconnection.
California: Seller offers regulation service, spinning reserve service, and non-spinning reserve service to the California Independent System Operator Corporation (“CAISO”) and to others that are self-supplying ancillary services to the CAISO.
MISO: Seller offers regulation service and operating reserve service (which include 10-minute spinning reserve and 10-minute supplemental reserve) for sale to the Midwest Independent Transmission System Operator, Inc. (MISO) and to others that are self-supplying ancillary services to MISO.
Third-Party Ancillary Services: Seller offers Regulation Service, Energy Imbalance Service, Spinning Reserves, and Supplemental Reserves. Sales will not include the following: (1) sales to an RTO or an ISO, i.e., where that entity has no ability to self-supply ancillary services but instead depends on third parties; (2) sales to a traditional, franchised public utility affiliated with the third-party supplier, or sales where the underlying transmission service is on the system of the public utility affiliated with the third-party supplier; and (3) sales to a public utility that is purchasing ancillary services to satisfy its own open access transmission tariff requirements to offer ancillary services to its own customers.
2.	Applicability.  This Rate Schedule is applicable to all wholesale sales of electric energy, capacity and/or ancillary services by Seller that are not otherwise expressly subject to another rate schedule of Seller.
3.	Rates.  All sales under this Rate Schedule shall be made at rates established by agreement between the purchaser and Seller. 
4.	Other Terms and Conditions.  All other terms and conditions for any sales under this Rate Schedule shall be established by agreement between the purchaser and Seller. 
5.	Compliance with Commission Regulations.  Seller shall comply with the provisions of 18 C.F.R. Part 35, Subpart H, as applicable, and with any conditions the Commission imposes in its orders concerning Seller’s market-based rate authority, including orders in which the Commission authorizes Seller to engage in affiliate sales under this tariff or otherwise restricts or limits the Seller’s market-based rate authority. Failure to comply with the applicable provisions of 18 C.F.R. Part 35, Subpart H, and with any order of the Commission concerning Seller’s market-based rate authority, will constitute a violation of this tariff.
6.	Limitations and Exemptions Regarding Market-Based Rate Authority.  The Commission granted Seller in Docket No. ER13-215-002 the following waivers and blanket authorizations:  (a) waiver of the Commission’s accounting and reporting requirements contained in 18 C.F.R. Parts 41, 101 and 141, with the exception of 18 C.F.R. §§ 141.14 and 141.15; (b) waiver of the Commission’s regulations regarding the filing of information in Subparts B and C of 18 C.F.R. Part 35, except for 18 C.F.R. §§ 35.12(a), 35.13(b), 35.15, and 35.16; and (c) blanket authorization under Section 204 of the Federal Power Act, 16 U.S.C. 824c, and 18 C.F.R. Part 34 for all future issuances of securities and assumptions of liability.  Seller has no additional limitations on its market-based rate authority.
7.	Seller Category. Seller is a Category 1 Seller in all regions, as defined in 18 C.F.R. § 35.36(a).  
8.	Effective Date.  This Rate Schedule shall be effective upon the date authorized by the Federal Energy Regulatory Commission</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>184</filing_id>
      <filing_title>baseline refiling</filing_title>
      <filing_type>360</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2020-01-01</current_effective_date>
      <ferc_order_date>2020-04-13</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>