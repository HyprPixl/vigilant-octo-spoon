<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C012063</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>3232</tariff_id>
    <tariff_title>Service Agreements Tariff</tariff_title>
    <tariff_export_date>2025-09-16T20:59Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>1</record_id>
      <option_code>A</option_code>
      <record_title>ED3 and PWCC</record_title>
      <record_content_desc>Transmission Service Agmt</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>1000000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2023-11-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>TRANSMISSION SERVICE AGREEMENT
BETWEEN
ELECTRICAL DISTRICT NO. 3
AND
PINNACLE WEST CAPITAL CORPORATION

1. PARTIES:
The Parties to this Transmission Service Agreement ("Agreement") are Electrical District No. 3 of the County of Pinal, State of Arizona ("District"), and Pinnacle West Capital Corporation, ("PWCC"), (collectively, the "Parties" and individually "Party").
2. AGREEMENT:
In consideration of the mutual covenants herein, the Parties agree as follows.
3. DEFINITIONS:
The following terms, when used in this Agreement, shall have the following meanings:
3.1. Ancillary Services:  Those services that are necessary to support the transmission of electric power and energy from resources to loads while maintaining reliable operation of the District's Transmission and Distribution System in accordance with Good Utility Practice.
3.2. APS:  Arizona Public Service Company.
3.3. Billing Period:  The monthly billing cycle agreed upon by the Parties for accounting and paying for transmission service under this Agreement.
3.4. Commission:  The Federal Energy Regulatory Commission, or its regulatory successor.
3.5. Curtailment:  A reduction in firm or non-firm transmission service in response to a transmission capacity shortage as a result of system reliability conditions.
3.6. Direct Assignment Facilities:  Facilities that are constructed by District for the sole use/benefit of PWCC.  Direct Assignment Facilities shall be specified in an Exhibit to this Agreement.
3.7. Effective Date:  October 9, 2001.
3.8. Exhibit(s):  The Exhibit(s) attached hereto and made a part hereof which may be amended from time to time by the Parties' execution of a new Exhibit.   An executed Exhibit shall supersede all previous versions of the same Exhibit upon execution.
3.9. Facilities Study:  An engineering study conducted by District to determine the required modifications to District's Transmission and Distribution System, including the cost and scheduled completion date for such modifications, that will be required to provide the requested Transmission Service.
3.10. Good Utility Practice:  Any of the practices, methods and acts engaged in or approved by a significant portion of the electric utility industry during the relevant time period, or any of the practices, methods and acts which, in the exercise of reasonable judgment in light of the facts known at the time the decision was made, could have been expected to accomplish the desired result at a reasonable cost consistent with good business practices, reliability, safety and expedition.  Good Utility Practice is not intended to be limited to the optimum practice, method, or act to the exclusion of all others, but rather to be acceptable practices, methods, or acts generally accepted in the region.  Good Utility Practice shall include, at a minimum, any legally required practices, methods, or acts.
3.11. Native Load Customers:  The wholesale and retail power customers of District on whose behalf District, by statute, franchise, regulatory requirement, or contract, has undertaken an obligation to construct and operate District's Transmission and Distribution System to meet the reliable electric needs of such customers. 
3.12. Network Upgrades:  Modifications or additions to the Transmission and Distribution System that are integrated with and support District's overall system for the general benefit of all users of such Transmission and Distribution System.
3.13. Point(s) of Delivery:  The point(s) where the District delivers electric power and energy to PWCC under this Agreement, as set forth in Exhibit A.
3.14. Point(s) of Receipt:  The point(s) where PWCC delivers electric power and energy to the District under this agreement, as set forth in Exhibit B.
3.15. PWCC Network Load: The sum of all PWCC electric loads that are connected to the District's Transmission and Distribution System.
3.16. System Impact Study:  An assessment by District of (i) the adequacy of the District's Transmission and Distribution System to accommodate a request for Transmission Service and (ii) whether any additional costs may be incurred in order to provide Transmission Service.
3.17. System Losses:  The percent kilowatt hour loss factor on District's transmission and distribution facilities to be paid for by PWCC as set out in Exhibit  C.  The System Losses shall be reviewed no less than every five years by the District and, if appropriate, adjusted by the District.  The District shall make available to PWCC, upon reasonable request, any study of System Losses on which the District has based a determination to change its System Losses factor.
3.18. Transmission and Distribution System:  Those electrical facilities which are owned and controlled by the District (including those facilities which, prior to the date of termination of the Lease Agreement between Electrical District No. 1 of Pinal County and APS, have been subject to said Lease Agreement) and are used by it to effect the delivery of electric power and energy to its own loads and those loads to which transmission service is to be provided under this Agreement. 
3.19. Transmission Service:  Network Transmission Service provided by the District of electric power and energy delivered by PWCC to the District at the Point(s) of Receipt for delivery to PWCC at the Point(s) of Delivery identified in Exhibit A to this Agreement.
4. TRANSMISSION SERVICE:
4.1. Availability:  In accordance with and subject to the terms of this Agreement, the District will provide network transmission service over its Transmission and Distribution System to PWCC for the delivery of electric power and energy to the Point(s) of Delivery under this Agreement on a basis that is comparable to the District's use of its Transmission and Distribution System to reliably serve its Native Load Customers.
4.2. District Responsibilities:  District will plan, construct, operate and maintain its Transmission and Distribution System in accordance with Good Utility Practice in order to provide PWCC with Transmission Service.  District shall include PWCC's Network Load in its Transmission and Distribution System planning and shall, consistent with Good Utility Practice, construct and place into service sufficient transmission capacity to deliver PWCC's resources to serve its network load on a basis comparable to District's delivery of its own resources to its Native Load Customers. 
4.3. Ancillary Services:  Those services that are necessary to support the transmission of electric power and energy from the Point(s) of Receipt to the Point(s) of Delivery while maintaining reliable operation of the Transmission and Distribution System in accordance with Good Utility Practice.  PWCC shall satisfy its Control Area requirements, including the supply of all necessary Ancillary Services, by arranging for the purchase of Ancillary Services through the District, by self-supply arrangements approved by the Control Area Operator as being in accordance with NERC and WSCC requirements, or by contracting with another entity, consistent with Good Utility Practice, which satisfies NERC and WSCC requirements. 
4.4. General Information Requirements:  In order to enable the District to operate, plan, and construct its Transmission and Distribution System reliably, the District will employ an annual planning process.  In connection with such annual planning process, PWCC shall timely provide the following information to the District: 
4.4.1. By December 1st of each year, PWCC's forecast of the following ten (10) calendar years' (i) monthly coincident peak network load expressed in kW and, (ii) monthly non-coincident peak loads expressed in kW.  Such forecast shall be made using prudent forecasting techniques available and generally accepted in the electric utility industry;
4.4.2. PWCC shall provide the District with timely written notice of material changes in any other information relating to PWCC Network Load or other aspects of its facilities or operations which, in accordance with Good Utility Practice, reasonably could be expected to affect the District's ability to provide reliable service;
4.4.3. For forecasted new Point(s) of Delivery (not including new Points of Delivery consisting of primary meters that aggregate existing PWCC Network Loads) to be established during the 10-year forecast period, an updated description of the PWCC Network Load to be served at each Point of Delivery for any year in which there will be material changes in the size or characteristics of the PWCC Network Load to be served at any such new Point of Delivery that reasonably could be expected to affect the District's ability to provide reliable service. This description should separately identify and provide PWCC's best estimate of the total loads to be served at each such Point of Delivery. The description should include a 10-year forecast of summer and winter load and resource requirements beginning with calendar year 2002;
4.4.4. For forecasted new Point(s) of Delivery consisting of primary meters that aggregate new or existing PWCC Network loads to be established during the 10-year forecast period, PWCC shall provide all information in 4.4.3 and shall also provide additional information on reactive requirements, phase loadings, anticipated switching beyond the primary-metered point(s) of delivery, motor starting currents, and any other pertinent information with respect to material changes to the PWCC Network Load at such Point(s) of Delivery as reasonably could be expected to affect the District's planning for reliable service to the primary metered Point(s) of Delivery in accordance with Good Utility Practice.
4.4.5. The amount and location of any interruptible loads included in the PWCC Network Load. This shall include the summer and winter capacity requirements for each interruptible load (had such load not been interruptible), that portion of the load subject to interruption, the conditions under which an interruption can be implemented and any limitations on the amount and frequency of interruptions.  PWCC should identify the amount of interruptible customer load (if any) included in the 10-year load forecast provided in response to 4.4.1, above;
4.4.6. Operating characteristics of generating or contractual resources used to serve PWCC Network Loads to the extent that those operating characteristics have a bearing on the District's ability to provide Transmission Service under this Agreement; and
4.4.7. A description of the electrical facilities owned or controlled by PWCC or any of its affiliates which are to be used to deliver electrical power and energy from the District's Transmission and Distribution System to PWCC Network Loads, including the following:
* To the extent determined relevant in accordance with Good Utility Practice, load flow and stability data (in a format mutually agreed by the Parties), such as real and reactive parts of the load, lines, transformers, reactive devices and load type, including normal and emergency ratings of all transmission and distribution equipment; 
* Operating restrictions needed for reliability (if any);
* Operating guides employed by system operators; 
* Location of Network Resources identified in Section 4.4.6 above;  and
* Three-year projection of distribution system expansions or upgrades and related project sketches. 
4.5. Information Concerning New or Changed PWCC Network Loads for Transmission Service:  PWCC shall provide the District with as much advance notice as reasonably practicable of material changes in forecast PWCC Network Load using the District's Transmission and Distribution System. Within fifteen (15) days of receipt, District must acknowledge the notification and provide the District's determination whether a System Impact Study is necessary to accommodate any material change in requested service.  The District shall treat any requested change in  a non-discriminatory manner.
4.6. Changes in Point(s) of Delivery or Interconnection:  To the extent that PWCC desires to add a new Point of Delivery or interconnection point between the District's Transmission and Distribution System and a PWCC Network Load, PWCC shall provide the District with as much advance notice as reasonably practicable. The District will use due diligence to install any new facilities required to interconnect a new Point of Delivery designated by PWCC.  The District shall acknowledge the request for a new Point of Delivery within fifteen (15) days and provide the District's determination whether a system impact study is necessary to accommodate the new Point of Delivery.  A decision by PWCC to cancel or delay a requested change in Point of Delivery shall not relieve PWCC of its obligation to pay the costs of transmission facilities constructed by the District and properly charged directly to PWCC.  
5. AVAILABILITY OF TRANSMISSION CAPABILITY AND SYSTEM PLANNING PROCESSES:
5.1. General:  After receiving (i) a notification of a material change in PWCC Network Loads, or (ii) a request for changes to existing and/or for additional delivery points, the District shall determine on a non-discriminatory basis whether the proposed change was included in the District's annual planning process, and whether a System Impact Study is needed. A description of the District's methodology for determining whether the existing facilities making up its Transmission and Distribution System have sufficient available transfer capability to accommodate a service request is set forth in Attachment A.  A description of the District's methodology for completing a System Impact Study is provided in Attachment B to this Agreement.  If the District determines that a System Impact Study is necessary to evaluate whether it can accommodate the requested service, it shall so inform PWCC, as soon as practicable, but in no event later than fifteen (15) days from the date of notification or change.  In such cases, the District shall within thirty (30) days of receipt of the request, tender a System Impact Study Agreement pursuant to which PWCC shall agree to reimburse the District for performing the required System Impact Study.  If PWCC does not execute and return the System Impact Study Agreement within fifteen days of its delivery to PWCC, its request shall be deemed withdrawn.
5.1.1. The System Impact Study Agreement will clearly specify the District's estimate of the actual cost, and time for completion of the System Impact Study. The charge shall not exceed the actual cost of the study. In performing the System Impact Study, the District shall rely, to the extent reasonably practicable, on existing planning studies of its Transmission and Distribution System. PWCC will not be assessed a charge for such existing studies; however, PWCC will be responsible for charges associated with any modifications to existing planning studies that are reasonably necessary to evaluate the impact of PWCC's request for service on the District's Transmission and Distribution System.
5.1.2. For System Impact Studies that the District conducts on its own behalf to determine if it must construct new transmission or distribution facilities or upgrades necessary for material changes in forecast District network loads, District shall record the cost of the System Impact Studies and Facilities Studies in a separate operating expense account.  District shall include in a separate operating revenue account or subaccount the revenues received for System Impact Studies or Facilities Studies performed when such amounts are separately stated and identified in the District's billing to others, including PWCC.
5.1.3. Upon receipt of an executed System Impact Study Agreement, the District will use due diligence to complete the required System Impact Study within a sixty (60) day period. The System Impact Study shall identify any system constraints and additional direct assignment facilities or upgrades to the District's Transmission and Distribution System required to provide the requested service. In the event that the District is unable to complete the required System Impact Study within such time period, it shall so notify PWCC and provide an estimated completion date, along with an explanation of the reasons why additional time is required to complete the required studies. A copy of the completed System Impact Study and related work papers shall be provided to PWCC. The District will use the same due diligence in completing the System Impact Study for PWCC as it uses when completing studies for itself. The District shall notify PWCC immediately upon completion of the System Impact Study if the District's Transmission and Distribution System will be adequate to accommodate all or part of a request for service or that no costs are likely to be incurred for new transmission facilities or upgrades, and that the requested service will be provided.
5.1.4. If a System Impact Study indicates that additions or upgrades to the Transmission System are needed to accommodate PWCC's service request, then the District, within thirty (30) days of the completion of the System Impact Study, shall tender to PWCC a Facilities Study Agreement pursuant to which the PWCC shall agree to reimburse the District for performing the required Facilities Study.  If PWCC elects not to execute the Facilities Study Agreement within fifteen days of its delivery to PWCC, its request shall be deemed withdrawn. Upon receipt of an executed Facilities Study Agreement, the District will use due diligence to complete the required Facilities Study within a sixty (60) day period. If the District is unable to complete the Facilities Study in the allotted time period, the District shall notify PWCC and provide an estimate of the time needed to reach a final determination, along with an explanation of the reasons that additional time is required to complete the study. When completed, the Facilities Study will include a good faith estimate of (i) the cost of Direct Assignment Facilities to be charged to PWCC, (ii) PWCC's appropriate share of the cost of any required Network Upgrades, and (iii) the time required to complete such construction and initiate the requested service. The Parties shall have thirty (30) days to execute an amendment to this Agreement that memorializes the Parties' agreement with respect to the District's construction of, and appropriately compensatory recovery of the costs of, the required facilities and the provision of transmission credits for any network upgrades. In the event the Parties are unable to reach and execute an agreement within thirty (30) days, District may file an unexecuted amendment to this Agreement with FERC. 
5.2. Operating and Planning Cooperation:  The Parties shall cooperate to (i) operate and maintain their respective equipment necessary for integrating PWCC Network Loads within the District's Transmission and Distribution System, (ii) transfer data between the District and PWCC, (iii) use software programs required for data links and constraint dispatching, (iv) exchange data on forecasted loads and resources necessary for long-term planning, and (v) address any other technical and operational considerations required for implementation of this Agreement. 
5.2.1. A Network Operating Committee shall be established to coordinate operating criteria and the exchange of information for the Parties' respective responsibilities under this Agreement and to review network loads on an annual basis in order to ensure the ongoing reliability of the District's Transmission and Distribution System in accordance with the District's operating policies, load flow data, procedures, and guidelines for network interconnection and operation.  PWCC and the District shall each be entitled to have at least one representative on the Committee. The Committee shall meet from time to time as need requires, but no less than once each calendar year.  The Committee will meet informally on an as-needed basis in order to exchange information and coordinate concerning the operation of the District's Transmission and Distribution System in accordance with the District's rules and regulations.
5.2.2. All decisions and agreements, if any, made by the Network Operating Committee shall be evidenced in writing and shall be in accordance with this Agreement.  The Network Operating Committee shall have no power to amend or alter the provisions of this Agreement.
6. TERM AND TERMINATION:
This Agreement shall continue in effect from the Effective Date until terminated by the occurrence of one of the following events:
6.1. Termination by Agreement:  The Parties may agree to terminate this Agreement, in which case termination shall be effective as of the date agreed by the Parties.
6.2. Termination by PWCC:  PWCC may terminate this Agreement upon ninety days' written notice to the District; provided, however, that termination of this Agreement upon such notice shall not in any way relieve PWCC of its obligation to pay the costs of transmission facilities constructed by the District and directly charged to PWCC as reflected in this Agreement.
6.3. Termination by the District:  The District may apply to FERC to terminate this Agreement in accordance with the procedures established by Section 211(d) of the Federal Power Act (16 U.S.C.  824j(d)).  The Parties will bear their respective obligations as directed by FERC in any order permitting the termination of such service.
7. RATES AND CHARGES:
7.1. Base Transmission Charge:  PWCC shall pay the District monthly for Transmission Service provided under this Agreement at the rate set forth in Exhibit D times the sum of energy delivered to PWCC at the Point(s) of Delivery. Except as provided in Section 7.2 of this Agreement, the rate set forth in Exhibit D may be changed by application to FERC with a proposed effective date after the date of the application.
7.2. Limits on Base Transmission Charge:  The base transmission charge stated in Exhibit D shall not exceed 15 mills ($0.0015) per kilowatt hour (kWh) through December 31, 2003.  PWCC shall not contest the base transmission charge in any forum for any period from the Effective Date through December 31, 2003, so long as the total charge for transmission and ancillary services during this period does not exceed 15 mills ($0.0015) per kWh and the charge for transmission and ancillary services is the same charge as imposed on the District's native load customers.  The base transmission charge established by the District from time-to-time in Exhibit D shall be determined on comparable basis for all users of the District's Transmission and Distribution System, specifically including the District's own loads.
7.3. Information to be Provided PWCC: Reasonably prior to the earlier of the submission of a proposed rate change under this Agreement to FERC and the proposed effective date of any such change, the District will provide PWCC with a copy of any such rate filing with FERC, which filing shall include a cost of service analysis of the basis on which the District proposes to change its rates.  Upon reasonable request by PWCC, the District will make available for PWCC's inspection and copying at a mutually agreeable location and time data sources and assumptions relied on by the District in developing its base transmission charge.  
7.4. Ancillary Services Charges:  To the extent that the District is requested by PWCC, or otherwise required, to supply Ancillary Services for Transmission Service provided under this Agreement, the District shall obtain and supply such services at its direct, out-of-pocket cost, provided, however, that no such charges shall be imposed on PWCC until after December 31, 2003.  
7.5. Direct Assignment and Other Charges:  To the extent that PWCC becomes responsible for direct assignment charges or other charges resulting from the District's provision of Transmission Service in accordance with this Agreement, such charges shall be determined and set forth in separate supplements to this Agreement.
8. DISPUTE RESOLUTION:
8.1. Applicability:  Disputes as to the costs, prices, charges, terms and conditions of transmission service under this Agreement shall be resolved in accordance with this Section 8.
8.2. The Parties shall designate representatives with authority to negotiate a binding resolution of any matter in dispute under this Agreement.  Such representatives (the District Manager in the case of the District; an officer of PWCC in the case of PWCC) shall meet and confer in good faith in an effort to resolve the dispute for a period of thirty calendar days (or longer by mutual agreement). In the event the Parties' designated representatives are unable to so resolve the non-rate dispute, either party may refer the dispute to FERC in accordance with the applicable provisions of the Federal Power Act.

9. FORCE MAJEURE:
9.1. "Force Majeure" shall mean:  any act of God, labor disturbance,  strike, lockout or other industrial disturbance, act of the public enemy, war, blockade, insurrection, riot, epidemic, landslide, earthquake, fire, storm, lightning, flood, explosion, pestilence, civil disturbance, failure of or threat of failure of facility, breakage or accident to machinery or equipment, any Curtailment, order, regulation or restriction imposed by governmental, military or lawfully established civilian authority (other than the Board of the District acting with respect to a matter subject to this Agreement) or any other cause beyond a Party's control and which by the exercise of due diligence said Party is unable to avoid or overcome. 
9.2. In the event either Party, by reason of a Force Majeure event, is rendered unable, wholly or in part, to perform its obligations under this Agreement, then upon said Party giving notice of such Force Majeure event in writing to the other Party promptly after learning thereof, such Party shall not be considered in default as to any obligation under this Agreement for so long as the Party is prevented from fulfilling the obligation(s) due to a Force Majeure event.  Such excuse from an obligation(s) of a Party hereunder shall be for no longer than the period under which the Party is subject to the event of Force Majeure.  A Party whose performance is hindered or prevented by a Force Majeure event shall make all reasonable efforts to perform its obligations under this Agreement, as well as to remedy that which impairs such performance. However, nothing contained herein shall be so construed as to require a Party to settle any strike or labor dispute in which it may be involved.   Failure of a Party to perform an obligation under this Agreement while it is disabled from performance as the result of a Force Majeure event shall not give rise to a claim for damages.
10. INDEMNIFICATION:
	Each Party (the "Indemnifying Party") shall at all times indemnify, defend, and save the other (the "Indemnified Party") harmless from any and all damages, losses, claims, including claims and actions relating to injury to or death of any person or damage to property, demands, suits, recoveries, costs and expenses, court costs, attorney fees, and all other obligations by or to third parties, arising out of or resulting from the Indemnified Party's performance of its obligations under this Agreement, on or after the effective date hereof, on behalf of the Indemnifying Party, except in cases of negligence or intentional wrongdoing by the Indemnified Party.
11. CURTAILMENT:
11.1. Should system conditions during an emergency or other unforeseen condition threaten to impair or degrade the reliability of the District's Transmission and Distribution System, District may be required to interrupt or curtail firm load.  In such event, the District shall curtail the transaction(s) that effectively relieve the constraint, provided that any Curtailment imposed by the District will be imposed on a non-discriminatory basis, and in accordance with Good Utility Practice.  If PWCC fails to take action to reduce the use of electric power and energy by PWCC Network Load at District's request in connection with a Curtailment, the District shall be entitled to limit deliveries of electric power and energy associated therewith, up to and including total interruption of power and energy deliveries, restricted to the period in which conditions necessitating Curtailment continue to exist. The District will notify PWCC in a timely manner of any scheduled Curtailments that will affect PWCC's service under this Agreement.
11.2. If at any time conditions occur on other systems or facilities that are involved in delivering electric power and energy to PWCC Network Load and interconnected to District's Transmission and Distribution System that imminently jeopardize continuity of service on the District's system, as determined by District in its sole reasonable discretion exercised in accordance with Good Utility Practice, District may interrupt or curtail the wheeling service provided hereunder to the extent, and only for so long as, reasonably necessary to remove such jeopardy, provided that in the event other actions would be at least equally effective to preserve the reliability of service without interrupting or curtailing service to PWCC, District will take such actions.
11.3. In the event of a Curtailment affecting service to PWCC Network Load under this Agreement, the District shall use commercially reasonable efforts in accordance with Good Utility Practice to promptly restore service to PWCC Network Load on a non-discriminatory basis.
12. SPECIAL INFORMATION REQUIREMENTS FOR PROPOSED MODIFICATIONS OR ADDITIONS TO CONNECTED FACILITIES; OTHER SYSTEM CONDITIONS:
   
12.1. Sufficiently in advance to permit the District to undertake the evaluations outlined in Section 5 of this Agreement, when PWCC or its affiliate, APS, propose to add new facilities to those connected to the District's Transmission and Distribution System or to modify existing facilities connected to the District's Transmission and Distribution for the purpose of adding new customers or for adjusting service to existing PWCC Network Load, where, in accordance with Good Utility Practice, it reasonably could be expected that such new facilities or existing facilities will cause material changes in the size or characteristics of the PWCC Network Load to be served at any Point of Delivery that would affect the District's ability to provide reliable service, PWCC shall first notify the District of any such addition or modification and shall, as to such modification or addition, supplement its load and system information provided to the District in accordance with Sections 4.4 and 4.5 of this Agreement.  
12.2. The District is entitled to be kept aware of conditions on its Transmission and Distribution System that may affect its ability to provide safe and reliable service.  PWCC shall provide the District, or cause to be provided to the District by APS, on a timely basis, notice of events or material changes in APS or PWCC facilities or loads (including meter removals), emergency conditions, and outages to the extent each may affect operation of the District's Transmission and Distribution System. 
13.  METERING:
	PWCC shall be responsible for providing and maintaining compatible metering equipment where necessary on its side of the Point(s) of Delivery for measuring the electric power and energy transmitted hereunder, consistent with the requirements of the District for reliable operation of its facilities and the transmission of electric power and energy under this Agreement.  Load profiling may be used by separate mutual agreement of PWCC and the District where hourly metered load data at the Point(s) of Delivery is unavailable to account for the electric power and energy transmitted hereunder. Metering equipment owned and installed by PWCC or APS on their facilities shall remain the property of PWCC or APS.
13.1. For APS-owned and PWCC-owned meters, PWCC shall:
13.1.1. At its own expense, make or provide for tests and inspections at periodic intervals in accordance with established practices generally followed in the electric utility industry;
13.1.2. Restore to a condition of accuracy any meters found to be inaccurate, and
13.1.3. Advise District promptly of the results of any such test which shows any inaccuracy more than 3% slow or fast.  District shall be permitted to have representatives present at such tests and inspections.
13.2. PWCC shall make or provide for additional tests of meters at the request of District and in the presence of District representatives if so requested by District.  If any such periodic or additional tests show that a meter is inaccurate by more than three percent slow or fast, correction shall be made in the billing amounts for PWCC for the previous six (6) billing months or from the date of the latest test if within the previous six (6) billing months, whichever is less.  Corrections in billing shall be made from the inaccuracy to the tolerance range of the meter (three percent).  The cost of any additional test requested by District shall be borne by District if such test shows a meter accurate within three percent slow or fast and by PWCC if such test shows a meter inaccurate by more than three percent slow or fast.
13.3. If at any time a meter should fail to register or its registration should be so erratic as to be meaningless, the correct registration for billing purposes shall be estimated by the District and shall be based upon records of check meters, if available, or otherwise upon the best available data available to the District.
13.4. PWCC may install or cause to be installed primary metering on the PWCC/APS side of the Point of Delivery, which primary metering shall be owned and maintained by PWCC or APS.  Both Parties shall have equal access to meter data from all primary metering installations.
13.5. Upon request by the District, PWCC shall arrange for access by District representatives to APS properties for the purpose of verifying meter readings at the Point(s) of Delivery, and shall use reasonable efforts to facilitate access to PWCC customer properties by District representatives for such purposes.
14. BILLING AND PAYMENT:
14.1. PWCC shall read or cause to be read APS-owned and PWCC-owned  meters at the various Point(s) of Delivery and, in combination with meter data obtained from any District-owned primary meter, shall endeavor to render an accounting to District on or before the fifteenth (15th) day of each calendar month for the Transmission Service furnished during the preceding billing month.  In such accounting, certain items may be estimated due to unavailability of final underlying data, in which event adjustments to the correct amounts, when correct amounts are determined, shall be included in the accounting for a subsequent month.
14.2. PWCC shall provide the District with such information as it has in its possession as the District shall reasonably require to determine the amount of transmission service rendered under this Agreement and to calculate the amounts due to the District under this Agreement. District shall provide PWCC with an invoice for services rendered not later than ten (10) days following receipt of the information required to prepare such invoice.
14.3. In the event PWCC does not provide the District with sufficient data to determine the amount of Transmission Service rendered under this Agreement, the District shall estimate the amount of service rendered and PWCC shall pay the District for such estimated service.  Once PWCC supplies the District with sufficient information to determine the amount of service rendered, PWCC shall pay or receive a credit for the difference between estimated and actual service rendered, as the case may be.
14.4. Payments shall be mailed, paid in person, or paid by wire transfer to a bank designed by District, in currently available funds to District at its office in Maricopa, Arizona, or at such other place as District may from time to time designate.  Amounts not paid on or before the 30th day of each month for the preceding billing month, or 20 days of receipt, whichever is later ("due date") shall be payable with interest thereon from the due date to the date of payment calculated in accordance with the methodology specified for interest on refunds in the Commission's regulations at 18 C.F.R. 35.19a(a)(2)(iii).  When payments are made by mail, invoices shall be considered as having been paid on the date of receipt by the District.
14.5. Either Party shall have ninety (90) days after the date of the accounting to protest all or any portion of the invoice.  If the protested portion of the invoice is found to be incorrect, the appropriate Party shall pay to the other Party any payment due, including interest at the rate provided in 18 C.F.R.  35.19a(2)(iii) as of the first day of each month from the date of the invoice to the date the check is mailed by the appropriate Party.
14.6.  If PWCC fails, for any reason other than a billing dispute, to pay any charge for a period of thirty (30) days after it becomes due, District shall have the right to seek authorization from FERC to suspend power delivery hereunder until all amounts due have been paid.  Suspension or cancellation shall not relieve PWCC of its obligation to pay any amounts previously due, nor shall such suspension or cancellation invalidate any other agreement with District.
14.7. In the event that PWCC disputes an invoice under this Agreement for any reason whatever, PWCC shall pay the invoice in full and shall provide written notice to the District within the period set forth in Section 14.5 of the basis for its dispute.  Such notice from PWCC shall initiate the dispute resolution process outlined in Section 8 hereof.  In the event of a determination that a refund is due, any amounts owed by the District shall be refunded to PWCC with interest calculated  at the rate provided in 18 C.F.R.  35.19a(2)(iii).
15. GENERAL CONDITIONS:
15.1. Notices:  Where any notice, demand or request is required to be provided within a specified period of time, such notice, demand or request shall be in writing and shall be deemed properly given, served or provided if sent by registered or certified mail, postage prepaid to the persons designated as follows:
To PWCC:

Secretary
Pinnacle West Capital Corporation 
P. O. Box 53999
Phoenix, AZ  85072-3999
FAX:  (602) 250-3002

With a copy to:

Vice President
Pinnacle West Capital Corporation
Marketing and Trading
P.O. Box 53999
Phoenix, AZ 85072-3999
FAX:  (602) 250-3719

To District: 

General Manager
Electrical District No. 3
41630 West Lewis Johnson Drive
   Maricopa, AZ  85239
   FAX:  (520) 424-3281
   
   with a copy to:
   
   		Mr. Kenneth R. Saline
   		K.R. Saline &amp; Associates, PLC
   		160 North Pasadena, Suite 101
   		Mesa, AZ  85201-6764
   		FAX:  (480) 610-8796
   
      Either Party may change the persons to which notice is to be provided, by providing notice in writing to the other Party.
15.2.  Warranty as to Affiliate Compliance:  PWCC represents and warrants, as a condition of receiving service under this Agreement, that it will cause to be included in agreements between itself and any of its affiliates receiving the benefit of service provided under this Agreement a provision obligating such affiliate to comply with and abide by the provisions of this Agreement.
15.3. Non-Waiver:  The failure of either Party to insist upon strict performance of any of the provisions hereof, or the acceptance by either Party of the payment for all or part of the obligations hereunder shall not be deemed a waiver of any right or remedy by either Party.
15.4. Assignment:  This Agreement shall be binding on and shall inure to the benefit of the successors and assigns of the parties, but no assignment shall be binding until approved in writing by the other Party, which approval shall not unreasonably be withheld, provided that PWCC may assign this Agreement to an affiliate without approval by the other Party.
15.5. Entire Agreement:  This Agreement constitutes the entire agreement between the Parties with regard to the subject matter hereof, and all  proposals for agreement made or offered prior to the date of execution of this Agreement are deemed to be withdrawn and of no effect.
15.6. Modification:  This Agreement may only be modified by a written instrument executed by both Parties hereto.
15.7. Nothing in this Agreement shall affect any authority of any State or local government under Arizona law concerning the transmission of electric power and energy directly to an ultimate consumer thereof.
	

	IN WITNESS WHEREOF, the Parties have caused this Agreement to be executed by their duly authorized representatives as of the __ day of May, 2002.
	ELECTRICAL DISTRICT No. 3 OF PINAL COUNTY,	STATE OF ARIZONA



	_______________________________________________________________
By: 										Date
Title: 	


	PINNACLE WEST CAPITAL CORPORATION



	________________________________________________________________
By: 										Date
Title: 	

ATTACHMENT A
Methodology To Assess Available Transmission Capability


	In assessing the Available Transmission Capability ("ATC") of its Transmission and Distribution System capacity to fulfill new requests for transmission service, the District shall use a 10 year planning horizon and may exclude transmission capacity needed to meet the forecasted loads of its Native Load customers, contractual obligations of any existing or new firm transmission service agreements, contractual obligations of current or new agreements for firm sales to third parties, and pending applications for transmission services.

1.	Determination of ATC

The process for determining ATC should be reasonable, auditable and supportable.  It consists of three steps:  (1) the determination of Total Transfer Capability (TTC), (2) the allocation of TTC between Rights Holders, and (3) the determination of each transmission Rights Holder's Committed Uses.  ATC is then determined by subtracting Committed Uses from allocated TTC.  

			ATC = TTC (allocated) - Committed Uses

Using NERC ATC terminology,

	Committed Uses = TRM + Existing Transmission Commitments (including CBM)

		where TRM = Transmission Reliability Margin
		          CBM = Capacity Benefit Margin

"Committed Uses" is described in Section 6.3 in terms of the six RTG categories of Committed Uses, NERC TRM, Existing Transmission Commitments and CBM. 
   
For information on the determination of ATC and the related operating and planning relationships, refer to the NERC document, "Available Transfer Capability Definitions and Determination" specifically the Sections entitled Determination of Available Transfer Capability, page 15, Commercial Components of Available Transfer Capability, pages 15 to 18, and Recallable and Non-recallable Relationships and Priorities, pages 18 to 21.   
   
   1.1	Determination of Total Transfer Capability (TTC)

TTC represents the reliability limit of a transmission path at any specified point in time.  It is a variable quantity, dependent upon operating conditions in the near term and forecasted conditions in the long term.  TTC cannot exceed the path rating.  Within the Western Interconnection, a wide area approach is used to determine Total Transfer Capability (TTC) on a path basis using the Rated System Path method discussed in WSCC's "Procedures for Regional Planning Project Review and Rating Transmission Facilities" and NERC's "Report on Available Transfer Capability Definitions and Determination".  The determination of TTC is required to conform with WSCC's "Procedures for Regional Planning Project Review and Rating Transmission Facilities" and WSCC's "Minimum Operating Reliability Criteria".  If a Rights Holder (Transmission Provider) chooses not to obtain a WSCC Accepted Rating , it still must conform to the rating methods defined in these documents.  Specific system operating conditions (system topology, load/generation patterns, simultaneous path loadings , and facility outages) may require that TTC or TRM be adjusted to maintain system reliability.     
TTC may sometimes be better defined by a nomogram or set of nomograms than by a single number, particularly when determining TTC values for two or more parallel paths.  Where the simultaneous transfer capabilities of paths are limited by the interactions of flows on paths, the Rights Holder (Transmission Provider) should make this known on the OASIS.  This may be done by posting non-simultaneous TTC and subtracting TRM, where TRM includes the difference between non-simultaneous and simultaneous limits.  As an alternative to computing TRM, the Rights Holder may post non-simultaneous TTC and describe on the OASIS the nomogram and associated curtailment conditions.  In either case, Non-recallable ATC should be based on the best estimate of the simultaneous capability of the path during the period posted.
   1.2	Allocation of TTC
When multiple ownership of transmission rights exists on a path or parallel paths, it is necessary to reach agreement on the allocation of transmission rights in order to determine and report ATC.1/  A single TTC number, appropriate for the actual or projected condition of the transmission system, will be agreed upon for the path and this TTC will then be allocated between the Rights Holders, to yield each Rights Holder's share of the path's TTC for the ATC posting period.
If the multiple Rights Holders can't come to an agreement amongst themselves, the WSCC and the RTGs in the Western Interconnection provide several dispute resolution forums through which path rating and allocation issues may be addressed.
   
   1.3	Determination of Committed Uses

This section describes the principles, practices and methodology for the determination of Committed Uses in terms of the NERC components of TRM, Existing Transmission Commitments and CBM.  The relationship is shown between these components and the five components of Committed Uses (CU1 - CU5) which are delineated in the western RTG Governing Agreements.  The five categories of RTG Committed Uses are:


	1. Native Load Uses (CU1)
            2. Prudent Reserves (CU2)
            3. Existing Commitments for purchases/exchanges/deliveries/sales (CU3)
            4. Existing Commitments for transmission service (CU4)
            5. Other Pending Potential Uses of transfer capability (CU5)

            1.3.1	Principles for Determination of Committed Uses

This document adopts a non-prescriptive approach for addressing the determination of Committed Uses.  A prescriptive approach based on uniform rules, planning criteria, and assumptions was felt unworkable in the near-term and unnecessary in the long-term.  For the same reasons, it was also decided not to develop a list of "safe harbor" assumptions or specific criteria for reasonable assumptions.

The key to the successful implementation of the non-prescriptive approach is development of specific principles, guidelines and reasonableness tests that will be used by transmission Rights Holders in making their assumptions and determinations of Committed Uses and will provide guidance for dispute resolution proceedings.  

            Under this non-prescriptive approach, Rights Holders will be expected to:

?	Use reasonable, "good-faith" assumptions, consistent with general principles outlined in this document
	
?	????Make those assumptions and the underlying justifications for those assumptions available, in accordance with NERC and WSCC standards.
	
?	Justify such assumptions and results, if called upon to do so, in applicable dispute resolution forums.  

?	Adopt assumptions which are consistent with documented and consistently applied reliability requirements, including WSCC Minimum Operating Reliability Criteria, WSCC Power Supply Design Criteria, WSCC Reliability Criteria for System Planning, and the transmission provider's documented and consistently applied internal reliability criteria.
	
?	Apply all assumptions comparably, non-discriminatorily and reasonably.  A Rights Holder's assumptions and methodologies, taken as a whole, must be consistently applied and treat all transmission users (including the Rights Holder) in a comparable and non-discriminatory manner.

?	Use assumptions and methodologies that reasonably maximize the availability of transfer capability for market participants, provided that the outcome meets transmission system reliability requirements and does not impose uncompensated costs on the Rights Holder.
	
?	A Rights Holder's assumptions and methodologies for determining ATC must be consistent with the assumptions used by the Rights Holder in other aspects of its business (for example, system planning).  

1.3.2	Determination of NERC Transmission Reliability Margin (TRM)

NERC TRM is a part of RTG Prudent Reserves - (CU 2)

In the Western Interconnection methodology, TTC (or non-recallable ATC) reductions associated with TRM may include allowances for unscheduled flow, simultaneous limitations associated with operation under a nomogram, uncertainty in load forecast 2/ and unplanned transmission outages (for paths in which contingencies have not already been considered in establishing the path rating).  TRM does not include allowances for planned outages and other known transmission conditions which should be included in the calculation of TTC.  The Rights Holder has the option of including the above described components of TRM in either the determination of TRM or TTC, but not in both.  The Rights Holder should make its methodology and assumptions for determination of TRM available upon request.

Allowances for transmission contingencies should not be included in TRM for paths which have had an Accepted Rating established, since contingencies are already included in the determination of the Accepted Rating.  A Rights Holder which desires to reduce its risk of pro-rata curtailment must explicitly request a reservation of additional rights.  Such rights cannot be reserved under the auspices of Prudent Reserve or TRM.  Where such reserved rights are not scheduled for use, the Rights Holder is required to make such rights available to other transmission service requesters in accordance with FERC Order 888 rules.

Unscheduled flow may be handled in either of two ways, either of which is acceptable, provided that the methodology is applied consistently and non-discriminatorily:

* The path can be reserved up to its TTC, without factoring in any estimates of unscheduled flows.  In such a case, when unscheduled flows materialize, accommodations and curtailments will be made consistent with the WSCC Unscheduled Flow Mitigation Plan.

* The path operator, using reasonable, auditable, supportable projections, may subtract sufficient transfer capability from TTC, as a component of TRM, to reduce the need to make curtailments associated with projected unscheduled flows.  This should be made available as recallable transfer capability in case unscheduled flow is less than anticipated.
         
1.3.3	Determination of NERC "Existing Transmission Commitments"

This section identifies those items to be included in the determination of "Existing Transmission Commitments".

NERC "Existing Transmission Commitments" are included in the following four RTG Committed Use categories:

 (1)  Native Load Uses (CU 1)
 (2)  Existing Commitments for Purchases/Exchanges/Sales  (CU 3)
 (3)  Existing Commitments for Transmission Service (CU4)
 (4)  Other Pending Potential Uses (CU5).  

The following address Native Load Uses - (CU1):

* Reservations for Native Load Growth:  Rights Holders may reserve existing transfer capability needed for reasonably forecasted Native Load growth and transmission customer Native Load growth3/.  Transfer Capability reserved for a Rights Holder's load growth must be made available for use by others until the time that it is actually needed by the Rights Holder.

* Loss of Native Load:  If a customer constituting a portion of a Rights Holder's Native Load is served by another entity for a given period of time and releases the Rights Holder from any obligation to serve for a given period, the Rights Holder shall adjust its native load forecast and any associated transmission reservation accordingly.  The Rights Holder shall have a reasonable amount of time to adjust the native load forecast and any associated transmission reservation after receiving notice from the other entity.

* Native Load Forecasts:  ATC determination does not presume the existence of sanctioned forecasts by regulatory agencies, although a Rights Holder may use such a sanction in arguing the reasonableness of its determination of Committed Uses.  In making reservations for Native Load , Rights Holders must use reasonable assumptions, make available those assumptions and the resulting conclusions, and be able to justify the reasonableness of those assumptions and the resulting conclusions, as well as their consistency with then-current FERC policies, in applicable dispute resolution proceedings.   

* Ancillary Services (required as a part of Native Load service):  Transfer capability should be reserved under Native Load for those ancillary services required to serve Native Load.4/ These include transfer capability required to supply load regulation and frequency response services, reactive supply and voltage control services, and energy imbalance services.  Ancillary services for Operating Reserves are covered under Section 6.3.4.

* Reservations Beyond Reliability-Based Needs:  A Rights Holder may reserve ATC for the import of power which is beyond the amount reserved for reliability needs of their Native Load customers, only to the extent permitted under the FERC's Order 888, or the Right Holder's own open access tariff and is otherwise consistent with the Federal Power Act and the FERC's applicable standards and policies then in effect.  See Appendix II for further discussion of the provisions of the pro forma tariff applicable to the service of Native Load.

The following are "Existing Commitments" Uses  (CU3 and CU4):

* Existing Commitments:  Committed Uses associated with existing commitments at the time of the ATC determination are permissible.  Determinations for these types of Committed Uses must be made available and are subject to evaluation upon request and in applicable dispute resolution forums.

* Non-Recallable Transmission Reservations for Energy Transactions:  Transfer capability for energy transactions that can reasonably be expected to be consummated, such as expected hydro conditions, can be a Committed Use for the Rights Holder (including an affiliated merchant business) to the extent consistent with the reservation provisions of the approved tariff by purchasing non-recallable point-to-point transmission service from available transfer capability.  Such transfer capability can be reserved for expected energy transactions , but must be released for recallable uses on a scheduling basis in real-time if unused or as otherwise required in accordance with the reservation priorities provided in the Rights Holder's tariff.

The following are Other Pending Uses (CU5):

* Good Faith Requests:  Reservations for "Pending Uses" applies to "good faith requests" for transmission service received by a Rights Holder in accordance with applicable FERC or RTG request for service policy.5/ 

1.3.4	Determination of NERC Capacity Benefit Margin (CBM)
         
Reservations required to maintain reliability of service (ancillary services, operating reserves, etc.) in accordance with a tariff's terms and conditions, must be considered Committed Uses.  In accordance with the terms and conditions of the Right Holder's tariff, these reservations may be sold on a recallable basis.   

The following are Native Load Uses (CU1) 
	
* Ancillary Services (Operating Reserves):  Transmission reserved by the control area operator to accommodate operating reserves (spinning and supplemental) can be reserved under CBM for the Rights Holder's ability to transmit the reserves for its own potential resource contingencies or when operating reserves are pooled for the purpose of meeting reliability requirements.  In order for these reservations to be deemed reasonable, such operating reserves may not exceed NERC, WSCC, applicable pool requirements or individual members' reliability requirements.  The associated transmission should be explicitly included in the determination of CBM.
	
* Reservations of Transmission for Purposes Other than Energy Delivery:  In certain cases, a Rights Holder may desire to reserve transmission for purposes other than energy delivery - for example, to provide a path for the import of ancillary services (such as spinning reserves) from another control area; or to allow imports on a different path (in a case where a control area requires a certain amount of unscheduled transfer capability for stability reasons).  Similar to reserve sharing arrangements, such reservations are legitimate Committed Uses by a transmission Rights Holder, and may be included under CU1, to the extent that they are associated with meeting native load reliability requirements (rather than being economics-driven).

The following are Prudent Reserves Uses (CU2) 

Reservations of additional transfer capability for resource contingencies must be based upon reasonable, publicly available assumptions subject to evaluation in applicable dispute resolution proceedings.  The methodology for determining the amount of Prudent Reserve must be consistent with prudent utility practice, must be clearly documented and consistently followed, must be applied in a non-discriminatory manner, and must be auditable.

?	Generation Patterns and Generation Outages:  Many generation patterns and forced generation outages occur in the power system.  These may be considered when determining Committed Uses, to the extent that deductions from ATC associated with these uncertainties use assumptions that are consistent with the planning and service reliability criteria which the Rights Holder uses in serving its customers.6/

GLOSSARY

Accepted Rating: a path rating obtained through the WSCC three-phase rating process that is the recognized and protected maximum capability of the path.

Available Transfer Capability (ATC): a measure of the transfer capability remaining in the physical transmission network for further commercial activity, over and above already-committed uses.

Capacity Benefit Margin (CBM): that amount of transmission transfer capability reserved by load-serving entities to ensure access to generation from interconnected systems to meet generation reliability requirements.

Committed Uses: Five committed uses described in the RTG Governing Agreements as described in this document.

Native Load: existing and reasonably-forecasted customer load for which the Rights Holder - by statute, franchise, contract or regulatory policy - has the obligation to plan, construct or operate its system to provide reliable service.

Prudent Reserve:  the amount of transfer capability set aside for a Rights Holder's reasonable reliability requirements.

Rights Holder: an entity holding transfer capability rights through ownership, contractual agreement, or other transmission service arrangement.  As used in this document, a Rights Holder may be either the Transmission Provider or a Transmission Customer as those terms are used in the FERC's pro-forma tariff.  Some references to Rights Holder may apply only to the Transmission Provider in the context of the provisions of the pro-forma tariff. 

Total Transfer Capability (TTC):  the amount of electric power that can be transferred over the interconnected transmission network in a reliable manner while meeting all of a specific set of defined pre- and post- contingency system conditions.

Transmission Reliability Margin (TRM):  that amount of transmission transfer capability necessary to ensure that the interconnected transmission network is secure under a reasonable range of uncertainties in system conditions.

WSCC:  Western Systems Coordinating Council

ATTACHMENT B
Methodology for Completing a System Impact Study

Upon receipt of a request for service pursuant to the applicable terms and conditions of this Tariff, the District will complete a System Impact Study associated with the requested transmission service. The study procedure will use Good Utility Practice and the engineering and operating principles, standards, guidelines, and criteria of the District, the WSCC, NERC, or any similar organization that may exist in the future.
The District shall use its sole discretion as to the scope, details and methods used to perform the Study. If necessary, a meeting between the District and applicant shall be held as soon as practical after execution of the System Impact Study Agreement to: (a) review the application and any known issue that could affect the scope of the study; and (b) develop a scope of study. The location of the meeting shall be at the District's offices unless the parties mutually agree to another location.
Factors to be considered in determining the capacity availability on the District's Transmission and Distribution System will include but not be limited to:
1. Steady state power flow study results;
2. Stability study results;
3. WSCC, NERC, and the District's system design criteria;
4. Transmission capacity of the existing system;
5. Transmission capacity of the system after the request is added;
6. Reliability requirements of the District and applicant;
7. Type and terms of the service requested;
8. Capacity needed to meet current and 10-year forecasted load of Native Load Customers and Network Customers' loads; and
9. Capacity needed to meet contractual obligations that are expected before the requested Transmission Service begins.




POINTS OF DELIVERY
Exhibit A

Form of Specification of
Point(s) of Delivery

	Primary Metering Points of Delivery:




PRIMARY METERING LOCATION

APS SITE IDENTIFICATION
DATE SERVICE NOMINATED
DATE SERVICE INITIATED
ESTIMATED LOAD ON  SERVICE INITIATION DATE

















Other Metering Points of Delivery:



CUSTOMER ADDRESS

APS SITE IDENTIFICATION
DATE SERVICE NOMINATED
DATE SERVICE INITIATED
ESTIMATED LOAD ON  SERVICE INITIATION DATE
















POINTS OF RECEIPT
Exhibit B


The point where APS facilities interconnect with District's facilities at the Maricopa Substation, 69kV.

TRANSMISSION SERVICE AGREEMENT
Exhibit C

System Loss Factors



	System Loss Factor:  8%, provided however, that because system losses are included in the billing determinants under the District's present rate methodology, no separate charges for losses shall be applicable until after December 31, 2003; and provided further, that nothing in this Agreement obligates the District to supply losses for PWCC's Network Loads.

	










TRANSMISSION SERVICE AGREEMENT
Exhibit D

Transmission Service Rate


Calculated using Exhibit D-1 (Formula Rate Template) and in accordance with Exhibit D-2 (Formula Rate Protocols).  
1/ 	The allocation rules may address allocations for both normal conditions and system outage conditions.
2/  	Rights Holders (Transmission Providers) allowances for load forecasts uncertainty may be part of TRM provided that:  (1)  the allowance is available on a comparable and recallable basis to all Rights Holders, (2) the allowance reduces the exposure to curtailments to all Rights Holders on a prorata basis for unanticipated load, and (3) the allowance does not duplicate consideration of uncertainty within the load forecast itself.

3/ 	See footnote 2.
4/	Reservations must be explicitly forecasted and determined as part of Committed Uses, as either network Non-Recallable service or point-to-point Non-recallable service (depending on whether the user of the service is the load entity or the generation entity, and depending on whether the user of the service is a network customer of a point-to-point customer).  Charges for transmission reserved should be consistent with the appropriate tariff.
5/	The methodology used to determine Pending Uses Reservations must be consistent with prudent utility  practice, must be clearly documented and consistently followed, must be applied in a non-discriminatory manner, and must be auditable.
6/ 	As uncertainty in forecasts diminishes, a Rights Holder must release transmission capacity in a manner that is consistent with prudent utility practice, clearly documented, and consistently followed, applied in a non-discriminatory manner, and auditable.
---------------

---------------

(continued)

---------------

------------------------------------------------------------

46


1


	45



41</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>2505</filing_id>
      <filing_title>Revised Formula Rate to the Transmission Service Agreement</filing_title>
      <filing_type>390</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2024-01-01</current_effective_date>
      <ferc_order_date>2023-12-21</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>