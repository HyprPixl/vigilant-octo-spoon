<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C003355</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>201</tariff_id>
    <tariff_title>FERC GAS TARIFF   ORIGINAL VOLUME NO. 1</tariff_title>
    <tariff_export_date>2025-09-16T20:28Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>110</record_id>
      <option_code>A</option_code>
      <record_title>Measurement</record_title>
      <record_content_desc>Section 8.3</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>110</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>3.	MEASUREMENT

3.1	Unit of Measurement: The transportation unit of gas received and delivered by Transporter shall be a dekatherm, unless otherwise indicated in this Tariff.

3.2	Determination of Volume and Total Heating Value: The volume and the total heating value of gas received and delivered by Transporter shall be determined as follows, provided that Transporter shall have the right, at any time, to rely on the measurements and statements for quantities and heating values of gas actually provided to Transporter by any relevant interconnecting entity.

(a)	The unit of volume for measurement of Natural Gas delivered hereunder shall be one (1) cubic foot.  Such volumes shall be multiplied by their Gross Heating Value per cubic foot and divided by 1,000,000 to determine Dth delivered hereunder.  All fundamental constants, observations, records, and procedures involved in determining and/or verifying the quantity and other characteristics of Natural Gas delivered hereunder, shall, unless otherwise specified herein, be in accordance with the standards prescribed in Report No. 3 or Report No. 7 or Report No. 9, as applicable, of the American Gas Association (AGA), as now and then and from time to time amended or supplemented, or other industry accepted standards for meter types not covered in AGA Report No. 3 or No. 7 or No. 9.

(b)	The total heating value of the gas per cubic foot shall be determined at the receipt point on the basis of periodic samplings to be examined at a qualified laboratory or by chromatograph at Transporter’s reasonable discretion, and at the delivery point by a recording chromatograph to be located at the point of interconnection between the facilities of Transporter and Shipper or downstream pipeline.

(c)	Dekatherms delivered shall be determined by multiplying the Mcf delivered by the ratio of the total heating value of the gas delivered to 1,000. For purposes of this determination the specific gravity and heating value shall be determined at approximately the same time.

(d)	The temperature of Natural Gas shall be assumed to be sixty (60) degrees Fahrenheit for use in volumetric calculations if the temperature is not specifically measured and recorded.

(e)	The specific gravity of the Natural Gas flowing through a meter shall be determined by Transporter on or prior to the commencement of service hereunder and at each scheduled measurement calibration as outlined herein by use of the AGA accepted gravitometer or by computation from a chromatograph or from fractional analysis of representative samples of Natural Gas taken at the point of measurement at Transporter’s reasonable discretion.  Specific gravities so determined will be used in calculating Natural Gas deliveries or receipts as soon as reasonably practical after the test results are available to Transporter and in no instance later than the Month following the Month in which the sample was taken and for all following days until the next specific gravity test is made.  Additional specific gravity tests may be requested with the expense to be borne by the requesting party.

(f)	The deviation of the natural gas from Boyle’s Law shall be determined by American Gas Association Par Research Project NX-19 or any superseding applicable publications by the American Gas Association.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>120</record_id>
      <option_code>A</option_code>
      <record_title>Measurement Equipment</record_title>
      <record_content_desc>Section 8.4</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>120</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>4.	MEASUREMENT EQUIPMENT

4.1	Measuring Facilities: Unless Transporter requires otherwise, all necessary measuring facilities shall be installed, owned, maintained and operated by Transporter or Transporter’s designee at or near the applicable receipt point(s) and delivery point(s).  

(a)	Orifice Meters: Orifice meters, if used, shall be installed, and gas quantities computed, in accord with American National Standard Bulletin ANSI/API 2530, AGA Report No. 3, Orifice Metering of Natural Gas, dated May 16, 1985, and any modifications and amendments thereof, and shall include the use of flange connections and straightening vanes.

(b)	Diaphragm, Rotary or Turbine Meters: Diaphragm or Rotary meters, if used, shall be installed and gas quantities computed, in accordance with generally accepted industry practices. Turbine meters shall be installed in accordance with AGA Report No. 7 (latest edition) with quantities computed in accordance with generally accepted Industry practices.

(c)	Electronic Flow Computers: The use of electronic or other types of flow computers is required, unless otherwise mutually agreed, and such equipment shall be installed, and quantities calculated, in accord with generally accepted industry practices.

(d)	New Measurement Techniques: If, at any time, a new method or technique is developed with respect to gas measurement or the determination of the factors used in such gas measurement, such new method or technique may be substituted upon mutual agreement thereto by the parties.

4.2	Right to be Present: Transporter and Shipper shall each have the right to have representatives present at the time of any installing, reading, cleaning, changing, repairing, inspecting, testing, calibrating or adjusting done in connection with the other’s measuring equipment used in measuring or checking the measurement of receipts or deliveries of gas under the transportation contract. The records from such measuring equipment shall remain the property of their owner, but, upon request, each will submit to the other its records and charts, together with calculations therefrom, for inspection and verification, subject to return within ten Days after receipt thereof.

4.3 	Care Required: Any installation of measuring equipment applying to or affecting deliveries of gas shall be made in such manner as to permit an accurate determination of the quantity of gas delivered and ready verification of the accuracy of measurement. Care shall be exercised by both parties in the installation, maintenance and operation of pressure-regulating equipment so as to prevent any inaccuracy in the determination of the quantity of gas delivered under transportation service agreements.

4.4	Calibration and Testing of Meters:

(a)	The accuracy of Transporter’s or Shipper’s measuring equipment shall be verified at reasonable intervals but neither party shall be required to verify the accuracy of such equipment more frequently than once in any thirty-day period.  Provided, however, that the measuring equipment at the Receipt and Delivery Points with DTI or NFG to measure Natural Gas delivered to or received from DTI or NFG, respectively, shall be maintained and calibrated according to the interconnect agreement with DTI or NFG.  Measurement facilities at any other Receipt and/or Delivery Points shall be operated and maintained and calibrated by Transporter pursuant to this Section 4.4(a).  For the purpose of measurement and meter calibration, the atmospheric pressure shall be assumed to be fourteen and four-tenths (14.4) psia irrespective of variations in natural atmospheric pressure from time to time.

(b)	In the event either party shall notify the other that it desires a special test of any measuring equipment, the parties shall cooperate to secure a prompt verification of the accuracy of such equipment. The expense of any such special test, if called for, shall be borne by the requesting party if the measuring equipment tested is found to be in error by not more than two percent (2%).  If, upon testing, any measuring equipment is found to be in error by not more than two percent (2%), previous recordings of such equipment shall be considered accurate in computing deliveries of gas, but such equipment shall be adjusted at once to record accurately.

(c)	If upon any test the metering equipment in the aggregate is found to be inaccurate by two percent (2%) or more, registration thereof and any payment or allocation based upon such registration shall be corrected based on the level of such inaccuracy for any period of inaccuracy which is definitely known or agreed upon, or if not known or agreed upon, then for a period extending back one-half (1/2) of the time elapsed since the last day of the previous calibration, not to exceed one (1) month.  Following any test, any metering equipment found to be inaccurate to any degree shall be adjusted immediately to measure accurately.  

(d)	If, for any reason, any meter is out of service or out of repair so that the quantity of Natural Gas delivered through such meter cannot be ascertained or computed from the readings thereof, the quantity of Natural Gas delivered during that period such meter is out of service or out of repair shall be computed in accordance with the following: (i) by using the registration of any check measuring equipment of Shipper or interconnecting party, if installed and registering accurately, or (ii) by mutual agreement between the parties taking into consideration previous periods of similar receipts or deliveries and the total system balance for any Month.

4.5	Records:  The records from such measuring equipment shall remain the property of Transporter but shall be available to Shipper for its review at its cost upon 10 Business Days notice.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>100</record_id>
      <option_code>A</option_code>
      <record_title>Quality</record_title>
      <record_content_desc>Section 8.2</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>100</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>2.	QUALITY

2.1	Quality Specifications Applicable to All Deliveries of Gas.  All gas delivered by Transporter to Shipper at the Delivery Points shall have a total heating value of not less than 967 Btu per cubic foot.  The gas delivered by Transporter to Shipper shall be commercially free from objectionable odors, dust, or other solid or liquid matters which might interfere with the merchantability of the gas or cause injury to or interference with proper operation of the lines, regulators, meters, or other appliances through which the gas flows.  

2.2	Quality Specifications Applicable To All Receipts Of Gas.  All gas delivered by Shipper to Transporter at the Receipt Points shall conform to the following specifications.

(a).	Hydrogen Sulfide and Total Sulfur:  The gas shall contain not more than one quarter (1/4) grain of hydrogen sulfide per one hundred cubic feet and not more than twenty grains total sulfur or sulfur compounds per one hundred cubic feet.

(b)	Carbon Dioxide and Nitrogen:  The gas shall contain not more than three percent by volume of carbon dioxide, not more than four percent by volume of nitrogen, and shall contain not more than five percent by volume of combined nonhydrocarbon gases including, but not limited to, carbon dioxide, nitrogen and oxygen.

(c)	Oxygen: The gas shall not contain in excess of two-tenths of one percent by volume of oxygen, and the parties agree to exercise every reasonable effort to keep the gas completely free of oxygen.

(d)	Dust, Gums, etc.: The gas shall be free of objectionable odors, dust, gum, dirt, impurities and other solid or liquid or hazardous matter which might interfere with its merchantability or cause injury to or interfere with proper operation of the facilities, lines, regulators, meters or other appliances through which it flows.

(e)	Bacteria:  The gas and any associated liquids shall not contain any active bacteria or bacterial agent capable of contributing to or causing operational problems.  Bacteria or bacterial agents include, but is not limited to, sulfate reducing bacteria (SRB) and acid producing bacteria (APB).  If evidence of bacteria is discovered, Shipper shall, upon Transporter's request, test for bacteria or bacterial agents.  Such tests shall be conducted on samples taken from the meter run or other appurtenant piping using American Petroleum Institute (API) test method API-RP38 or any other test method acceptable to Transporter which is currently available or may become available at any time during the term of the Service Agreement.

2.3	Liquids, Heating Value, Water Vapor.  The quality of the gas delivered by Shipper to Transporter must be free of liquids and similar in hydrocarbon and water vapor content with the gas typically existing in the area of Transporter's pipeline into which Shipper makes delivery, as set forth below:

(a)	Gas received by Transporter at Receipt Points:

1.	shall be free of water and hydrocarbons in liquid form at the temperature and pressure at which the gas is delivered; and shall not contain any hydrocarbons which might condense to free liquids in Transporter's system under normal conditions; and 

2.	shall have a Total Heating Value which is not less than 967 Btu per cubic foot, and which does not exceed 1100 Btu per cubic foot; and

3.	shall not contain more than seven pounds of water in vapor phase per one million cubic feet.

2.4	Non-Conformance.

(a)	If the gas offered for delivery or receipt hereunder shall fail at any time to conform to any of these quality provisions, then Transporter shall notify Shipper, and Transporter may, at its option, refuse to accept delivery pending correction.  Upon Shipper's failure promptly to remedy any deficiency in quality as specified in Subsections 2.1, 2.2, or 2.3 above, then Transporter may accept delivery of such gas and may make changes necessary to bring such gas into conformity with such specifications, and Shipper shall reimburse Transporter for any reasonable expense incurred by it in effecting such changes.

(b)	Possession and Indemnification. Transporter shall not be considered to have taken possession of gas where the gas is not the quality described in Section 2 of the General Terms and Conditions of this Tariff.  If Shipper delivers gas of non-conforming quality to Transporter, Shipper shall be responsible for, and shall indemnify and hold Transporter harmless from, any damages or liability for injury to, or death of persons or damage to property of Transporter or third persons resulting there from.  Shipper shall reimburse Transporter for any costs, liabilities and expenses incurred by Transporter as a result of Shipper’s non-compliance with the provisions of this Tariff.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>130</record_id>
      <option_code>A</option_code>
      <record_title>Qualification for Service</record_title>
      <record_content_desc>Section 8.5</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>130</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>5.	QUALIFICATION FOR SERVICE

5.1	Request for Service: All Shippers requesting firm transportation service or interruptible transportation service must provide, in a form and substance acceptable to Transporter, the applicable information required by this Section 5 in order to qualify for service. Requests must be provided by a means consistent with Section 16 of these General Terms and Conditions. Any material modification, in whole or in part, of an existing transportation service shall be requested by Shipper’s submission of a new request for service with a notation that the service requested is a modification of an existing service. No request for service will be processed until a completed request on a form provided by Transporter has been submitted by Shipper to Transporter consistent with this Section 5. Transporter shall not be obligated to accept a request which has been submitted more than ninety (90) days prior to the proposed effective date, but may do so on a non-discriminatory basis or where additional facilities are required.

5.2	Required Information: Any request shall include the information listed below. Shipper shall promptly provide any additional information reasonably required by Transporter to process the request; provided that the request for additional information shall not affect the priority of Shipper’s request so long as Shipper promptly provides the additional information.

(a)	Gas Quantities: Shipper shall provide the appropriate quantity information applicable to the type of service requested as follows:

(i)	for firm transportation, Shipper shall provide the MDQ stated in dekatherms for the FT Agreement; and

(ii) 	for interruptible transportation, Shipper shall provide the MIQ and the estimated total quantities to be received and transported over the delivery period.

(b)	Receipt/Delivery Points: For firm transportation requests, Shipper shall provide:

(i)	the designated primary receipt points and primary delivery points and the MDQ at each such point;

(ii)	the MDQs specified at all of Shipper’s primary receipt point(s) must in the aggregate equal the MDQ stated in the FT Agreement;

(iii)	the MDQ specified at all of Shipper’s primary delivery point(s) must in the aggregate equal the MDQ stated in the FT Agreement;

(iv) 	the name of the party and pipeline delivering the gas to Transporter; and

(v)	the name of the party and pipeline to receive the gas from Transporter.

(c)	Term: The proposed commencement and termination dates of service.

(d)	Shipper Certification: Shipper shall provide a statement certifying that all necessary upstream and downstream arrangements will be in place on the date the service is to commence and that the Shipper will have title or the right to acquire title to the gas which will be delivered to Transporter free from liens and adverse claims of every kind. Shipper will indemnify, defend, and hold harmless Transporter against all loss, damage and expense of every character, including reasonable attorney’s fees incurred in negotiation, settlement or litigation with respect to Natural Gas delivered by Shipper, including any expenses incurred on account of title, royalties, taxes, payments, or other charges applicable before or upon delivery of Natural Gas hereunder.

(e)	Facilities: For any request, identification and location of any facilities to be constructed or installed by any party affected by the proposed service.

(f)	Credit Evaluation: For any request, all credit information required in Section 6 of the General Terms &amp; Conditions in this Tariff. Shipper must satisfy the requirements of said Section 6 to be eligible for service.

5.3	Denial of Request: If Transporter denies a request, the denial shall indicate the reason the request is being denied. Any request which has been properly denied consistent with this Tariff shall be deemed a nullity for all present and future purposes.

5.4	Execution of Agreement: If Transporter accepts Shipper’s request for service, Shipper and Transporter shall execute a transportation service agreement in the form set forth in this Tariff for the service requested. The transportation service agreement must be executed and returned by Shipper within ten (10) days after Transporter tenders the transportation service agreement to Shipper.

5.5	Changes:  Transporter shall have the right to propose, file and make effective with the FERC or any other body having jurisdiction, revisions to any applicable rate schedule, or to propose, file, and make effective superseding rate schedules for the purpose of changing the type of service (firm or interruptible), rate, charges, and other provisions thereof effective as to Shippers. Said rate schedule or superseding rate schedule and any revisions thereof which shall be filed and made effective shall apply to and become a part hereof and any TSAs. The filing of such changes and revisions to any applicable rate schedule shall be without prejudice to any regulatory right, if applicable, of Shipper to contest or oppose such filing.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>160</record_id>
      <option_code>A</option_code>
      <record_title>Operational Flow Orders</record_title>
      <record_content_desc>Section 8.8</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>160</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>8.	OPERATIONAL FLOW ORDERS

8.1	Circumstances Warranting Issuance: Transporter shall have the right to issue Operational Flow Orders (“OFOs”) as specified in this Section. An OFO can be issued by Transporter in response to an OFO issued by an upstream or downstream interconnecting pipeline or because of conditions specific to Transporter’s system (including, but not limited to (1) to alleviate conditions that threaten or could threaten the safe operations or system integrity of Transporter’s system; (2) to maintain pipeline operations at the pressures and conditions necessary to provide efficient and reliable transportation services; (3) to have adequate gas supplies in the system to deliver on demand; (4) to maintain service to all Shippers and for all services; (5) to maintain the system in balance for the foregoing purposes or for the purpose of preventing undue imbalances with an interconnecting entity; and (6) to respond at any time to requirements imposed by an entity with which Transporter interconnects). Transporter shall notify Shippers of any OFO issued by an upstream or downstream interconnecting pipeline that requires an OFO on Transporter’s system. Transporter shall not issue an OFO due to specific conditions on its system without first contacting the Shippers causing the problem requiring the OFO and seeking voluntary action to remedy the conditions causing the OFO on its system; provided however that such contact shall not be required if absent immediate issuance of the OFO the safe operation or the system integrity of the Transporter’s system would be threatened.

8.2	Applicability of OFO: To the extent practicable, based on Transporter’s good faith judgment concerning the situations requiring remediation, an OFO will be directed: (1) first, to Shippers causing the problem necessitating the OFO; (2) second, to Shippers transporting gas in the area of the system in which there is an operational problem; and (3) third, to those Shippers with service affected in the area of the system where action is required to correct the problem necessitating the OFO.  Transporter will notify affected Shippers promptly once an OFO has been terminated.

8.3	Notice: All OFOs will be posted on Transporter’s Internet website and, in addition, will be issued via telephone or electronic methods (including e-mail or IM) to the affected Shipper(s). The OFO will set forth: (1) the time and date of issuance; (2) the actions Shipper/operator is required to take; (3) the time by which Shipper must be in compliance with the OFO; (4) the anticipated duration of the OFO; and (5) any other terms that Transporter may reasonably require to ensure the effectiveness of the OFO. Each Shipper must designate two persons, for Transporter to contact on operating matters at any time, on a 24-hour a day, 365-day a year basis. Such contact persons must have adequate authority and expertise to deal with such operating matters. If Transporter cannot contact any Shipper because that Shipper has failed to designate a contact person or Shipper’s contact person is unavailable, Shipper and not Transporter shall be responsible for any consequences that could have been prevented by communication. Transporter, however, will make reasonable continuing efforts to notify the affected Shipper. To the extent practicable, Transporter shall provide an advance warning of a possible OFO by posting on its Internet website, and by telephone or electronic methods (including e-mail or IM).

8.4	Shipper Compliance: A Shipper must comply with an OFO within the time period set forth therein unless the Shipper is able to demonstrate that such compliance is prevented due to a force majeure event as defined in Section 15 of these General Terms and Conditions; provided that the Shipper shall make a good faith effort to comply with any such OFO, including seeking waivers of any contractual limits with third parties or modifications of operating conditions on third party systems. Shipper shall notify Transporter immediately if it believes that it is excused from compliance with the OFO for any of the above stated reasons, and shall provide Transporter with documentation sufficient to support its basis for non-compliance but Transporter shall make the ultimate determination (in its reasonable discretion) as to whether Shipper’s compliance with the OFO is required.

8.5	Penalties: If a Shipper fails to comply with an OFO, it shall be subject to: (1) a penalty equal to $25.00 per Dth  for any quantity of gas by which it deviated from the requirements of the OFO.  A Shipper shall not reimburse Transporter for any actual costs incurred by Transporter if the OFO was necessitated exclusively by Transporter’s gross negligence or willful misconduct or if Transporter incurred any actual costs in implementing the OFO exclusively caused by Transporter’s gross negligence or willful misconduct.  On June 30 of each year, Transporter shall credit to non-offending Shippers (as defined below) any (a) unauthorized Excess Overrun Charges paid to Transporter and (b) penalty revenues paid to Transporter under this paragraph, both net of costs, received as of March 31 by Transporter from Shippers, by means of a credit (not a payment) to non-offending Shippers’ invoice, which shall be separately identified as such a credit.  The credit shall be allocated among non-offending Shippers in proportion to transportation reservation and commodity charge revenues received from such Shippers during the previous year.  A non-offending Shipper shall be a Shipper that is not billed for an Excess Overrun Charge or penalty under this paragraph in a month for which Transporter assesses the same to any other Shipper.  A Shipper billed for an Excess Overrun Charge or penalty under this paragraph for a Month shall not receive any credit for that Month.  If there are no non-offending Shippers in a Month, Transporter shall retain the Excess Overrun Charges and penalty revenues for that Month.

8.6	Liability of Transporter: Transporter shall not be liable for any costs, losses, damages, or liabilities incurred by any Shipper in complying with an OFO. Transporter shall not be responsible for any damages that result from any interruption in Shipper’s service that is a result of a Shipper’s failure to comply promptly and fully with an OFO, and the non-complying Shipper shall indemnify Transporter against any claims of responsibility.  Shipper shall be responsible for any charges, penalties, losses or expenses assessed by an upstream or downstream interconnecting pipeline that result from Shipper’s failure to comply with an OFO, and shall indemnify Transporter against any of the same.

8.7	Unilateral Action: Transporter may periodically take unilateral action, including but not limited to the curtailment of service consistent with Section 9.3 of these General Terms and Conditions and/or operational purchases or sales under Section 24 of these General Terms and Conditions, to maintain the operational integrity of Transporter’s system (or any portion thereof) in any event, including without limitation in the event that: (1) Shipper(s) does not respond to an OFO; or (2) the actions taken thereunder are insufficient to correct the system problem for which the OFO was issued; or (3) there is insufficient time to carry out the procedures with respect to OFOs. For purposes of this Section, the operational integrity of Transporter’s system shall encompass the integrity of the physical system and the preservation of physical assets and their performance, the overall operating performance of the entire physical system as an entity (or any portion thereof), and the maintenance (on a reliable and operationally sound basis) of total system deliverability and the quality of gas delivered.

8.8	Reporting: Within thirty (30) days after an OFO terminates, Transporter shall prepare a report concerning the factors causing the OFO to be imposed and to be terminated. The report will be supplied to affected Shippers.  Additionally, as to any affected Shippers with firm transportation service, Transporter and Shipper shall (at Shipper’s request) discuss the factors causing the OFO to be imposed and to be terminated and potential steps taken to prevent future OFOs for similar circumstances to the extent reasonably practical.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>170</record_id>
      <option_code>A</option_code>
      <record_title>Scheduling of Receipts and Deliveries</record_title>
      <record_content_desc>Section 8.9</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>170</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>9.	SCHEDULING OF RECEIPTS AND DELIVERIES

9.1	Scheduling and Allocation:

(a)	Scheduling on Transporter’s system shall be accomplished by a Shipper following the standard nominations timeline set forth in Section 9.2 of these General Terms and Conditions. Transporter or its designee shall notify Shipper if nominated quantities are rejected. With notice to Shippers, Transporter may make arrangements with interconnecting entities to facilitate Shipper’s ability to schedule on one or more systems without duplicative communications or confirmations.

(b)	Nomination notices by Shipper to Transporter shall be sent by electronic means specified by Transporter to:

Attn:  	Gas Scheduling
E-Mail: 	FECAMgasnominations@eca.com

No transportation service will commence or be scheduled unless or until: (1) Transporter has received complete customer nomination information, including a specification of the Dth to flow; (2) any upstream or downstream entity involved agrees to deliver and receive the nominated quantities and confirm such agreement to Transporter’s or its designee’s reasonable satisfaction, including a specification of the quantities to flow; and (3) Shipper has been advised by Transporter or its designee that quantities have been scheduled pursuant to Shipper’s transportation service agreement. In the event of a discrepancy between the quantity nominated by a Shipper and the corresponding quantity confirmed by the upstream and downstream entities, Transporter shall schedule the lesser of the two quantities. All submissions of nominations and confirmations to Transporter shall be made according to the timeline for nominations set forth in this Section 9.1 of these General Terms and Conditions.

(c)	Scheduling Duration: Unless otherwise agreed, the scheduled service specified in a nomination shall be effective commencing at 9:00 A.M. CCT on the beginning Gas Day and terminating at 9:00 A.M. CCT on the ending Gas Day, as specified in the nomination, provided that the requested time period is wholly within the term of the applicable transportation service agreement pursuant to which the nomination is submitted.

(d)	Scheduling Nominations Timeline: Unless and until Transporter notifies Shipper that it has installed or otherwise commissioned the use of an interactive electronic information service, nominations and confirmations for transportation service on Transporter’s system shall be communicated in writing by e-mail or other agreed-upon means.

(e) 	Each nomination under this section shall be considered an original nomination unless replaced or changed. When a Shipper includes a date range as part of its nomination, each Day within that range is considered an original nomination. When a subsequent nomination is received for one or more Days within that range, the previous nomination shall be superseded by the subsequent nomination only to the extent of the Days specified. The Days of the previous nomination outside the range of the subsequent nomination are unaffected. Nominations have a prospective effect only. The Shipper shall adhere to nomination, confirmation and scheduling deadlines. It is the Transporter who has the right to waive the deadlines.

Transportation Service Provider (TSP) should support the following standard nomination cycles (all times are CCT pursuant to NAESB WGQ Standard No. 0.3.17):

(i)  The 'Timely-Nomination Cycle
 On the day prior to gas flow:

• 1:00 p.m. 	Nominations leave control of the Service Requester (SR);
• 1:15p.m. 	Nominations are received by the TSP (including from Title Transfer Tracking Service Providers (TTTSPs));
• 1:30 p.m.	TSP sends the Quick Response to the SR;
• 4:30 p.m. 	TSP receives completed confirmations from Confirming
Parties;
• 5:00 p.m.	SR and Point Operator receive scheduled quantities from
the TSP.

Scheduled quantities resulting from Timely Nominations should be effective at
the start of the next Gas Day.

(ii)  The Evening Nomination Cycle
On the day prior to gas flow:

• 6:00 p.m. Nominations leave control of the SR;
• 6:15 p.m. Nominations are received by the TSP (including from
TTTSPs);
• 6:30 p.m. TSP sends the Quick Response to the SR;
• 8:30 p.m. TSP receives completed confirmations from Confirming
Parties;
• 9:00 p.m. TSP provides scheduled quantities to the affected SR and
Point Operator, including bumped parties (notice to
bumped parties).

Scheduled quantities resulting from Evening Nominations should be effective at
the start of the next Gas Day.

(iii)  The lntraday 1 Nomination Cycle
 On the current Gas Day:

• 10:00 a.m. Nominations leave control of the SR;
• 10:15 a.m. Nominations are received by the TSP (including from
TTTSPs);
• 10:30 a.m. TSP sends the Quick Response to the SR;
• 12:30 p.m. TSP receives completed confirmations from Confirming
Parties;
• 1 :00 p.m. TSP provides scheduled quantities to the affected SR and
Point Operator, including bumped parties (notice to
bumped parties).

Scheduled quantities resulting from lntraday 1 Nominations should be effective
at 2:00 p.m. on the current Gas Day.

(iv)  The lntraday 2 Nomination Cycle
 On the current Gas Day:

• 2:30 p.m. Nominations leave control of the SR;
• 2:45 p.m. Nominations are received by the TSP (including from
TTTSPs);
• 3:00 p.m. TSP sends the Quick Response to the SR;
• 5:00 p.m. TSP receives completed confirmations from Confirming
Parties;
• 5:30 p.m. TSP provides scheduled quantities to the affected SR and
Point Operator, including bumped parties (notice to
bumped parties).

Scheduled quantities resulting from lntraday 2 Nominations should be effective at
6:00 p.m. on the current Gas Day.

(v)  The lntraday 3 Nomination Cycle
 On the current Gas Day:

• 7:00 p.m. Nominations leave control of the SR;
• 7: 15 p.m. Nominations. are received by the TSP (including from
TTTSPs);
• 7:30 p.m. TSP sends the Quick Response to the SR;
• 9:30 p.m. TSP receives completed confirmations from Confirming
Parties;
• 10:00 p.m. TSP provides scheduled quantities to the affected SR and
Point Operator.

Scheduled quantities resulting from lntraday 3 Nominations should be effective
at 10:00 p.m. on the current Gas Day. Bumping is not allowed during the
lntraday 3 Nomination Cycle.

(vi)	For purposes of 9.1(e)(ii), (iii), (iv) and (v), “provide” shall mean, for transmittals pursuant to standards 1.4.x, receipt at the designated site, and for purposes of other forms of transmittal, it shall mean send or post.

(f) 	All nominations shall be stated in terms of a daily transportation quantity expressed in Dth; provided, however, that Transporter shall not be required to schedule any such nomination where the nominated quantity exceeds the MDQ or MIQ permitted under the transportation service agreement pursuant to which service is requested.

(g) 	The standard quantity for nominations, confirmation and scheduling is dekatherms per Gas Day.

(h)	Bump Protection: Transporter shall not schedule a transportation nomination change during the Day, if the result of scheduling such nomination would be to bump flowing and scheduled transportation under any firm service agreement at the primary receipt or primary delivery point under the FT TSA up to the MDQ at such receipt or delivery point. Further, Transporter shall not schedule a transportation nomination change for the last nomination cycle of the gas Day if the result of the scheduling such nomination would be to bump any other scheduled and flowing nomination including secondary firm or interruptible nominations.

(i) 	With respect to the timely nomination/confirmation process at a receipt or delivery point, in the absence of agreement to the contrary, the lesser of the confirmation quantities between the upstream and downstream parties should be the confirmed quantity. If there is a difference between the upstream and downstream nomination at a receipt or delivery point, the Transporter shall provide the Shipper with the following information to explain why the confirmed nomination was different than the submitted nomination, as applicable: (1) the Transporter did not have sufficient capacity for the nomination; (2) the upstream confirming party did not have sufficient capacity to deliver the nomination; (3) the upstream shipper did not have the gas or submit the nomination; (4) the downstream confirming party did not have sufficient capacity to receive the nomination; (5) the downstream shipper did not have the market or submit the nomination. 

9.2	Scheduling Priority: Transporter shall schedule receipts and deliveries of gas which have been properly nominated and confirmed in the following sequence and/or in accordance with the supply/market rankings provided in a Shipper’s nomination:

(a)	First, among Rate Schedule FT Shippers using primary receipt and primary delivery points according to the quantities of gas scheduled by such Shippers, with any allocation required being pro rata based on MDQ;

(b)	Second, among Rate Schedule FT Shippers using either combination of primary receipt and secondary delivery points or secondary receipt and primary delivery points within contract MDQ with available capacity allocated pro rata between the two nomination combinations according to the quantities of gas scheduled by such Shippers;

(c)	Third, pro rata among Rate Schedule FT Shippers using secondary receipt and secondary delivery points within contract MDQ according to the quantities of gas scheduled by such Shippers;

(d)	Fourth, among interruptible services. Interruptible services at higher transportation rates will be scheduled ahead of services at lower transportation rates. Interruptible services Shippers paying the same transportation rate shall be scheduled pro rata according to the quantities of gas scheduled by each Shipper. 

9.3	Allocation of Limited Capacity:

(a) On-System Curtailment:  If, on any Day, Transporter determines that the capacity of its system, or any portion thereof, including the point(s) at which gas is tendered for transportation, is insufficient to serve all Shippers that are scheduled to receive service on such Day, capacity that requires allocation shall be allocated in a manner that results in curtailment of capacity, to zero if necessary, pursuant to subsection (i) below:

(i) Curtailment will occur in the following order:

(1)	 First among interruptible services. Interruptible services at higher transportation rates will be given a higher priority than interruptible services at lower transportation rates. As for interruptible services Shippers paying the same transportation rate they shall be curtailed pro rata according to the quantities of gas scheduled by each Shipper. 

(2)	Second, pro rata among Rate Schedule FT Rate Schedule FT Shippers that have previously scheduled gas that is thereafter subject to curtailment shall be treated as equals for curtailment, pro rata according to the quantities of gas scheduled by each FT Shipper.

(ii)	The timing for reporting daily operational allocations after the gas has flowed is within one Business Day after the end of a Gas Day. If the best available data for reporting daily operational allocations is the Scheduled Quantity, that quantity should be used for the daily operational allocation.

(iii) 	The time limitation for disputing any allocation is 6 months from the date of the initial month-end allocation with a 3-month rebuttal period. This standard shall not apply in the case of deliberate omission or misrepresentation or mutual mistake of fact. Parties’ other statutory or contractual rights shall not otherwise be diminished by this standard.

(b)	Upstream or Downstream Curtailment: If an upstream entity curtails or interrupts deliveries to Transporter or a downstream entity curtails or interrupts receipts from Transporter, transportation by Transporter shall likewise be curtailed or interrupted and Shipper will be responsible for arranging adjustments of transportation quantities on all upstream/downstream interconnecting entities.

9.4	Uniform Quantities: Except for changes in service as provided in Section 9.1 of these General Terms and Conditions and except as limited under Transporter’s Operational Balancing Agreements with upstream and downstream pipelines, Shipper shall deliver and receive gas in accordance with its Scheduled Quantities up to its MHQ, MIQ and MDQ during any Gas Day; provided, however, that Transporter may waive this restriction on hourly quantities within any Gas Day to the extent operationally feasible in Transporter’s judgment, on a basis which is not unduly discriminatory. Additionally, in addition to any other amounts chargeable to Shipper for unauthorized imbalances, Shipper shall reimburse Transporter for any charges or penalties incurred by Transporter from an upstream or downstream interconnecting pipeline, to the extent that Shipper caused such charges or penalties.  Notwithstanding the foregoing, if Shipper arranges for adequate balancing services by an interconnecting pipeline or by another capable entity and obtains Transporter’s consent for such an arrangement (which consent will not be unreasonably withheld), then Shipper’s quantities can fluctuate relative to Scheduled Quantities (but not in excess of the MHQ, MIQ or MDQ) to the extent balancing support is actually provided by such an entity and no disruption occurs to other Shippers or to Transporter’s system integrity, and subject to the terms of this Tariff and Rate Schedule IT or Rate Schedule FT.

9.5	Supply Deficiencies: If Transporter experiences a supply shortfall due to the under-receipt of supply to Transporter’s system, then: (a) if the deficient source is known, Transporter will curtail the corresponding Shipper; or (b) if the deficient sources are indeterminable, then, to the extent necessary and practicable, Transporter will curtail consistent with Section 9.3 of these General Terms and Conditions.

9.6	Shipper Duty to Control Imbalances: A Shipper receiving any transportation service from Transporter will use, or will cause any party receiving or delivering Shipper’s gas to use, all reasonable efforts to ensure that receipts and deliveries of gas are equal to the Scheduled Quantities, adjusted for Gas Retainage.  Shipper shall attempt to maintain and achieve a cumulative imbalance of zero.  To the extent Transporter determines during the course of any Month that Shipper’s actual tender or take of gas to or from Transporter is differing from the Scheduled Quantities, Transporter shall so advise Shipper, soliciting or directing any nomination changes as Transporter may deem necessary or prudent under the circumstances, and advising Shipper of any such change.  Transporter may in its discretion make physical flow corrections to cure the imbalance if Shipper is not adhering to Transporters’ directions.  In addition to any other penalties assessable herein or in the Rate Schedule IT or Rate Schedule FT or TSA, Shipper shall reimburse Transporter for any charges or penalties incurred by Transporter for imbalances on upstream or downstream entities caused by Shipper.

9.7. 	Imbalance Settlement: Imbalances shall be determined and settled monthly.  Within fifteen (15) Business Days following the end of each Month, Transporter shall issue to each Shipper a cumulative imbalance statement for the Month. Shipper shall correct any imbalance by subsequent nominations and deliveries of gas within the remainder of the current month, or within such longer period of time as is mutually agreed by the Parties.  Upon the termination of any FT or IT Agreement, any remaining imbalance will be corrected or eliminated by Shipper at its cost within thirty (30) days of such effective termination, or within such longer period of time as may be mutually agreed to by the Parties.

9.8	Imbalance Netting:

(a)	Shippers may net between themselves imbalances incurred on Transporter’s system, provided such netting will not have an adverse impact on Transporter’s operations and transportation revenues. Netting of imbalances includes summing, which is the accumulation of all imbalances above any applicable tolerances, and offsetting, which is the combination of positive or negative imbalances above any applicable tolerances. All imbalances incurred by a Shipper will be aggregated and netted at Shipper’s most upstream primary receipt point.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>140</record_id>
      <option_code>A</option_code>
      <record_title>Credit Requirements</record_title>
      <record_content_desc>Section 8.6</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>140</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>6.	CREDIT REQUIREMENTS

6.1	Required Credit Information: Unless otherwise agreed, a Shipper seeking service from Transporter under either Rate Schedule FT or Rate Schedule IT must provide:

(a)	Audited Financial Statements;

(b)	Annual Reports;

(c)	The most recently filed statements with the Securities and Exchange Commission (or an equivalent authority) or other similar publicly available information;

(d)	For public entities, the most recent publicly available interim financial statements, with an attestation by its Chief Financial Officer, Controller, or equivalent (CFO) that such statements constitute a true, correct, and fair representation of the Shipper’s financial condition prepared in accordance with Generally Accepted Accounting Principles (GAAP) or equivalent;

(e)	For non-public entities, including those that are state-regulated utilities, the most recent available interim financial statements, with an attestation by its CFO that such statements constitute a true, correct, and fair representation of the Shipper’s financial condition prepared in accordance with GAAP or equivalent;

(f)	For non-public entities, including those that are state-regulated utilities, an existing sworn filing, including the most recent available interim financial statements and annual financial reports filed with the respective regulatory authority, showing the Shipper’s current financial condition;

(g)	For state-regulated utility local distribution companies, documentation from their respective state regulatory commission (or an equivalent authority) of an authorized gas supply cost recovery mechanism;

(h)	List of affiliates, parent companies, and subsidiaries;

(i)	Publicly available credit reports from credit and bond rating agencies;

(j)	Private credit ratings, if obtained by the Shipper;

(k)	Bank references;

(1)	Trade references;

(m)	Statement of legal composition;

(n)	Statement of the length of time the business has been in operation;

(o)	Any other information reasonably required so that Transporter can make its credit determination under this Section 6; and

(p)	Such other information as may be mutually agreed to by the parties.

6.2	Parent Company Information: In the event Shipper cannot provide the information in Section 6.1 above, Shipper shall, if applicable, provide that information for its parent company.

6.3	Eligibility for Service: Transporter shall not be required to perform or to continue service under any Rate Schedule on behalf of any Shipper which is or has become insolvent or which is or becomes non-creditworthy; provided, however, such Shipper  will continue to receive service under any Rate Schedule if Shipper prepays for such service or furnishes good and sufficient security, as determined by Transporter in its reasonable discretion, in an amount equal to all service fees and charges for a three month period or the duration of the transportation service agreement, whichever is shorter. Any Bidder or requestor for service must satisfy these credit requirements before a bid or request is deemed valid.

6.4	Suspension or Termination of Service: For an existing Shipper, if Transporter determines that Shipper is no longer creditworthy, Transporter may suspend service on five (5) Business Days’ prior notice unless Shipper provides security within that period for one month of advance service, in addition to paying for the current month’s service and any outstanding amount (excluding any amount as to which there is a good faith dispute). In addition, Shipper must within 30 days provide security in advance equal to all fees and charges for three months of service, or Transporter may immediately suspend service. Transporter may terminate service on 30 days’ prior notice (the notice may be concurrent with the suspension notice above) if Shipper fails to satisfy the credit requirements within the applicable notice period. Any notices hereunder shall also be provided simultaneously to the Commission. In addition, Transporter shall notify the Commission by the next Business Day if a suspension or termination actually occurs.

6.5	Insolvency: For purposes herein, the insolvency of a Shipper shall be conclusively demonstrated by the filing by Shipper or any parent entity thereof (hereinafter collectively referred to as “the Shipper”) of a voluntary petition in bankruptcy or the entry of a decree or order by a court having jurisdiction in the premises adjudging the Shipper bankrupt or insolvent, or approving, as properly filed, a petition seeking reorganization, arrangement, adjustment or composition of or in respect of the Shipper under the Federal Bankruptcy Act or any other applicable federal or state law, or appointing a receiver, liquidator, assignee, trustee, sequestrator (or other similar official) of the Shipper or of any substantial part of its property, or the ordering of the winding-up or liquidation of its affairs. Insolvency may also be demonstrated by a filing made by a third party for the involuntary bankruptcy or insolvency of Shipper.

6.6	Creditworthiness: A Shipper will be deemed creditworthy if (i) its long-term unsecured debt securities are rated at least BBB- by Standard &amp; Poor’s Corporation (“S&amp;P”) and at least Baa3 by Moody’s Investor Service (“Moody’s”) (provided, however, that if the Shipper’s rating is at BBB- or Baa3 and the short-term or long-term outlook is Negative, Transporter may require further analysis as discussed below); and (ii) the sum of reservation fees, usage fees and any other associated fees and charges for the contract term is less than 15% of Shipper’s tangible net worth. If a Shipper has multiple transportation service agreements with Transporter, then the total potential fees and charges of all such service agreements shall be considered in determining creditworthiness.

If Shipper does not meet the criteria described above, then Shipper may request that Transporter evaluate its creditworthiness based upon the level of service requested relative to the Shipper’s current and future ability to meet its obligations. Transporter shall apply consistent evaluation practices to all similarly situated Shippers to determine the Shipper’s financial ability to perform the payment obligations due to Transporter over the term of the requested or existing transportation service agreement. Such credit appraisal shall be based upon Transporter’s evaluation of the following information and credit criteria:

(a)	S&amp;P and Moody’s opinions, watch alerts, and rating actions and reports, rating, opinions and other actions by Dun and Bradstreet and other credit reporting agencies will be considered in determining creditworthiness.

(b)	Consistent financial statement analysis will be applied by Transporter to determine the acceptability of Shipper’s current and future financial strength. Shipper’s balance sheets, income statements, cash flow statements and auditor’s notes will be analyzed along with key ratios and trends regarding liquidity, asset management, debt management, debt coverage, capital structure, operational efficiency and profitability.

(c)	Results of bank and trade reference checks and credit reports must demonstrate that a Shipper is paying its obligations in a timely manner.

(d)	Shipper must not be operating under any chapter of the bankruptcy laws and must not be subject to liquidation or debt reduction procedures under state laws and there must not be pending any petition for involuntary bankruptcy. An exception may be made for a Shipper who is a debtor in possession operating under Chapter XI of the Federal Bankruptcy Act if Transporter is assured that the service billing will be paid promptly as a cost of administration under the federal court jurisdiction, based on a court order in effect, and if the Shipper is continuing and continues in the future actually to make payment.

(e)	Whether Shipper is subject to any lawsuits or judgments outstanding which could materially impact its ability to remain solvent.

(f)	Whether Shipper has or has had any delinquent balances outstanding for services provided previously by Transporter and whether Shipper is paying and has paid its account balances according to the terms established in its transportation service agreements (excluding amounts as to which there is a good faith dispute).

(g)	The nature of the Shipper’s business and the effect on that business of general economic conditions and economic conditions specific to it, including Shipper’s ability to recover the costs of Transporter’s services through filings with regulatory agencies or otherwise to pass on such costs to its customers.

(h)	Any other information, including any information provided by Shipper, that is relevant to Shipper’s current and future financial strength and Shipper’s ability to make full payment over the term of the contract.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>150</record_id>
      <option_code>A</option_code>
      <record_title>Termination of Agreements</record_title>
      <record_content_desc>Section 8.7</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>150</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>7.	TERMINATION OF AGREEMENTS

7.1 	Short Term, Discounted and Interruptible Contracts: Any Shipper receiving service under a firm transportation contract having a primary term of less than 12 consecutive months ("short term firm transportation contract") or a primary term of more than 12 consecutive months at less than the maximum rate, or under an interruptible transportation contract retains no right to continued service after the termination of such contract. Upon termination of a short term or interruptible transportation contract, Transporter shall have all necessary abandonment authorization under the Natural Gas Act as of such termination date, and shall not be required to seek case-specific authorization prior to abandoning service.

7.2	Termination of Long Term FT Agreements: Any Shipper with a Long Term (having a term of twelve or more months) FT Agreement at the maximum applicable Tariff rate shall be eligible to exercise a right of first refusal to continue to receive service upon expiration of the term pursuant to the procedure outlined in this Section. If a Shipper desires to invoke its right of first refusal, it must notify Transporter at least six (6) months prior to the expiration of such FT Agreement by a means provided under Section 16 of these General Terms and Conditions, or it will waive such rights. If such a notice is received by Transporter, the following procedures will apply:

(a)	Transporter shall post the capacity for bidding on its Internet website at least 60 days prior to the termination of the FT Agreement. The capacity will remain posted on Transporter’s Internet website for a minimum of 10 days. Such posting shall contain the following information with respect to the capacity:

(i)	daily and other applicable quantity limitations of capacity available;

(ii) 	primary receipt and delivery points;

(iii) 	maximum reservation charge as set forth in this Tariff;

(iv) 	any applicable restrictions; and

(v)	the last day of the Bidding Period.

(b)	Bids shall be submitted to Transporter in writing, in accordance with the communication procedures set forth in Section 16 of these General Terms and Conditions. Such bids shall be binding on Bidder. Upon conclusion of the Bidding Period, Transporter shall evaluate the bids in accord with the net present value formula set forth in Section 11 for firm transportation service for the evaluation of bids under Transporter’s capacity release mechanism; provided that the term used for purposes of the formula will be the term proposed by the Bidder and provided further that Transporter shall have no obligation to accept a bid for less than the filed maximum reservation rate and usage charges.

(c)	Within seven (7) Business Days of the close of the Bidding Period, Transporter shall notify Shipper of the acceptable bid, if any, having the highest present value to Transporter (“Highest Bid”). Shipper shall have five (5) Business Days after receiving notice to notify Transporter in writing as to whether it will match the Highest Bid acceptable to Transporter. Shipper’s notification of its election to match the Highest Bid is contractually binding on Shipper. If the Shipper elects to match the Highest Bid, then it must execute a new FT Agreement that contains the terms of that Highest Bid, within five (5) Business Days after such agreement is tendered by Transporter; provided, however, that Shipper shall not be required to pay any rate higher than the maximum applicable rate.

(d)	If Transporter receives no acceptable bids on the capacity, then Shipper may continue to receive service at the applicable maximum rate on a month-to-month basis or at such other rate and for such term on which Transporter and Shipper mutually agree.

7.3	Posting of Capacity: If a Shipper elects to terminate its FT Agreement without invoking the right of first refusal, or if capacity is not awarded in the right of first refusal process, the availability of the capacity will be posted on Transporter’s Internet web site and will be awarded on a basis consistent with Rate Schedule FT.

7.4	Contractual Right of First Refusal; Monthly Evergreen:  Transporter shall offer, on a not unduly discriminatory basis, a contractual right of first refusal to Shippers with an FT Agreement and a month to month automatic contract extension option subject to termination of the contract by either Transporter or Shipper with thirty (30) day written notice prior to the start of any Month.

7.5	Negotiated Contract Extensions:  Notwithstanding the provisions of this Section 7, Transporter shall offer to prospective Shippers on a not unduly discriminatory basis a provision to extend the primary term of a transportation service agreement for a specific secondary term or terms.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>20</record_id>
      <option_code>A</option_code>
      <record_title>Table of Contents</record_title>
      <record_content_desc>Section 2</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>20</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>TABLE OF CONTENTS


									Tariff Section

Preliminary Statement							3

System Map								4

Notice of Rates:								5
	Recourse Rates
	Negotiated Rates

Rate Schedules:
Firm Transportation (FT) Service					6
Interruptible Transportation (IT) Service				7

General Terms and Conditions						8.1-8.29

Form of Service Agreement:
	Firm and Interruptible Transportation Agreement			9</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>70</record_id>
      <option_code>A</option_code>
      <record_title>Rate Schedules&amp;#58; Interruptible Transportation &amp;#40;IT&amp;#41</record_title>
      <record_content_desc>Section 7</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>70</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>RATE SCHEDULE IT
INTERRUPTIBLE TRANSPORTATION SERVICE

1.	AVAILABILITY

This Rate Schedule is available for the transportation of natural gas on an interruptible basis by Transporter for any Shipper that makes a valid request for interruptible service and executes an Interruptible Transportation Agreement (“IT Agreement”) consistent with this Rate Schedule IT, subject to the availability of capacity from time to time sufficient to provide such service without detriment or disadvantage to Transporter’s firm transportation customers.

2.	APPLICABILITY AND CHARACTER OF SERVICE

The service rendered hereunder shall be the transportation of natural gas up to the Maximum Interruptible Quantity (MIQ) set out in the IT Agreement performed under Subparts B and G of Part 284 of the Commission’s Regulations. Service shall be on an interruptible basis and interruption of service includes decreasing, suspending, or discontinuing either the receipt or delivery of gas at any time. Interruption and availability of interruptible capacity shall be in accordance with Section 9 in the General Terms and Conditions of this Tariff. Transporter shall not be required to install, operate or maintain any additional facilities in order to provide transportation service under this Rate Schedule, except as provided in Section 5.2 of this Rate Schedule. Shipper has no right to nominate or deliver overrun quantities. If a Shipper requires compression services, the cost of compression and additional fuel will be recovered from that Shipper in a negotiated rate agreement that specifically accounts for the same.  At Transporter’s option, an interconnecting party that is using compression upstream of a receipt point will be required to sign Transporter’s standard compression agreement.

3.	CONTRACTING

Transporter shall enter into an IT Agreement with any Shipper which meets the credit standards in the General Terms and Conditions of this Tariff and submits a valid request consistent with Section 5 of the General Terms and Conditions of this Tariff. Submission of a request for service hereunder shall be deemed agreement by Shipper that it will abide by the terms and conditions of this Rate Schedule IT, including the applicable General Terms and Conditions of this Tariff.

4.	DELIVERIES AND RECEIPTS

4.1	Receipt Points: All receipt points on Transporter’s system shall be available as receipt points for gas transported under this Rate Schedule. Transporter shall not be required under any circumstances to receive gas at any receipt point where: (1) the total quantity of gas scheduled for receipt on any Day is less than that required for the accurate measurement of quantities to be received; (2) Shipper has failed to make and properly implement all necessary upstream arrangements on upstream entities; or (3) Shipper has failed to nominate such quantities consistent with Section 9 of the General Terms and Conditions of this Tariff.

4.2	Delivery Points: All delivery points on Transporter’s system shall be available as delivery points for gas transported under this Rate Schedule. Transporter shall not be required under any circumstances to deliver gas at any delivery point where: (1) the total quantity of gas scheduled for delivery on any Day is less than that required for the accurate measurement of quantities to be delivered; (2) Shipper has failed to make and properly implement all necessary downstream arrangements on downstream entities; or (3) Shipper has failed to nominate such quantities consistent with Section 9 in the General Terms and Conditions of this Tariff.

4.3	Receipt and Delivery Quantities:   Transporter shall receive and deliver natural gas throughout the Day in accordance with the Scheduled Quantities up to the MIQ and MHQ, and in accordance with any limitations imposed by any upstream or downstream interconnecting pipelines with respect to the Scheduled Quantities.  Transporter reserves the right force balance (by curtailing receipts or deliveries as applicable) any Shipper not balancing receipts with deliveries.

5.	RATES AND CHARGES

5.1	Transportation Rates: Except to the extent Transporter and Shipper have agreed in writing to a discounted rate, or to a negotiated rate pursuant to Section 26 of the General Terms and Conditions, the transportation rate is the maximum IT rate shown on the effective Notice of Rates. The Monthly Invoice for service shall equal:

(a)	Usage Charge:  The applicable IT Rate multiplied by the dekatherms of natural gas received by Transporter for Shipper in the Month pursuant to this Rate Schedule; 

(b)	Gas Retainage Charge: A volumetric portion of the gas retained by the Transporter calculated by using the applicable gas percentage set forth on the Notice of Rates multiplied by the dekatherms of natural gas received in the Month pursuant to this Rate Schedule;

(c)	ACA Surcharge: To the extent provided in Section 28 of the General Terms and Conditions of this Tariff, the ACA Surcharge posted on the Commission’s website at www.ferc.gov, multiplied by the dekatherms of natural gas received for Shipper in the Month pursuant to this Rate Schedule; and

(d)	If applicable, any other charges pursuant to Section 5 of this Rate Schedule or the General Terms and Conditions of this Tariff.

5.2	New Facilities:

(a)	In addition to the charges pursuant to Section 5.1 of this Rate Schedule, if Transporter agrees to construct facilities for service requested by Shipper, Transporter shall charge Shipper an advance equal in amount to 100% of the estimated costs (including a gross-up for the income tax effects or reimbursement) of facilities constructed at the Shipper’s request in order to provide transportation service under this Rate Schedule. Further, Transporter shall charge Shipper an advance equal in amount to 100% of the estimated costs (including a gross-up for the income tax effects of reimbursement) to be incurred by Transporter for appurtenant facilities and equipment, including but not limited to electronic custody transfer equipment, metering facilities, chromatographs, flow or pressure controllers or other measurement or metering facilities. Such estimated advance payments shall be subject to true-up to actual costs incurred by Transporter for the construction of transportation and appurtenant facilities within 30 days following completion of construction of such facilities.

(b)	Alternatively, if Transporter and Shipper mutually agree, the costs of such facilities as determined under Section 5.2(a) of this Rate Schedule, shall be recovered through an additional monthly charge over an agreed period.

5.3	Incidental Charges: 

In addition to the charges pursuant to Sections 5.1 and 5.2 of this Rate Schedule, Transporter shall charge Shipper an amount to reimburse Transporter 100% for any filing or similar fees and, if applicable, sales or use tax that have not been previously paid by Shipper that Transporter incurs in establishing or rendering service. Shipper shall also pay any penalties or other applicable charges set out in the General Terms and Conditions of this Tariff.

5.4	Gas Retainage; Fuel; Line Loss: Transporter shall deduct from the quantity tendered to Transporter by Shipper for redelivery an amount of gas sufficient to compensate Transporter for fuel gas, electricity, line loss and other utility purposes, plus other unaccounted for gas used in the operation of Transporter’s pipeline system in connection with such transportation.

5.5 	Excess Overrun Charge: If Shipper should on any Day take or receive under this Rate Schedule a quantity of natural gas in excess of that which Shipper is authorized to take or receive under its IT Agreement or Tariff (including in excess of its MIQ, MHQ, or Scheduled Quantities), then such quantity shall constitute an excess overrun quantity. For all such excess overrun quantities, Transporter may invoice (and Shipper shall pay if so invoiced) Shipper a charge in the amount equal to $25.00 per Dth, for quantities tendered or taken by Shipper in excess of 100% of its MIQ or MHQ or Scheduled Quantities. Provided, however, that if there is no harm suffered by Transporter or others Shippers then Transporter shall waive such charge under this paragraph.

5.6	Right to File Rate Changes: Transporter shall have the unilateral right to file with the appropriate regulatory agency and make changes effective in the rates and charges or the terms and conditions of this Rate Schedule or the applicable General Terms and Conditions. Shipper may protest or contest any such filing.

5.7	Liquids Transportation: Transporter may in its sole discretion, but is not obligated to, transport liquids for Shipper. Any transportation of liquids on behalf of Shipper shall be pursuant to a separate agreement, which agreement shall set out the negotiated rate acceptable to Transporter for such transportation.

6.	GENERAL TERMS AND CONDITIONS

6.1 	The General Terms and Conditions of this Tariff are incorporated by reference into this Rate Schedule.

6.2	In the event of a conflict between the provisions of this Rate Schedule and the General Terms and Conditions in this Tariff, the provisions of the General Terms and Conditions shall govern.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>80</record_id>
      <option_code>A</option_code>
      <record_title>General Terms and Conditions</record_title>
      <record_content_desc>Section 8</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>80</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>GENERAL TERMS AND CONDITIONS (“GT&amp;C”)
TABLE OF CONTENTS

GT&amp;C											Tariff
Section											Section

1.	Definition of Terms								8.1
2.	Quality										8.2
3.	Measurement									8.3
4.	Measurement Equipment								8.4
5.	Qualification for Service								8.5
6.	Credit Requirements								8.6
7.	Termination of Agreements							8.7
8.	Operational Flow Orders								8.8
9.	Scheduling of Receipts and Deliveries						8.9
10.	Invoicing, Payments, and Penalty Revenue Crediting					8.10
11.	Temporary Release or Permanent Assignment of Rights to 
Firm Transportation Service							8.11
12.	Possession of Gas, Risk of Loss, 
Liability, and Limitation of Damages						8.12
13.	Warranty of Title to Gas								8.13
14.	Pressures and Availability of Delivery Points					8.14
15.	Excuse of Performance and Remedies						8.15
16.	Notices and Communications							8.16
17.	Modification									8.17
18.	Waivers and Future Default							8.18
19.	Applicable Regulations								8.19
20.	Code Compliance									8.20
21.	Web Site Access and Complaints							8.21
22.	Construction of Facilities								8.22
23.	Incorporation in Rate Schedules and Service Agreements				8.23
24.	Operational Purchases and Sales of Gas						8.24
25.	Successors and Assigns								8.25
26.	Negotiated Rates									8.26
27.	Acquired Capacity								8.27
28.	ACA Charge									8.28
29.	North American Industries Standards Board (NAESB) Standards			8.29
30.	Revenue Sharing Mechanism							8.30</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>60</record_id>
      <option_code>A</option_code>
      <record_title>Rate Schedules&amp;#58; Firm Transportation &amp;#40;FT&amp;#41; Service</record_title>
      <record_content_desc>Section 6</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>60</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>RATE SCHEDULE FT
FIRM TRANSPORTATION SERVICE

1.	AVAILABILITY

This Rate Schedule is available for the transportation of natural gas on a firm basis by Transporter for any Shipper that completes a valid request for service, is awarded firm capacity under Section 3 hereof and executes a Firm Transportation Agreement (“FT Agreement”) consistent with this Rate Schedule FT.
	
2.	APPLICABILITY AND CHARACTER OF SERVICE

The service rendered hereunder shall be the transportation of natural gas up to the maximum daily quantity (MDQ) and maximum hourly quantity (MHQ) set out in the FT Agreement. Such service is performed under Subparts B and G of Part 284 of the Commission’s Regulations and pursuant to an FT Agreement. Transporter shall not be required to install, operate or maintain any additional facilities in order to provide transportation service under this Rate Schedule except as provided in Section 5.2 of this Rate Schedule. Service shall be provided on a firm basis; provided, however, that scheduling of service is subject to, and service may be curtailed consistent with Section 9 of the General Terms and Conditions in this Tariff. Shipper has no right to nominate or deliver overrun quantities, however Transporter may (in its sole discretion) allow overrun on a non-discriminatory basis.  If a Shipper requires compression services, the cost of compression and additional fuel will be recovered from that Shipper in a negotiated rate agreement that specifically accounts for the same.  At Transporter’s option, an interconnecting party that is using compression upstream of a receipt point will be required to sign Transporter’s standard compression agreement.

3.	REQUESTS FOR CAPACITY; AWARD OF CAPACITY

3.1	Eligibility for Service: Any entity which meets the credit standards set out in the General Terms and Conditions of this Tariff may request service under this Rate Schedule FT. A request for service must comply with Section 5 of the General Terms and Conditions of this Tariff.

3.2	Capacity: Acceptance of a request is contingent on the availability of uncommitted system firm capacity sufficient to provide the requested firm service to Shipper.

3.3	Award of Capacity: Transporter may, but is not obligated to, accept any request for service at less than the applicable maximum rate. Transporter will apply objective economic analysis in awarding capacity. If several valid requests for capacity are pending which exceed the availability of uncommitted firm capacity, Transporter shall evaluate such requests based on the net present value of incremental revenue under the respective requests, reflecting volume, term, and the minimum rate Transporter will accept for the service. If a request is not accepted by Transporter within ten (10) days, then it shall be deemed denied.

3.4	Applicability of Tariff: Submission of a request for service hereunder shall be deemed agreement by Shipper that it will abide by the terms and conditions of this Rate Schedule, including the applicable General Terms and Conditions, if awarded capacity.

4. 	DELIVERIES AND RECEIPTS

4.1	Primary Receipt Points: Primary receipt point(s) for all gas transported by Transporter under this Rate Schedule shall be at the mutually agreeable interconnection(s) between Transporter’s system and the connecting facilities shown on Exhibit A to the FT Agreement, consistent with Section 5.2 of the General Terms and Conditions of this Tariff. Transporter shall not be required under any circumstances to receive gas at any receipt point where: (1) the total quantity of gas scheduled for receipt on any Day is less than that required for the accurate measurement of quantities to be received; (2) Shipper has failed to make and properly implement all necessary arrangements on upstream entities; or (3) Shipper has failed to nominate such quantities consistent with Section 9 of the General Terms and Conditions of this Tariff.

4.2	Primary Delivery Points: Primary delivery point(s) for all gas transported by Transporter under this Rate Schedule shall be at the mutually agreeable interconnection(s) between Transporter’s system and the connecting facilities shown on Exhibit A to the FT Agreement, consistent with Section 5.2 of the General Terms and Conditions of this Tariff. Transporter shall not be required under any circumstances to deliver gas at any delivery point where: (1) the total quantity of gas scheduled for delivery on any Day is less than that required for the accurate measurement of quantities to be delivered; (2) Shipper has failed to make and properly implement all necessary arrangements on downstream entities; or (3) Shipper has failed to nominate such quantities consistent with Section 9 of the General Terms and Conditions of this Tariff.

4.3	Receipt and Delivery Quantities:  Transporter shall receive and deliver natural gas throughout the Day in accordance with the Scheduled Quantities up to the MDQ and MHQ, as applicable, and in accordance with any limitations imposed by any upstream or downstream interconnecting pipelines with respect to the Scheduled Quantities. Transporter reserves the right to force balance (by curtailing receipts or deliveries or issuing an OFO as applicable) any Shipper not balancing receipts with deliveries.

4.4	Changing Primary Receipt and Delivery Points: Subject to the availability of firm point and segment capacity and the agreement of Transporter, Shipper may change the primary receipt or delivery points under its FT Agreement (including redistributing the MDQ among points) by a mutually agreeable amendment of Exhibit A to the FT Agreement, as applicable. If there are other requests pending for such capacity, the award of capacity shall be consistent with Section 3 of this Rate Schedule FT. Shipper shall lose its priority at previously designated primary receipt and delivery points to the extent that the amendment reduces the MDQ at any such point.

4.5	Secondary Receipt and Delivery Points: Shipper may use as a secondary receipt or delivery point any other receipt or delivery point on Transporter’s system by notifying Transporter in Shipper’s nomination. A Shipper may also use a primary receipt or delivery point as a secondary point to the extent that Shipper nominates quantities at the primary point in excess of the Shipper’s MDQ for that primary point; provided that its total nominations under that FT Agreement are less than or equal to the MDQ under the FT Agreement. A Shipper’s rights under this Rate Schedule to use a secondary receipt or delivery point shall be superior to all interruptible shippers’ nominations at that point, but inferior to the rights of all shippers under FT Agreements using that point as a primary delivery or receipt point, except in Intraday 3 Nomination Cycle, consistent with Section 9 in the General Terms and Conditions of this Tariff.

5.	RATES AND CHARGES

5.1	Transportation Rates: Except to the extent Transporter and Shipper have agreed in writing to a discounted rate, or to a negotiated rate pursuant to Section 26 of the General Terms and Conditions, the applicable rates for service under this FT Rate Schedule are the applicable maximum Reservation and Usage Rates shown on the effective Notice of Rates. The Monthly Invoice for service under an FT Agreement shall be equal to:

(a)	Reservation Fee: A reservation fee determined under this Section 5.1 multiplied by the MDQ as specified in the FT Agreement;

(b)	Usage Charge: The applicable usage charge under this Section 5.1 multiplied by the dekatherms of natural gas received in the Month pursuant to this Rate Schedule; 

(c)	Gas Retainage Charge:  A volumetric portion of the gas retained by the Transporter calculated by using the applicable Gas Retainage percentage set forth on the Notice of Rates multiplied by the dekatherms of natural gas received in the Month pursuant to this Rate Schedule;

(d)	ACA Surcharge:  To the extent provided in Section 28 of the General Terms and Conditions of this Tariff, the ACA Surcharge posted on the Commission’s website at www.ferc.gov, multiplied by the dekatherms of natural gas received for Shipper in the Month pursuant to this Rate Schedule; and

(e)	If applicable, any other charges pursuant to Section 5 of this Rate Schedule or the General Terms and Conditions of this Tariff.

5.2	New Facilities:

(a)	In addition to the charges pursuant to Section 5.1 of this Rate Schedule, if Transporter agrees to construct facilities for service requested by Shipper, Transporter shall charge Shipper an advance equal in amount to 100% of the estimated costs (including a gross-up for the income tax effects or reimbursement) of facilities constructed at the Shipper’s request in order to provide transportation service under this Rate Schedule. Further, Transporter shall charge Shipper an advance equal in amount to 100% of the estimated costs (including a gross-up for the income tax effects of reimbursement) to be incurred by Transporter for appurtenant facilities and equipment, including but not limited to electronic custody transfer equipment, metering facilities, chromatographs, flow or pressure controllers or other measurement or metering facilities. Such estimated advance payments shall be subject to true-up to actual costs incurred by Transporter for the construction of transportation and appurtenant facilities within 30 days following completion of construction of such facilities.

(b)	Alternatively, if Transporter and Shipper mutually agree, the costs of such facilities as determined pursuant to Section 5.2(a) of this Rate Schedule may be recovered through an additional monthly charge over an agreed period.

5.3	Incidental Charges: In addition to the charges pursuant to Sections 5.1 and 5.2 of this Rate Schedule, Transporter shall charge Shipper an amount to reimburse Transporter 100% for any filing or similar fees, and if applicable, sales or use tax that have not been previously paid by Shipper, which Transporter incurs in establishing or rendering service. Shipper shall also pay Transporter any applicable penalties or charges specified in the General Terms and Conditions of this Tariff.

5.4	Gas Retainage; Fuel; Line Loss: Transporter shall deduct from the quantity tendered to Transporter by Shipper for redelivery an amount of gas sufficient to compensate Transporter for fuel gas, electricity, line loss and other utility purposes, plus other unaccounted for gas used in the operation of Transporter’s pipeline system in connection with such transportation.

5.5 	Excess Overrun Charge: If Shipper should on any Day take or receive under this Rate Schedule a quantity of natural gas in excess of that which Shipper is authorized to take or receive under its FT Agreement or Tariff (including in excess of its MDQ, MHQ, or Scheduled Quantities), then such quantity shall constitute an excess overrun quantity. For all such excess overrun quantities, Transporter may invoice (and Shipper shall pay if so invoiced) Shipper a charge in the amount equal to  $25.00 per Dth  for quantities tendered or taken by Shipper in excess of 100% of its MDQ or MHQ or Scheduled Quantities.  Provided, however, that if there is no harm suffered by Transporter or others Shippers then Transporter shall waive such charge under this paragraph.

5.6	Right to File Rate Changes: Transporter shall have the unilateral right to file with the appropriate regulatory agency and make changes effective in the rates and charges or the terms and conditions of this Rate Schedule or the applicable General Terms and Conditions. Shipper may protest or contest any such filing in accordance with FERC procedures.

5.7	Liquids Transportation: Transporter may in its sole discretion, but is not obligated to, transport liquids for Shipper. Any transportation of liquids on behalf of Shipper shall be pursuant to a separate agreement, which agreement shall set out the negotiated rate acceptable to Transporter for such transportation.

6.	GENERAL TERMS AND CONDITIONS

6.1 	The General Terms and Conditions of this Tariff are incorporated by reference into this Rate Schedule.

6.2	In the event of a conflict between the provisions of this Rate Schedule and the General Terms and Conditions of this Tariff, the provisions of the General Terms and Conditions shall govern.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>180</record_id>
      <option_code>A</option_code>
      <record_title>Invoicing, Payments, and Penalty Revenue Crediting</record_title>
      <record_content_desc>Section 8.10</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>180</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>10.	INVOICING, PAYMENTS, AND PENALTY REVENUE CREDITING

10.1 	Monthly invoicing date: Transporter shall prepare invoices (including imbalance statements) on or before the 10th Business Day of each month following the Month of service. Invoices may be rendered by mail or electronically.

10.2 	Right of examination: If an invoice is in dispute by Shipper on a good faith basis, Shipper shall pay the portion not in dispute and provide documentation identifying the basis for the dispute. Both Transporter and Shipper shall have the right to examine at any reasonable time the applicable books and records (or portions thereof) and charts of the other to the extent necessary to verify the accuracy of any statement made under or pursuant to the provisions of the gas service agreement. Upon receipt of a request, the receiving party will either send the information relevant to the request to the other party or will provide the requestor the right to review such information in the receiving party’s offices.

10.3 	Monthly Payment Date: Shipper (or other payor) shall pay Transporter, via electronic means as designated on each Monthly Invoice or via other mutually-agreed method, so that payment is received and Transporter has available funds within ten (10) calendar days from the date of the invoice, for the transportation service purchased by Shipper during the preceding month and invoiced by Transporter pursuant to this Tariff or the transportation service agreement. Shipper (or other payor) shall provide to Transporter supporting documentation with any payment as well as the appropriate invoice number on the payment(s). Transporter shall apply the payment pursuant to the supporting documentation provided. Since payment is to be made by electronic funds transfer, the remittance detail is due within two (2) Business Days of the payment due date.

10.4 	Remedies for Nonpayment: Should Shipper fail to pay all of the amount of any invoice as herein provided when such amount is due, Shipper shall pay a Charge for Late Payment. Such Charge for Late Payment shall be determined by multiplying (a) the unpaid portion of the invoice, by (b) the ratio of the number of days from the due date to the date of actual payment to 365, and by (c) the interest rate determined in accordance with 18 C.F.R. Section 154.67 of the Commission’s Regulations. If such failure to pay continues beyond five (5) days after payment is due, Transporter may suspend service on five (5) Business Days’ prior notice to Shipper and to the Commission. If Transporter has provided Shipper and the Commission with at least thirty (30) days notice that service will terminate due to the non-payment, Transporter, in addition to any other remedy it may have under law or the transportation service agreement, may terminate the transportation service agreement unless Shipper has cured the deficiency within such 30-day notice period; provided, however, that if Shipper in good faith shall dispute the amount of any such invoice or part thereof and shall pay to Transporter such amounts as it concedes to be correct in addition to providing such remittance detail and documentation identifying the basis for the dispute, and at any time within thirty (30) days after a demand made by Transporter on a not unduly discriminatory basis shall furnish good and sufficient surety bond, guaranteeing payment to Transporter of the amount ultimately found due upon such invoices after a final determination, which may be reached either by agreement or judgment of the courts, as may be the case, then Transporter shall not be entitled to suspend or terminate the transportation service agreement until default be made in the conditions of such bond. Transporter shall notify the Commission of any actual suspension or termination of service pursuant to this Section 10.4.

10.5 	Adjustment of Underpayment, Overpayment or Error in Billing: If it shall be found within six months of the date on which the invoice was rendered that a Shipper has been overcharged or undercharged in any form whatsoever under the provisions of this Tariff or the transportation service agreement for the services covered by such invoice and Shipper shall have actually paid the invoices containing such overcharge or undercharge, then within thirty (30) days after the final determination thereof, which shall be no later than ninety (90) days from the date which the claim for adjustment was made, Transporter shall refund the amount of such overcharge and Shipper shall pay the amount of any such undercharge; provided, however, if the overcharge or undercharge is the result of a deliberate omission or misrepresentation by either party or a mutual mistake of fact, then the period for resolving adjustments is tolled until the claimed adjustment is settled. Interest calculated in accord with Section 10.4 above shall apply to any overcharge or undercharge not paid or refunded within thirty (30) days from the date of the determination of the amount of the undercharge or overcharge.
10.6	Penalty Revenue Crediting:

(a)	OFO penalties. In the event Transporter collects OFO penalties pursuant to Section 8.5 of the General Terms and Conditions of this Tariff, such penalty revenues, net of Transporter’s costs, shall be credited annually to all non-offending firm transportation Shippers by invoice credit, pursuant to the provisions of Section 8.5 of the General Terms and Conditions of this Tariff. 
(b)	Excess Overrun Penalties. In the event Transporter collects unauthorized excess overrun penalties pursuant to Section 5.5 of Rate Schedule FT or Rate Schedule IT, such penalty revenues, net of Transporter’s costs, shall be credited annually to all non-offending firm transportation Shippers by invoice credit, pursuant to the provisions of Section 8.5 of the General Terms and Conditions of this Tariff. 
(c)	Credits to eligible Shippers under the above (a) and (b) shall be made on a pro rata basis, based on a Shipper’s total reservation and commodity charges paid each Month but subject to Section 8.5 of the General Terms and Conditions of this Tariff. A monthly credit will not be provided to a Shipper that incurred a penalty during that Month.  The credit shall be made not later than the March accounting Month statement sent to Shippers subsequent to the annual period.  In the event there are OFO penalties and/or unauthorized overrun penalties assessed and no non-offending firm transportation Shippers for a given Month, the applicable credit amounts for that Month shall be booked to Account No. 495, Other Gas Revenues. 
(d)	Transporter will calculate and credit to Shippers as appropriate, interest on monies collected pursuant to GT&amp;C Sections10.6 (a) and (b). Such interest will be calculated in accordance with Section 154.501(d) of the Commission’s regulations.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>320</record_id>
      <option_code>A</option_code>
      <record_title>Operational Purchases and Sales of Gas</record_title>
      <record_content_desc>Section 8.24</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>320</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data>e1xydGYxXGRlZmYwe1xmb250dGJse1xmMCBUaW1lcyBOZXcgUm9tYW47fXtcZjEgQ2FsaWJyaTt9e1xmMiBUaW1lcyBOZXcgUm9tYW4gQm9sZDt9e1xmMyBDb3VyaWVyIE5ldzt9e1xmNCBUYWhvbWE7fX17XGNvbG9ydGJsXHJlZDBcZ3JlZW4wXGJsdWUwIDtccmVkNTRcZ3JlZW45NVxibHVlMTQ1IDtccmVkMFxncmVlbjBcYmx1ZTI1NSA7fXtcKlxkZWZjaHAgXGYxfXtcKlxsaXN0dGFibGUge1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTF7XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAzKFwnMDApO317XGxldmVsbnVtYmVyc1wnMDI7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTcyMFxsaTE0NDBcbGluMTQ0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTgwMFxsaW4xODAwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAyLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGkyNTIwXGxpbjI1MjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTMyNDBcbGluMzI0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzk2MFxsaW4zOTYwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk0NjgwXGxpbjQ2ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTU0MDBcbGluNTQwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNjEyMFxsaW42MTIwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk2ODQwXGxpbjY4NDB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxMjUzNDg3NX17XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDMoXCcwMCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTgwMFxsaW4xODAwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAxLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkyNTIwXGxpbjI1MjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDIuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTMyNDBcbGluMzI0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzk2MFxsaW4zOTYwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk0NjgwXGxpbjQ2ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDUuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTU0MDBcbGluNTQwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNjEyMFxsaW42MTIwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA3Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk2ODQwXGxpbjY4NDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDguO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTc1NjBcbGluNzU2MH17XGxpc3RuYW1lIDt9XGxpc3RpZDY4OTYyMjg1fXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0xe1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMyhcJzAwKTt9e1xsZXZlbG51bWJlcnNcJzAyO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkxMDgwXGxpbjEwODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTE4MDBcbGluMTgwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpMjUyMFxsaW4yNTIwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkzMjQwXGxpbjMyNDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTM5NjBcbGluMzk2MH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpNDY4MFxsaW40NjgwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk1NDAwXGxpbjU0MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTYxMjBcbGluNjEyMH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwOC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpNjg0MFxsaW42ODQwfXtcbGlzdG5hbWUgO31cbGlzdGlkNzEyMDI4ODF9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTF7XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAzKFwnMDApO317XGxldmVsbnVtYmVyc1wnMDI7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTcyMFxsaTE0NDBcbGluMTQ0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTgwMFxsaW4xODAwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAyLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGkyNTIwXGxpbjI1MjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTMyNDBcbGluMzI0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzk2MFxsaW4zOTYwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk0NjgwXGxpbjQ2ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTU0MDBcbGluNTQwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNjEyMFxsaW42MTIwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk2ODQwXGxpbjY4NDB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxNTI4MzkzODd9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTF7XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAzKFwnMDApO317XGxldmVsbnVtYmVyc1wnMDI7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTk5NlxsaTE3MTZcbGluMTcxNn17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTgwMFxsaW4xODAwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAyLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGkyNTIwXGxpbjI1MjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTMyNDBcbGluMzI0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzk2MFxsaW4zOTYwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk0NjgwXGxpbjQ2ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTU0MDBcbGluNTQwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNjEyMFxsaW42MTIwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk2ODQwXGxpbjY4NDB9e1xsaXN0bmFtZSA7fVxsaXN0aWQyOTc2MTIyOTd9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTF7XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDE1e1xsZXZlbHRleHQgXCcwMVwnMDA7fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktNTc2XGxpNTc2XGxpbjU3Nn17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDJ7XGxldmVsdGV4dCBcJzAzXCcwMC5cJzAxO317XGxldmVsbnVtYmVyc1wnMDFcJzAzO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS03MjBcbGkxNDQwXGxpbjE0NDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwNVwnMDAuXCcwMS5cJzAyO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktNzIwXGxpMjE2MFxsaW4yMTYwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDdcJzAwLlwnMDEuXCcwMi5cJzAzO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDc7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTEwODBcbGkzMjQwXGxpbjMyNDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwOVwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNDt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTQ0MFxsaTQzMjBcbGluNDMyMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzBiXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDU7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODAwXGxpNTQwMFxsaW41NDAwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMGRcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGQ7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTIxNjBcbGk2NDgwXGxpbjY0ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwZlwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDYuXCcwNzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkXCcwZjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMjE2MFxsaTcyMDBcbGluNzIwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzExXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3LlwnMDg7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGZcJzExO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0yNTIwXGxpODI4MFxsaW44MjgwfXtcbGlzdG5hbWUgO31cbGlzdGlkMzc4NDMxNzgzfXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0xe1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQ5e1xsZXZlbHRleHQgXCcwMVwnMDA7fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzYwXGxpbjM2MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDN7XGxldmVsdGV4dCBcJzAzXCcwMC5cJzAxO317XGxldmVsbnVtYmVyc1wnMDFcJzAzO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkxMDgwXGxpbjEwODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwNVwnMDAuXCcwMS5cJzAyO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktNzIwXGxpMjE2MFxsaW4yMTYwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDdcJzAwLlwnMDEuXCcwMi5cJzAzO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDc7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTcyMFxsaTI4ODBcbGluMjg4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzA5XCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5O31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS03MjBcbGkzNjAwXGxpbjM2MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwYlwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTA4MFxsaTQ2ODBcbGluNDY4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzBkXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNjt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xMDgwXGxpNTQwMFxsaW41NDAwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMGZcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2LlwnMDc7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGY7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE0NDBcbGk2NDgwXGxpbjY0ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcxMVwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDYuXCcwNy5cJzA4O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGRcJzBmXCcxMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTQ0MFxsaTcyMDBcbGluNzIwMH17XGxpc3RuYW1lIDt9XGxpc3RpZDQ0MzgxMDY4Mn17XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDMoXCcwMCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTgwMFxsaW4xODAwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAxLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkyNTIwXGxpbjI1MjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDIuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTMyNDBcbGluMzI0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzk2MFxsaW4zOTYwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk0NjgwXGxpbjQ2ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDUuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTU0MDBcbGluNTQwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNjEyMFxsaW42MTIwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA3Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk2ODQwXGxpbjY4NDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDguO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTc1NjBcbGluNzU2MH17XGxpc3RuYW1lIDt9XGxpc3RpZDUxNDU0MzEyNn17XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDMoXCcwMCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMjUyMFxsaW4yNTIwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAxLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkzMjQwXGxpbjMyNDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDIuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTM5NjBcbGluMzk2MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNDY4MFxsaW40NjgwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk1NDAwXGxpbjU0MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDUuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTYxMjBcbGluNjEyMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNjg0MFxsaW42ODQwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA3Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk3NTYwXGxpbjc1NjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDguO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTgyODBcbGluODI4MH17XGxpc3RuYW1lIDt9XGxpc3RpZDU0NjQ1MjczNn17XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDFcJzAwO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTM2MFxsaW4zNjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwM1wnMDAuXCcwMTt9e1xsZXZlbG51bWJlcnNcJzAxXCcwMzt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTA4MFxsaW4xMDgwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDVcJzAwLlwnMDEuXCcwMjt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDU7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTcyMFxsaTIxNjBcbGluMjE2MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzA3XCcwMC5cJzAxLlwnMDIuXCcwMzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3O31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS03MjBcbGkyODgwXGxpbjI4ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwOVwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNDt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTA4MFxsaTM5NjBcbGluMzk2MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzBiXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDU7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xMDgwXGxpNDY4MFxsaW40NjgwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMGRcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGQ7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE0NDBcbGk1NzYwXGxpbjU3NjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwZlwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDYuXCcwNzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkXCcwZjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTQ0MFxsaTY0ODBcbGluNjQ4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzExXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3LlwnMDg7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGZcJzExO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xNDQwXGxpNzIwMFxsaW43MjAwfXtcbGlzdG5hbWUgO31cbGlzdGlkNjY0NDc4MDI5fXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0xe1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMyhcJzAwKTt9e1xsZXZlbG51bWJlcnNcJzAyO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkyNTY4XGxpbjI1Njh9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTMyODhcbGluMzI4OH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpNDAwOFxsaW40MDA4fXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk0NzI4XGxpbjQ3Mjh9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTU0NDhcbGluNTQ0OH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpNjE2OFxsaW42MTY4fXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk2ODg4XGxpbjY4ODh9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTc2MDhcbGluNzYwOH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwOC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpODMyOFxsaW44MzI4fXtcbGlzdG5hbWUgO31cbGlzdGlkMTExMDEyNDk4Mn17XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDMoXCcwMCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTA4MFxsaW4xMDgwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAxLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkxODAwXGxpbjE4MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDIuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTI1MjBcbGluMjUyMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzI0MFxsaW4zMjQwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkzOTYwXGxpbjM5NjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDUuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTQ2ODBcbGluNDY4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNTQwMFxsaW41NDAwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA3Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk2MTIwXGxpbjYxMjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDguO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTY4NDBcbGluNjg0MH17XGxpc3RuYW1lIDt9XGxpc3RpZDEyMTU1ODI5ODV9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTF7XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAzKFwnMDApO317XGxldmVsbnVtYmVyc1wnMDI7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE0NDBcbGkyMTYwXGxpbjIxNjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTE4MDBcbGluMTgwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpMjUyMFxsaW4yNTIwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkzMjQwXGxpbjMyNDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTM5NjBcbGluMzk2MH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpNDY4MFxsaW40NjgwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk1NDAwXGxpbjU0MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTYxMjBcbGluNjEyMH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwOC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwXGxpNjg0MFxsaW42ODQwfXtcbGlzdG5hbWUgO31cbGlzdGlkMTIxNzI4MDIwM317XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0NHtcbGV2ZWx0ZXh0IFwnMDFcJzAwO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTM2MFxsaW4zNjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQ0e1xsZXZlbHRleHQgXCcwM1wnMDAuXCcwMTt9e1xsZXZlbG51bWJlcnNcJzAxXCcwMzt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzYwXGxpbjM2MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzA1XCcwMC5cJzAxLlwnMDI7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1O31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS03MjBcbGk3MjBcbGluNzIwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDdcJzAwLlwnMDEuXCcwMi5cJzAzO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDc7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTEwODBcbGkxMDgwXGxpbjEwODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwOVwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNDt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTA4MFxsaTEwODBcbGluMTA4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzBiXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDU7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xNDQwXGxpMTQ0MFxsaW4xNDQwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMGRcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGQ7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MDBcbGkxODAwXGxpbjE4MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwZlwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDYuXCcwNzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkXCcwZjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTgwMFxsaTE4MDBcbGluMTgwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzExXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3LlwnMDg7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGZcJzExO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0yMTYwXGxpMjE2MFxsaW4yMTYwfXtcbGlzdG5hbWUgO31cbGlzdGlkMTIxOTcwOTUzN317XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDMoXCcwMCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktNzIwXGxpMTA4MFxsaW4xMDgwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAxLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkxNDQwXGxpbjE0NDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDIuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTIxNjBcbGluMjE2MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMjg4MFxsaW4yODgwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkzNjAwXGxpbjM2MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDUuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTQzMjBcbGluNDMyMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNTA0MFxsaW41MDQwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA3Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk1NzYwXGxpbjU3NjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDguO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTY0ODBcbGluNjQ4MH17XGxpc3RuYW1lIDt9XGxpc3RpZDEzNTA2NDMyNzF9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTF7XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDR7XGxldmVsdGV4dCBcJzAxXCcwMDt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkzNjBcbGluMzYwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0NHtcbGV2ZWx0ZXh0IFwnMDNcJzAwLlwnMDE7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDM7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTEwODBcbGluMTA4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzA1XCcwMC5cJzAxLlwnMDI7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1O31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS03MjBcbGkyMTYwXGxpbjIxNjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwN1wnMDAuXCcwMS5cJzAyLlwnMDM7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwNzt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktNzIwXGxpMjg4MFxsaW4yODgwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDlcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQ7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDk7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTcyMFxsaTM2MDBcbGluMzYwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzBiXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDU7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xMDgwXGxpNDY4MFxsaW40NjgwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMGRcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGQ7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTEwODBcbGk1NDAwXGxpbjU0MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwZlwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDYuXCcwNzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkXCcwZjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMTQ0MFxsaTY0ODBcbGluNjQ4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzExXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3LlwnMDg7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGZcJzExO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xNDQwXGxpNzIwMFxsaW43MjAwfXtcbGlzdG5hbWUgO31cbGlzdGlkMTQyNzExODA0NH17XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjOFxsZXZlbG5mY244XGxldmVsamMxXGxldmVsamNuMVxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDA7fXtcbGV2ZWxudW1iZXJzO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGJcZnMyOFxjZjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMxXGxldmVsbmZjbjFcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcYlxjZjBcZmktNzIwXGxpNzIwXGxpbjcyMH17XGxpc3RsZXZlbFxsZXZlbG5mYzNcbGV2ZWxuZmNuM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxiXGNmMFxmaS03MjBcbGkxNDQwXGxpbjE0NDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcYlxjZjBcZmktNzIwXGxpMjE2MFxsaW4yMTYwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGNmMFxmaS03MjBcbGkyODgwXGxpbjI4ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDUuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcY2YwXGZpLTcyMFxsaTM2MDBcbGluMzYwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNik7fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxjZjBcZmktNzIwXGxpNDMyMFxsaW40MzIwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA3KTt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGNmMFxmaS03MjBcbGk1MDQwXGxpbjUwNDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDgpO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcY2YwXGZpLTcyMFxsaTU3NjBcbGluNTc2MH17XGxpc3RuYW1lIDt9XGxpc3RpZDE2NDI0MTYyNjF9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTF7XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAzKFwnMDApO317XGxldmVsbnVtYmVyc1wnMDI7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTEwODBcbGluMTA4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTgwMFxsaW4xODAwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAyLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGkyNTIwXGxpbjI1MjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTMyNDBcbGluMzI0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzk2MFxsaW4zOTYwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk0NjgwXGxpbjQ2ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTU0MDBcbGluNTQwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNjEyMFxsaW42MTIwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk2ODQwXGxpbjY4NDB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxNzgzMzc4MDAwfXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0xe1xsaXN0bGV2ZWxcbGV2ZWxuZmMxXGxldmVsbmZjbjFcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MlxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwY0FSVElDTEUgXCcwMC4gIDt9e1xsZXZlbG51bWJlcnNcJzA5O31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGJcZjJcY2YwXGxpMzY5MFxsaW4zNjkwfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDNcJzAwLlwnMDE7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDM7fVxsZXZlbGxlZ2FsMVxsZXZlbG5vcmVzdGFydDBcYlxjZjBcZmk3MjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDIuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcYlxjZjBcZmkxNDQwfXtcbGlzdGxldmVsXGxldmVsbmZjOFxsZXZlbG5mY244XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzJcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDA7fXtcbGV2ZWxudW1iZXJzO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGNmMH17XGxpc3RsZXZlbFxsZXZlbG5mYzhcbGV2ZWxuZmNuOFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cyXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAwO317XGxldmVsbnVtYmVyczt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxjZjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM4XGxldmVsbmZjbjhcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MlxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMDt9e1xsZXZlbG51bWJlcnM7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcY2YwfXtcbGlzdGxldmVsXGxldmVsbmZjOFxsZXZlbG5mY244XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzJcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDA7fXtcbGV2ZWxudW1iZXJzO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGNmMH17XGxpc3RsZXZlbFxsZXZlbG5mYzhcbGV2ZWxuZmNuOFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cyXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAwO317XGxldmVsbnVtYmVyczt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxjZjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM4XGxldmVsbmZjbjhcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MlxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMDt9e1xsZXZlbG51bWJlcnM7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcY2YwfXtcbGlzdG5hbWUgO31cbGlzdGlkMTgzNzU2OTIxN317XGxpc3RcbGlzdHRlbXBsYXRlaWQtMXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDMoXCcwMCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMTA4MFxsaW4xMDgwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAxLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkxODAwXGxpbjE4MDB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDIuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTI1MjBcbGluMjUyMH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzI0MFxsaW4zMjQwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGkzOTYwXGxpbjM5NjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDUuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTQ2ODBcbGluNDY4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNTQwMFxsaW41NDAwfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA3Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0zNjBcbGk2MTIwXGxpbjYxMjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDguO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTE4MFxsaTY4NDBcbGluNjg0MH17XGxpc3RuYW1lIDt9XGxpc3RpZDE4NjI0MzI5NzB9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTF7XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAzKFwnMDApO317XGxldmVsbnVtYmVyc1wnMDI7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTI4ODBcbGluMjg4MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwMS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpMzYwMFxsaW4zNjAwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzAyLjt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk0MzIwXGxpbjQzMjB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTUwNDBcbGluNTA0MH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNTc2MFxsaW41NzYwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk2NDgwXGxpbjY0ODB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxe1xsZXZlbHRleHQgXCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxsZXZlbGxlZ2FsMFxsZXZlbG5vcmVzdGFydDBcZjFcY2YwXGZpLTM2MFxsaTcyMDBcbGluNzIwMH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDF7XGxldmVsdGV4dCBcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XGxldmVsbGVnYWwwXGxldmVsbm9yZXN0YXJ0MFxmMVxjZjBcZmktMzYwXGxpNzkyMFxsaW43OTIwfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MXtcbGV2ZWx0ZXh0IFwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31cbGV2ZWxsZWdhbDBcbGV2ZWxub3Jlc3RhcnQwXGYxXGNmMFxmaS0xODBcbGk4NjQwXGxpbjg2NDB9e1xsaXN0bmFtZSA7fVxsaXN0aWQyMTQ1NDYyMzE4fX17XCpcbGlzdG92ZXJyaWRldGFibGUge1xsaXN0b3ZlcnJpZGVcbGlzdGlkNTQ2NDUyNzM2XGxpc3RvdmVycmlkZWNvdW50MFxsczF9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMjE0NTQ2MjMxOFxsaXN0b3ZlcnJpZGVjb3VudDBcbHMyfXtcbGlzdG92ZXJyaWRlXGxpc3RpZDEyMTU1ODI5ODVcbGlzdG92ZXJyaWRlY291bnQwXGxzM317XGxpc3RvdmVycmlkZVxsaXN0aWQxODM3NTY5MjE3XGxpc3RvdmVycmlkZWNvdW50MFxsczR9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMzc4NDMxNzgzXGxpc3RvdmVycmlkZWNvdW50MFxsczV9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTgzNzU2OTIxN1xsaXN0b3ZlcnJpZGVjb3VudDBcbHM2fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDEyMTcyODAyMDNcbGlzdG92ZXJyaWRlY291bnQwXGxzN317XGxpc3RvdmVycmlkZVxsaXN0aWQxMjE5NzA5NTM3XGxpc3RvdmVycmlkZWNvdW50MFxsczh9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTg2MjQzMjk3MFxsaXN0b3ZlcnJpZGVjb3VudDBcbHM5fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDE3ODMzNzgwMDBcbGlzdG92ZXJyaWRlY291bnQwXGxzMTB9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTgzNzU2OTIxN1xsaXN0b3ZlcnJpZGVjb3VudDlcbHMxMXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfX17XGxpc3RvdmVycmlkZVxsaXN0aWQxODM3NTY5MjE3XGxpc3RvdmVycmlkZWNvdW50MlxsczEye1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDEyfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQyfX17XGxpc3RvdmVycmlkZVxsaXN0aWQxODM3NTY5MjE3XGxpc3RvdmVycmlkZWNvdW50MlxsczEze1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDEyfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQyfX17XGxpc3RvdmVycmlkZVxsaXN0aWQxODM3NTY5MjE3XGxpc3RvdmVycmlkZWNvdW50MlxsczE0e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDEyfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQzfX17XGxpc3RvdmVycmlkZVxsaXN0aWQxODM3NTY5MjE3XGxpc3RvdmVycmlkZWNvdW50MlxsczE1e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDEyfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQzfX17XGxpc3RvdmVycmlkZVxsaXN0aWQxODM3NTY5MjE3XGxpc3RvdmVycmlkZWNvdW50OVxsczE2e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDE4Mzc1NjkyMTdcbGlzdG92ZXJyaWRlY291bnQyXGxzMTd7XGxmb2xldmVsXGxpc3RvdmVycmlkZXN0YXJ0YXRcbGV2ZWxzdGFydGF0MTJ9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDV9fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDE4Mzc1NjkyMTdcbGlzdG92ZXJyaWRlY291bnQwXGxzMTh9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTQyNzExODA0NFxsaXN0b3ZlcnJpZGVjb3VudDBcbHMxOX17XGxpc3RvdmVycmlkZVxsaXN0aWQ0NDM4MTA2ODJcbGlzdG92ZXJyaWRlY291bnQwXGxzMjB9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTExMDEyNDk4MlxsaXN0b3ZlcnJpZGVjb3VudDBcbHMyMX17XGxpc3RvdmVycmlkZVxsaXN0aWQ2NjQ0NzgwMjlcbGlzdG92ZXJyaWRlY291bnQwXGxzMjJ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTM1MDY0MzI3MVxsaXN0b3ZlcnJpZGVjb3VudDBcbHMyM317XGxpc3RvdmVycmlkZVxsaXN0aWQxMjUzNDg3NVxsaXN0b3ZlcnJpZGVjb3VudDBcbHMyNH17XGxpc3RvdmVycmlkZVxsaXN0aWQxNTI4MzkzODdcbGlzdG92ZXJyaWRlY291bnQwXGxzMjV9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkNzEyMDI4ODFcbGlzdG92ZXJyaWRlY291bnQwXGxzMjZ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMjk3NjEyMjk3XGxpc3RvdmVycmlkZWNvdW50MFxsczI3fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDE2NDI0MTYyNjFcbGlzdG92ZXJyaWRlY291bnQwXGxzMjh9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkNjg5NjIyODVcbGlzdG92ZXJyaWRlY291bnQwXGxzMjl9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkNTE0NTQzMTI2XGxpc3RvdmVycmlkZWNvdW50MFxsczMwfX17XHN0eWxlc2hlZXQge1xxbFxzbDI3NVxzbG11bHQxXHNhMjAwXGYxXGZzMjJcY2YwIE5vcm1hbDt9e1xzMVxzYmFzZWRvbjBccWxcZjNcZnMyMFxjZjAgUGxhaW4gVGV4dDt9e1xzMlxzYmFzZWRvbjBccWxcbGk3MjBcbGluNzIwXGNvbnRleHR1YWxzcGFjZVxmMVxjZjAgTGlzdCBQYXJhZ3JhcGg7fXtcczNcc2Jhc2Vkb24wXHFsXGYzXGNmMFxsczRcaWx2bDggTnVtYmVyIDk7fXtcczRcc2Jhc2Vkb24wXHFsXGYzXGNmMFxsczRcaWx2bDcgTnVtYmVyIDg7fXtcczVcc2Jhc2Vkb24wXHFsXGYzXGNmMFxsczRcaWx2bDYgTnVtYmVyIDc7fXtcczZcc2Jhc2Vkb24wXHFsXGYzXGNmMFxsczRcaWx2bDUgTnVtYmVyIDY7fXtcczdcc2Jhc2Vkb24wXHFsXGYzXGNmMFxsczRcaWx2bDQgTnVtYmVyIDU7fXtcczhcc2Jhc2Vkb24wXHFsXGYzXGNmMFxsczRcaWx2bDMgTnVtYmVyIDQ7fXtcczlcc2Jhc2Vkb24wXHFsXGYzXGNmMFxsczRcaWx2bDIgTnVtYmVyIDM7fXtcczEwXHNiYXNlZG9uMFxxbFxmM1xjZjBcbHM0XGlsdmwxIE51bWJlciAyO317XHMxMVxzYmFzZWRvbjBccWxcZjNcY2YwXGxzNCBOdW1iZXIgMTt9e1xzMTJcc2Jhc2Vkb24wXHFsXGY0XGZzMTZcY2YwIEJhbGxvb24gVGV4dDt9e1xzMTNcc2Jhc2Vkb24wXHFsXGYxXGZzMjBcY2YwIGFubm90YXRpb24gdGV4dDt9e1xzMTRcc2Jhc2Vkb24wXHFsXGYxXGZzMjBcY2YwIGZvb3Rub3RlIHRleHQ7fXtcczE1XHNiYXNlZG9uMFxxbFxmMVxjZjAgZm9vdGVyO317XHMxNlxzYmFzZWRvbjBccWxcZjFcY2YwIGhlYWRlcjt9e1xzMTdcc2Jhc2Vkb24wXHNuZXh0MFxxbFxvdXRsaW5lbGV2ZWwwXHNiMjQwXGYxXGZzMzJcY2YxIGhlYWRpbmcgMTt9e1xzMThcc2Jhc2Vkb24xM1xzbmV4dDEzXHFsXGJcZjFcY2YwIGFubm90YXRpb24gc3ViamVjdDt9e1wqXGNzMTlcZjFcY2YwIERlZmF1bHQgUGFyYWdyYXBoIEZvbnQ7fXtcKlxjczIwXHNiYXNlZG9uMTlcZjFcY2YwIExpbmUgTnVtYmVyO317XCpcY3MyMVx1bFxmMVxjZjIgSHlwZXJsaW5rO317XCpcY3MyMlxzbGluazE2XGYxXGNmMCBIZWFkZXIgQ2hhcjt9e1wqXGNzMjNcc2xpbmsxNVxmMVxjZjAgRm9vdGVyIENoYXI7fXtcKlxjczI0XHNsaW5rMTRcZjFcZnMyMFxjZjAgRm9vdG5vdGUgVGV4dCBDaGFyO317XCpcY3MyNVxzdXBlclxmMVxjZjAgZm9vdG5vdGUgcmVmZXJlbmNlO317XCpcY3MyNlxmMVxmczE2XGNmMCBhbm5vdGF0aW9uIHJlZmVyZW5jZTt9e1wqXGNzMjdcc2xpbmsxM1xmMVxmczIwXGNmMCBDb21tZW50IFRleHQgQ2hhcjt9e1wqXGNzMjhcc2xpbmsxOFxiXGYxXGNmMCBDb21tZW50IFN1YmplY3QgQ2hhcjt9e1wqXGNzMjlcc2xpbmsxMlxmNFxmczE2XGNmMCBCYWxsb29uIFRleHQgQ2hhcjt9e1wqXGNzMzBcc2Jhc2Vkb24xOVxzbGluazE3XGYxXGZzMzJcY2YxIEhlYWRpbmcgMSBDaGFyO317XCpcY3MzMVxzYmFzZWRvbjE5XGZzMTZcY2YwIERvY0lEO317XCpcY3MzMlxzYmFzZWRvbjE5XHNsaW5rMVxmM1xmczIwXGNmMCBQbGFpbiBUZXh0IENoYXI7fX17XCpcZG9jdmFye0RvY0lEQXV0aG9yfXtGYWxzZX19e1wqXGRvY3ZhcntEb2NJRENsaWVudE1hdHRlcn17RmFsc2V9fXtcKlxkb2N2YXJ7RG9jSUREYXRlfXtGYWxzZX19e1wqXGRvY3ZhcntEb2NJRExpYnJhcnl9e1RydWV9fXtcKlxkb2N2YXJ7RG9jSURUeXBlfXtBbGxQYWdlc319e1wqXGRvY3ZhcntEb2NJRFR5cGlzdH17RmFsc2V9fXtcKlxkb2N2YXJ7TGVnYWN5RG9jSURSZW1vdmVkfXtUcnVlfX1cc2VjdGRcbWFyZ2xzeG4xNDQwXG1hcmdyc3huMTQ0MFxtYXJndHN4bjE0NDBcbWFyZ2JzeG4xNDQwXGhlYWRlcnk3MjBcZm9vdGVyeTcyMFxjb2xzeDcyMHtcZm9vdGVyclxwYXJkXHBsYWluXHMxNVxxbFxzbDI3NVxzbG11bHQxXHNhMjAwXHRxY1x0eDQ2ODBcdHFyXHR4OTM2MHtcZjFcZnMxMlxjZjAgXHtXNTY5MjgwNy4xXH19XGYxXGZzMjJccGFyfVxwYXJkXHBsYWluXHFqXG5vd2lkY3RscGFye1wqXGJrbWtzdGFydCBfR29CYWNrfXtcKlxia21rZW5kIF9Hb0JhY2t9XGZzMTZccGFyXHBhcmRccGxhaW5ccWpcbm93aWRjdGxwYXJcZnMyMFxwYXJccGFyZFxwbGFpblxxalxub3dpZGN0bHBhcntcYlxmczIwXGNmMCAyNC5cdGFiIH17XGJcdWxcZnMyMFxjZjAgT1BFUkFUSU9OQUwgUFVSQ0hBU0VTIEFORCBTQUxFUyBPRiBHQVN9XGJcZnMyMFxwYXJccGFyZFxwbGFpblxxalxub3dpZGN0bHBhclxmczIwXHBhclxwYXJkXHBsYWluXHFqXGZpNzIwXG5vd2lkY3RscGFye1xmczIwXGNmMCBUcmFuc3BvcnRlciBtYXkgbWFrZSBwdXJjaGFzZXMgYW5kIHNhbGVzIG9mIGdhcyBmcm9tIHRpbWUgdG8gdGltZSBpbmNpZGVudGFsIHRvIFRyYW5zcG9ydGVyXHU4MjE3XCc5MnMgdHJhbnNwb3J0YXRpb24gZnVuY3Rpb25zLCBpbmNsdWRpbmcgbWFpbnRhaW5pbmcgYWRlcXVhdGUgbGluZSBwYWNrLiBGdXJ0aGVyLCBpbiBvcmRlciB0byBhbGxldmlhdGUgY29uZGl0aW9ucyB0aGF0IHRocmVhdGVuIHRoZSBpbnRlZ3JpdHkgb2YgaXRzIHN5c3RlbSwgVHJhbnNwb3J0ZXIgbWF5IHBlcmlvZGljYWxseSBhY3F1aXJlIHF1YW50aXRpZXMgb2YgZ2FzIHRoYXQgYXJlIGluIGV4Y2VzcyBvZiBpdHMgbG9uZyB0ZXJtIHN5c3RlbSBuZWVkcy4gVHJhbnNwb3J0ZXIgc2hhbGwgaGF2ZSB0aGUgcmlnaHQgdG8gbWFrZSBzYWxlcyBvZiBzdWNoIGV4Y2VzcyBnYXMgZnJvbSB0aW1lIHRvIHRpbWUgYXQgcG9pbnRzIHB1cnN1YW50IHRvIHRoZSB0ZXJtcyBvZiB0aGUgYmxhbmtldCBjZXJ0aWZpY2F0ZSBvZiBwdWJsaWMgY29udmVuaWVuY2UgYW5kIG5lY2Vzc2l0eSBhdmFpbGFibGUgZm9yIHVzZSBieSBUcmFuc3BvcnRlciBwdXJzdWFudCB0byB0aGUgQ29tbWlzc2lvblx1ODIxN1wnOTJzIFJlZ3VsYXRpb25zIGF0IDE4IEMuRi5SLiBTZWN0aW9uIDI4NC4yODQuIFN1Y2ggc2FsZXMgc2hhbGwgYmUgbWFkZSB1bmRlciByYXRlcywgdGVybXMgYW5kIGNvbmRpdGlvbnMgbXV0dWFsbHkgYWdyZWVkIHVwb24gYmV0d2VlbiBUcmFuc3BvcnRlciBhbmQgcHVyY2hhc2Vycy59XGZzMjBccGFyXHBhcmRccGxhaW5ccWpcbm93aWRjdGxwYXJcZnMyMFxwYXJccGFyZFxwbGFpblxxalxub3dpZGN0bHBhclxmczE2XHBhclxwYXJkXHBsYWluXHFsXHNsMjc1XHNsbXVsdDFcc2EyMDBcZjFcZnMyMlxwYXJ9</record_binary_data>
      <record_plain_text>24.	OPERATIONAL PURCHASES AND SALES OF GAS

Transporter may make purchases and sales of gas from time to time incidental to Transporter’s transportation functions, including maintaining adequate line pack. Further, in order to alleviate conditions that threaten the integrity of its system, Transporter may periodically acquire quantities of gas that are in excess of its long term system needs. Transporter shall have the right to make sales of such excess gas from time to time at points pursuant to the terms of the blanket certificate of public convenience and necessity available for use by Transporter pursuant to the Commission’s Regulations at 18 C.F.R. Section 284.284. Such sales shall be made under rates, terms and conditions mutually agreed upon between Transporter and purchasers.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>330</record_id>
      <option_code>A</option_code>
      <record_title>Successors and Assigns</record_title>
      <record_content_desc>Section 8.25</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>330</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>25.	SUCCESSORS AND ASSIGNS

Transporter shall have the right, upon notice to Shippers and without approval of Shippers, to pledge, sell, assign, or otherwise transfer or convey its interest in the equipment, contracts, and facilities subject to this Tariff as long as FERC jurisdictional service will continue following the pledge, sell, assignment, or otherwise transferring or conveying Transporter’s interest in the equipment, contracts, and facilities subject to this Tariff. Approval of the Shippers will be required if as a result of pledging, selling, assigning, or otherwise transferring or conveying its interest in the equipment, contracts, and facilities subject to this Tariff, FERC jurisdictional service will terminate. Any company which shall succeed by purchase, merger or consolidation to the properties, substantially as an entirety, of Shipper shall be entitled to the rights and shall be subject to the obligations of its predecessor in title under the transportation service agreement; provided, however, that Transporter reserves the right to evaluate and approve the creditworthiness of the new entity in accordance with the credit evaluation provision of these General Terms and Conditions. No other assignment of a transportation service agreement or any of the rights or obligations thereunder shall be made by Shipper unless there first shall have been obtained the written consent thereto of Transporter. Shipper may pledge or assign its respective right, title and interest in and to and under a transportation service agreement to a trustee or trustees, individual or corporate, as security for bonds or other obligations or securities without the necessity of such trustee or trustees becoming in any respect obligated to perform the obligations of the assignor under a transportation service agreement and, if any such trustee be a corporation, without its being required to qualify to do business in any State in which performance of the transportation service agreement may occur.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>310</record_id>
      <option_code>A</option_code>
      <record_title>Incorporation in Rate Schedules and Service Agreements</record_title>
      <record_content_desc>Section 8.23</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>310</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>23.	INCORPORATION IN RATE SCHEDULES AND SERVICE AGREEMENTS

These General Terms and Conditions are incorporated in and are a part of Transporter’s Rate Schedules, FT Agreements and IT Agreements. To the extent that any provision of a transportation service agreement conflicts with any provision of the corresponding rate schedule, the provisions in the Rate Schedule shall govern except as to negotiated rates. To the extent that any provision in either a transportation service agreement or a Rate Schedule conflicts with any of these General Terms and Conditions, the General Terms and Conditions shall govern unless expressly waived and except as to negotiated rates.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>300</record_id>
      <option_code>A</option_code>
      <record_title>Construction of Facilities</record_title>
      <record_content_desc>Section 8.22</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>300</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>22.	CONSTRUCTION OF FACILITIES

22.1 	Obligation to Construct: Subject to the provisions of Section 5.2, Transporter will have no obligation to construct any facilities but if it elects to construct facilities on a Shipper’s behalf under this Tariff, it will do so on a nondiscriminatory basis, provided, however, Transporter shall not be obligated to construct facilities hereunder that will result in the expansion or diminishment of Transporter’s pipeline system or that will place Transporter at risk for recovering costs of facilities built to satisfy individual Shippers. Unless Transporter agrees otherwise, Transporter will own and operate all facilities constructed.

22.2 	Cost of Facilities: Shippers which request service that requires construction of facilities by Transporter shall reimburse Transporter for the costs of preparing facility cost estimates (including any engineering or related study costs) and shall also reimburse Transporter for the costs of such facilities consistent with the provisions of the applicable Rate Schedule.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>380</record_id>
      <option_code>A</option_code>
      <record_title>Revenue Sharing Mechanism</record_title>
      <record_content_desc>Section 8.30</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>380</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>30.	REVENUE SHARING MECHANISM

Revenues collected by Transporter under Rate Schedule IT during any calendar year shall be subject to the following sharing requirements. 

30.1	Transporter shall retain all Rate Schedule IT capacity revenues collected attributable to:

(a) that portion of the applicable Rate Schedule IT rates representing variable costs; and

(b) any applicable surcharges. 

30.2	In the event Transporter receives interruptible transportation revenues in excess of the cost allocation described in Section 30.1 above in any one (1) Month, Transporter shall credit such excess revenues to those Shippers under Rate Scheduled FT and IT that are paying the maximum recourse rate; provided, however, no interruptible shipper shall receive a credit based solely on revenues from its maximum rate payments.  Each such maximum rate FT or IT Shipper shall be allocated a proportionate share of the interruptible transportation revenue credit based upon the relationship of the total maximum rate payments received from each qualifying Shipper and the total of all such maximum rate revenues received by Transporter for the Month in which the interruptible transportation revenues are collected.  Negotiated Rate Shippers shall not be eligible for credits unless expressly provided in their negotiated rate agreements.  In the event there are no qualifying shippers during a calendar year, Transporter shall retain all revenues.  

30.3	The revenues to be credited, if any, shall be credited to those qualifying Shippers not later than April 15th of each year following the calendar year in which the revenues were collected, or if a credit cannot be applied, a cash refund shall be distributed.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>360</record_id>
      <option_code>A</option_code>
      <record_title>ACA Charge</record_title>
      <record_content_desc>Section 8.28</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>360</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>28.	ACA SURCHARGE

28.1 	Purpose: This Section of the General Terms and Conditions is filed pursuant to Section 154.402 and Part 382 (Subpart B) of the Commission’s Regulations under the Natural Gas Act and the Natural Gas Policy Act of 1978. The intent and purpose of this Section is to establish an Annual Charges Adjustment (ACA) provision under which Transporter can recover from its customers annual charges assessed to it by the Commission pursuant to Part 382 of the Commission’s Regulations (ACA Cost). All amounts assessed pursuant to Part 382 of the Commission’s Regulations shall be recorded in Account 928. Transporter will not seek to recover annual charges assessed to it pursuant to Part 382 of the Commission’s Regulations in an NGA Section 4 rate case. For the purpose of recovering annual charges assessed to Transporter pursuant to Part 382 of the Commission’s Regulations, this Section establishes an ACA  Surcharge as revised annually and posted on the Commission’s website at www.ferc.gov, which is incorporated by reference herein.

28.2 	Applicability: The ACA Surcharge shall be applicable to all transportation service performed by Transporter.

28.3 	Basis of the ACA Surcharge: The rates for all transactions specified in Section 28.2 hereof shall be adjusted by a unit charge to recover ACA Cost. Such unit charge shall be that increment, adjusted to Transporter’s pressure base and heating value, if required, which has been posted on the Commission’s website at www.ferc.gov. The ACA Surcharge shall be applied to the usage component of rates.

28.4 	Effective Date of Charge: The effective date of any change to the ACA Surcharge posted on the Commission’s website at www.ferc.gov shall be October 1. The ACA Surcharge shall be charged to Shippers only if Transporter has paid its annual ACA assessment.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>340</record_id>
      <option_code>A</option_code>
      <record_title>Negotiated Rates</record_title>
      <record_content_desc>Section 8.26</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>340</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>26.	NEGOTIATED RATES

26.1 	Preconditions to Negotiated Rates: Rates to be charged by Transporter for service to any Shipper under Rate Schedule FT or IT may deviate in either form or level or both from the applicable maximum and/or minimum rate level in this Tariff, subject to the following provisions:

(a)	Transporter and Shipper have executed a valid transportation service agreement containing therein or in a related agreement a specific mutual understanding that Negotiated Rate(s) will apply to service for that Shipper;

(b)	At the time of execution of the transportation service agreement (or any amendment thereto), which first provides for the applicability to Shipper of Negotiated Rates, service was available pursuant to the terms and conditions (not modified by this Section) of Rate Schedule FT;

(c)	Transporter will not negotiate terms and conditions of service under this Section; and

(d)	No later than the Business Day on which Transporter commences service at such Negotiated Rate(s) (or if the day on which Transporter commences service is not a Business Day, then no later than the next Business Day after Transporter commences service), Transporter will file a tariff record advising the Commission of such Negotiated Rate, stating the name of Shipper, the type of service, the primary receipt and delivery point(s) applicable to the service, the quantity of the gas to be transported, any other charges, and specifying in such transportation service agreement the rate (or the formula for calculating such rate) with sufficient specificity such that the rate in effect from time to time can be readily calculated. Either the tariff record must also incorporate a statement that the transportation service agreement does not deviate from the form of Service Agreement in any material respect, or Transporter must file the contract containing a material deviation.

26.2 Capacity Allocation

(a)	To the extent the revenue level pursuant to the Negotiated Rate provided for in Section 26.1 of these General Terms and Conditions, as calculated under Subsection (b) of this Section 26.2, exceeds the comparable revenue at the Recourse Rate, the Shipper bidding or paying such Negotiated Rate(s) shall be treated, for all capacity allocation purposes, as if the rate(s) bid or paid had been equal to the Recourse Rate. Any Shipper, existing or new, paying the Recourse Rate(s) has the same right to capacity as a Shipper willing to pay a higher Negotiated Rate. Where the Negotiated Rate(s) results in revenue which is greater than the Recourse Rate during certain portions of the relevant evaluation period but less than the revenue at the Recourse Rate during other portions of the relevant evaluation period (but the revenue pursuant to the Negotiated Rate(s) equals or exceeds that which would be generated at the Recourse Rate for the entire evaluation period), the value of bids and requests at the Negotiated Rate(s) or rate(s) under a Negotiated Rate Formula shall be evaluated as though the Recourse Rate applied under such bid or request for the entire evaluation period. Where the Negotiated Rate results in revenue which is less than revenue at the Recourse Rate over the relevant evaluation period, the value of the bids or requests at the Negotiated Rate(s) shall be evaluated based on such lower revenue and shall be afforded a correspondingly lower priority than bids or requests at the Recourse Rate.

(b)	In evaluating bids or requests for firm service, or in allocating capacity among competing requests for firm service where one or more bids is at a Negotiated Rate, Transporter will consider, in assigning value to such bid(s) or requests, only reservation or demand charge revenue or other revenue which is guaranteed to be received by Transporter (i.e., a minimum throughput condition or minimum invoice). For capacity evaluation purposes, the net present value of any such bid for firm service shall be capped by the net present value of the maximum applicable reservation rate for such service over the contract term bid.

26.3 	Accounting for Costs and Revenues: The allocation of costs to, and the recording of revenues from, service at Negotiated Rate(s) will follow Transporter’s normal practices associated with all of its services under this Tariff. Transporter will maintain separate records of Negotiated Rate transactions for each billing period. These records shall include the quantity transported, the billing determinants, the rates charged and the revenue received associated with such transactions. Transporter will separately identify such transactions in Statements G, I and J (or their equivalent) filed in any general rate proceeding.

26.4 	Capacity Release Revenue: Transporter and Shipper may agree hereunder to a Negotiated Rate which includes payment obligations or crediting mechanisms in the event of a capacity release which vary from those set out in Section 11 of these General Terms and Conditions. Nothing in the foregoing sentence, however, shall authorize Transporter or Shipper to violate the Commission’s policy with respect to the negotiation of terms and conditions of service.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>350</record_id>
      <option_code>A</option_code>
      <record_title>Acquired Capacity</record_title>
      <record_content_desc>Section 8.27</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>350</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>27.	ACQUIRED CAPACITY

27.1 	Transporter may from time to time enter into transportation or storage arrangements with upstream or downstream entities, including other interstate pipelines, intrastate pipelines, or local distribution companies (Acquired Capacity). Transporter may use Acquired Capacity for its system operational needs and to render service to its customers in its discretion. Except as provided in Section 27.2, Transporter states that, if it transports gas for others using Acquired Capacity, it will apply to such services the same rates and tariffs as are applicable to on-system Shippers, as such rates and tariffs may change from time to time, and may additionally charge an administrative and overhead charge. For purposes of any use of Acquired Capacity covered by this Section, the “shipper must hold title” requirement is waived.

27.2 	Nothing herein shall be read to preclude Transporter from filing with the Commission for different tariff provisions applicable to any service which Transporter provides using Acquired Capacity; provided, however, that the waiver of the “shipper must hold title” requirement hereunder shall not apply in such a circumstance and Transporter will be required to seek a case-specific waiver of that requirement from the Commission.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>220</record_id>
      <option_code>A</option_code>
      <record_title>Pressures and Availability of Delivery Points</record_title>
      <record_content_desc>Section 8.14</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>220</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>14.	PRESSURES AND AVAILABILITY OF DELIVERY POINTS

Unless otherwise agreed between Transporter and Shipper, Shipper shall deliver gas to Transporter at the pressure required from time to time to enable the gas to enter Transporter’s facilities at the receipt point(s). Unless otherwise agreed between Transporter and Shipper, Transporter shall deliver gas to Shipper at Transporter’s line pressure existing at the delivery point(s), subject to Transporter’s protecting its operational integrity and to minimum pressure requirements, if any, specified in the transportation service agreement.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>230</record_id>
      <option_code>A</option_code>
      <record_title>Excuse of Performance and Remedies</record_title>
      <record_content_desc>Section 8.15</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>230</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>15.	EXCUSE OF PERFORMANCE AND REMEDIES

15.1	Relief From Liability: If by reason of force majeure, either party hereto is rendered unable, wholly or in part, to carry out its obligations under this Tariff or any service agreement (not including payment obligations), and if such party gives notice and reasonably full particulars of such force majeure in writing or by electronic mail to the other party promptly after the occurrence of the cause relied on, the party giving such notice, so far as and to the extent that it is affected by such force majeure, shall be relieved of its performance obligations under this Tariff affected by such force majeure event and shall not be liable in damages to the other party during the continuance of any inability so caused; provided, however, that such cause shall be remedied with all reasonable dispatch.

15.2	As used in this Tariff, “force majeure” shall mean acts of God, strikes, lockouts or other industrial disturbances; acts of public enemy, wars, blockades, insurrections, riots, epidemics, landslides, lightning, earthquakes, fires, storms, crevasses, floods or washouts; arrests and restraints imposed by the government, either federal, state or local, civil or military; the binding order of any court, legislative body, or governmental authority that has been resisted in good faith by all reasonable legal means and provided that such government restraints or orders directly or indirectly contribute to or result in either party having to take one-time, non-recurring actions that cause such party to be unable to perform its obligations; vandalism, sabotage, acts of terrorism or civil disturbances; relocation of facilities; breakage or accidents to machinery or lines of pipe; failure of surface equipment or pipelines; accidents, breakdowns or the inability of a party to obtain necessary material, supplies, permits, rights-of-way or labor to perform or comply with any obligation or condition of this Tariff; and any other causes, whether of the kind enumerated in this Tariff or otherwise, that are not reasonably within the control of the party claiming suspension. A claim of force majeure affecting the performance of a transportation service agreement under this Tariff by either party shall not relieve such party of liability in the event of such party’s failure to use due diligence to remedy the situation and to remove the cause or contingencies affecting such performance in an adequate manner and with all reasonable dispatch, nor shall such causes or contingencies affecting such performance relieve any party from its obligations to make payments as specified in this Tariff.  It is understood and agreed that the settlement of strikes or lockouts shall be entirely within the discretion of the party having the difficulty, and that the above requirement that any force majeure shall be remedied with all reasonable dispatch shall not require the settlement of strikes or lockouts by acceding to the demands of the opposing party when such course is inadvisable in the discretion of the party having the difficulty.  Planned or scheduled testing, repairs, or maintenance do not constitute a force majeure event.

15.3 	Liabilities Not Relieved: Such causes or contingencies affecting the performance of said transportation service agreement by either party, however, shall not relieve it of liability in the event of its contributory negligence or in the event of its failure to use due diligence to remedy the situation and remove the cause in an adequate manner and with all reasonable dispatch, nor shall such causes or contingencies relieve either party of its obligations to meet the quality standards set forth in these General Terms and Conditions, nor shall such causes or contingencies affecting the performance of said transportation service agreement relieve either party from its obligations to make payments of reservation charges or other amounts under the applicable transportation service agreement or otherwise, nor shall such causes or contingencies relieve either party of liability unless such party shall give notice and full particulars of the same in writing or by fax to the other party as soon as possible after the occurrence relied on.  Provided further that Transporter may suspend performance hereunder to the extent required to make necessary or reasonably desirable inspections, alterations, or repairs to any part of the pipeline or other facilities and to make any required modifications thereto (each a “Scheduled Maintenance Event”). Transporter shall give Shipper reasonable notice of its intention to suspend its performance hereunder, except in cases of emergency where such notice is impracticable or in cases where the operations of Shipper will not be affected; to the extent reasonably possible Transporter shall entertain any reasonable requests of any Shipper that has firm transportation service as to minor rescheduling of Scheduled Maintenance Events in order to mitigate (to the extent possible) the potential adverse affects of a Scheduled Maintenance Event on such Shipper.

15.4	Reservation Fee Adjustment:  Except as provided in Section 15.3 of these General Terms and Conditions, in the event Transporter fails to redeliver on any Gas Day the quantity of gas received at the primary receipt point for Shipper’s account, less Gas Retainage, and nominated to the primary delivery point, up to the FT MDQ, the reservation fee shall be decreased by an amount equal to the reservation fee on a 100 percent load factor basis for that Gas Day multiplied by the quantity received, less Gas Retainage, and not redelivered. The 100 percent load factor reservation fee shall be adjusted on a proportionate basis in the case of an executed service agreement containing a negotiated reservation fee.  Transporter shall provide partial reservation charge credits if its failure to deliver is a result of an Operational Flow Order in effect on such Gas Day due to a force majeure event outside Transporter’s control (subject to Section 15.5(b) that was not caused by Shipper.  If, however, Transporter and Shipper mutually agree, Transporter may allow Shipper to transport make-up gas with an agreed-upon period of time in which event Transporter shall be relieved of its obligation to provide a reservation fee adjustment.

15.5	Transporter shall not be obligated to adjust the reservation fee pursuant to Section 15.4 of these General Terms and Conditions when Transporter’s failure to deliver:

(a) 	is based on events due solely to that  Shipper or due solely to the upstream or downstream pipeline and outside the control of Transporter; or

(b) 	occurs either (i) within ten days following a force majeure event as contemplated by Section 15.1 of these General Terms and Conditions or (ii) prior to the date Transporter has or should have, in the exercise of due diligence, overcome the force majeure event, whichever occurs first.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>210</record_id>
      <option_code>A</option_code>
      <record_title>Warranty of Title to Ga</record_title>
      <record_content_desc>Section 8.13</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>210</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>13.	WARRANTY OF TITLE TO GAS

Shipper warrants for itself, its successors and assigns, that it will have, at the time of delivery of gas hereunder, good title or the right to acquire title to the gas it receives or delivers and that the gas it receives or delivers hereunder shall be free and clear of all liens, encumbrances and claims whatsoever. In the event of a breach of this warranty, Shipper shall indemnify Transporter and save it harmless from all suits, actions, debts, accounts, damages, costs, losses, and expenses arising from or out of any adverse claims of any and all persons to said gas and/or to royalties, taxes, license fees or charges thereon applicable for such delivery of gas, and Shipper will indemnify Transporter and save it harmless from all taxes or assessments that may be levied and assessed upon such delivery and which are by law payable by, and the obligation of, the party making such delivery. If Shipper’s title or right to deliver gas to be transported is questioned or involved in any action, Shipper shall not qualify for nor be eligible to continue to receive service until such time as Shipper’s title or right to deliver is free from question; provided, however, Transporter shall allow Shipper to qualify for or continue receiving service under this Tariff if Shipper furnishes a bond satisfactory to Transporter. Title to the gas received by Transporter at the receipt point(s) shall not pass to Transporter, except for title to gas delivered for Gas Retainage, which shall pass to Transporter upon delivery at the receipt point(s).</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>190</record_id>
      <option_code>A</option_code>
      <record_title>Temporary Release or Permanent Assignment of Rights to Firm</record_title>
      <record_content_desc>Section 8.11</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>190</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>11.	TEMPORARY RELEASE OR PERMANENT ASSIGNMENT OF RIGHTS TO FIRM TRANSPORTATION SERVICE

11.1 	Applicability: This Section 11 implements in principle the Commission’s Regulations at 18 C.F.R. Section 284.8 and is applicable to any Shipper that holds rights to firm transportation under Rate Schedule FT that elects temporarily to release or permanently to assign all or a portion of such firm transportation rights (“Releasing Shipper”). The term “release” or “released” shall apply to permanent assignments as well as temporary releases unless otherwise noted. A Releasing Shipper shall have the right to release any portion of its firm transportation rights and obligations but only to the extent that the rights so released are acquired by another party pursuant to the provisions of this Section 11 and such party executes a transportation service agreement with Transporter. Such party shall be referred to herein as “Replacement Shipper”. A person that desires to bid on and obtain firm transportation rights released under the provisions of this Section 11 shall be known as a “Bidder.”

11.2 	Any Firm Shipper desiring to release all or part of its capacity rights may do so at its option by either pre-arrangement with a Replacement Shipper or by use of a bidding procedure.

(a)	The following prearranged releases are exempt from the bidding procedure: (i) a release of capacity to an asset manager as defined in 18 C.F.R. Section 284.8(h)(4); (ii) a release of capacity to a marketer participating in a state-regulated retail access program as defined in 18 C.F.R. 284.8(h)(5); (iii) a release for more than one year at the maximum Tariff rate; and (iv) a release with a term of thirty-one (31) days or less, except rollovers. Any other capacity release and assignment shall require advance posting on Transporter’s internet-accessible Website. Releasing Shipper shall notify Transporter when it releases capacity to an asset manager or a marketer participating in a state-regulated retail access program, as defined in the Commission’s regulations. 

(b)	Where the capacity in question is the subject of a prearranged release transaction, it shall be posted pursuant to paragraph (c).  Such posting shall identify the Release Quantity, the rate to be paid, and any other information describing the nature of the prearranged release. Should Transporter within such posting period receive an offer from a creditworthy third party Bidder to pay a rate in excess of that reflected in the prearranged release transaction for the capacity in question, Transporter shall so notify the Releasing and Replacement Shippers, and Replacement Shipper will be afforded a period of one Business Day to advise Transporter of its willingness to match the higher offer. In any event, Transporter’s acceptance of such pre-arranged release shall be conditioned on the Replacement Shipper satisfying Transporter’s creditworthiness requirements and Releasing Shipper’s continued commitment to pay Transporter the difference between the rate contained in the Releasing Shipper’s FT agreement and, if lower, the rate to be paid by the Replacement Shipper. Capacity that is to be made available for release on other than a prearranged basis shall be posted for bids in accordance with the instructions of the Releasing Shipper.

(c)	For biddable releases in which the Replacement Shipper satisfies Transporter’s creditworthiness requirements and Releasing Shipper commits to pay Transporter the difference between the rate Contained in Shipper’s FT agreement and, if lower, the rate to be paid by the Replacement Shipper, the following timeline shall apply:

(1)	For biddable releases (1 year or less):

(i)	Offers should be tendered such that they can be posted by 9:00 a.m. on a Business Day.
(ii)	Open season ends at 10:00 a.m. on the same or a subsequent Business Day.
(iii)	Evaluation period begins at 10:00 a.m. during which any contingencies are eliminated, determination of best Bid is made, and ties are broken. If no match is required, the evaluation period ends and the Award is posted by 11:00 a.m.
(iv)	Where match is required, the match is communicated by 11:00 a.m., the match response occurs by 11:30 a.m., and the Award is posted by 12:00 Noon.
(v)	The contract is issued within one hour of the Award posting (with a new contract number, when applicable).
(vi)	Nomination is possible beginning at the next available nomination cycle for the effective date of the contract.

(2)	For biddable releases (more than 1 year):

(i)	Offers should be tendered such that they can be posted by 9:00 a.m. on a Business Day.
(ii)	Open season shall include no less than three 9:00 a.m. to 10:00 a.m. time periods on consecutive Business Days.
(iii)	Evaluation period begins at 10:00 a.m. during which any contingencies are eliminated, determination of best Bid is made, and ties are broken. If no match is required, the evaluation period ends and the Award is posted by 11:00 a.m.
(iv)	Where match is required, the match is communicated by 11:00 a.m., the match response occurs by 11:30 a.m., and the Award is posted by 12:00 Noon.
(v)	The contract is issued within one hour of the Award posting (with a new contract number, when applicable).
(vi)	Nomination is possible beginning at the next available nomination cycle for the effective date of the contract.

(d)	The posting of prearranged deals that are not subject to bid are due no later than one hour prior to the ·nomination deadline for the applicable cycle, pursuant to NAESB WGQ Standard No. 1.3.2. 
(i)	The posting deadlines are:

a.	Timely Cycle 12:00 Noon
b.	Evening Cycle 5:00 p.m.
c.	lntraday 1 Cycle 9:00 a.m.
d.	lntraday 2 Cycle 1:30 p.m.
e.	lntraday 3 Cycle 6:00 p.m.

(ii)	The contract is issued within one hour of the Award posting (with a new contract number, when applicable).
(iii)	Nomination is possible beginning at the next available nomination cycle for the effective date of the contract.

	
11.3 	Submission of Release Documents: Parties shall submit all necessary information, release requests and bids to Transporter for its information via electronic means acceptable to Transporter. In the case of prearranged releases, the Releasing Shipper shall submit with its release request complete documentation consistent with this Tariff and submit it with the Replacement Shipper’s signature to Transporter for review and approval. In the case of releases subject to bidding, the Releasing Shipper shall submit with its release adequate documentation consistent with this Tariff that has been completed except for the price and identity of the winning Bidder, which Transporter shall complete upon award of the release. E-mail addresses shall be supplied to Transporter by the Releasing Shipper, any prearranged Replacement Shipper and all Bidders for released capacity.

11.4 	Marketing of Released Capacity: Transporter shall have no obligation to market any capacity available to be released by a Releasing Shipper. Nevertheless, Transporter may agree to market capacity for a Releasing Shipper and may negotiate a fee with the Releasing Shipper for such service. Any marketing services rendered by Transporter will be provided on a non-discriminatory basis.

11.5 	Further Conditions on Release of Transportation:

(a)	Persons participating in this capacity release program agree to be bound by and shall comply with the terms and conditions of this Tariff, and all applicable Commission rules, orders and regulations.

(b)	All terms and conditions in all release requests must be objectively stated, applicable to all Bidders and nondiscriminatory.

(c)	The minimum term for release shall be one Day and the maximum term shall be the remaining term of the Releasing Shipper’s transportation service agreement.

(d)	There is no maximum rate for any capacity release for a term of one year or less if the release is to take effect on or before one year from the date on which Transporter is notified. The maximum rate for any capacity release for a term of more than one year shall be the applicable maximum demand charge and usage charges, as well as all other applicable rates, charges, and surcharges set forth in this Tariff, notwithstanding any discount with respect to such applicable rates, charges or surcharges then in effect for the Releasing Shipper. Alternatively, releases may be on the basis of a volumetric charge, up to the 100% load factor derivative of the maximum reservation and usage charges. No other rate form will be permitted for a release. Except for volumetric rates, no release may be on a Negotiated Rate basis, even if the Releasing Shipper is paying a Negotiated Rate. Converting a daily rate to a monthly rate is accomplished by multiplying the daily rate times 365; dividing the result by 12; and taking the remainder out to 5 decimal places. Converting a monthly rate to a daily rate is accomplished by multiplying the monthly rate times 12; dividing the result by 365; and taking the remainder out to 5 decimal places and rounding up or down.

(e)	

(i)	All terms and conditions of all releases must be consistent with the terms and conditions of the Releasing Shipper’s FT Agreement and with this Tariff, including the provisions on nominations and scheduling of transportation and curtailment of service.

(ii) 	Bids are binding until written or electronic notice of withdrawal is received by Transporter. Bids cannot be withdrawn after the bid period ends.

(iii)	Release offers are binding until written or electronic notice of withdrawal is received by Transporter. The Releasing Shipper has the right to withdraw its offer during the bid period, where unanticipated circumstances justify and no minimum bid has been made.

(iv) 	Transporter will post offers and bids, including prearranged deals, upon receipt. A Releasing Shipper may request a later posting time for posting of such offer, and Transporter will support such request insofar as it comports with the standard timeline set forth in Section 11.2(c) of the General Terms and Conditions of this Tariff.

(v)	A Releasing Shipper may not specify an extension of the original bid period or the pre-arranged deal match period, without posting a new release.

(vi)	The Releasing Shipper should specify which one of the following methods is acceptable for bidding on a given capacity release offer: 

(1) 	Non-Index-based release - dollars and cents, 
(2) 	Non-index-based release - percentage of maximum rate, or 
(3) 	Index-based formula as detailed in the capacity release offer. 

The bids for the given capacity release offer should adhere to the method specified by the Releasing Shipper. The Bidder may bid the maximum reservation rate, in the Transportation Service Provider’s Tariff or general terms and conditions, as an alternative to the method specified by the Releasing Shipper, except when the release is index-based for a term of one year or less or utilizes market-based rates.

(vii)	For the capacity release process, only the following methodologies are required to be supported by capacity release service providers and provided to Releasing Shippers as choices from which they may select and, once chosen, should be used in determining the awards from the bid(s) submitted. They are: 

(1) 	highest rate, 
(2) 	net revenue and 
(3) 	present value. 

For index-based capacity release transactions, the Releasing Shipper should provide the necessary information and instructions to support the chosen methodology. Other choices of bid evaluation methodology (including other releasing shipper defined evaluation methodologies) can be accorded similar timeline evaluation treatment at the discretion of the capacity release service provider. However, the capacity release service provider is not required to offer other choices or similar timeline treatment for other choices, nor, is the capacity release service provider held to the timeline should the Releasing Shipper elect another method of evaluation.

(f)	Notwithstanding anything herein to the contrary, Releasing Shippers shall remain responsible for payment of all demand charges for released transportation unless Transporter consents to a permanent release and the permanent release has been validly implemented. Transporter and Shipper may, in connection with their agreement to a Negotiated Rate under an FT Agreement, agree upon Releasing Shipper’s payment obligations and crediting mechanisms in the event of a capacity release that vary from or are in addition to those set forth in this Section. In such event, the Releasing Shipper shall receive a demand credit equaling the demand dollars for which Transporter collects from the Replacement Shipper. A demand rate for the purposes of this Section 11 consists of:

(i) 	the base demand rate, and 
(ii) 	all applicable surcharges. 

Any discount from said rate comes first off the surcharges and then off the base demand rate. Therefore, a Releasing Shipper paying a discounted rate is only entitled to receive any revenues from the release of its capacity that exceed the amount of the applicable’ surcharges.

(g)	Transporter shall invoice a Replacement Shipper in accordance with Section 10 of these General Terms and Conditions based upon the rates, charges, and surcharges incorporated in the transportation service agreement between Transporter and the Replacement Shipper. The usage charges for the Replacement Shipper will include the maximum usage rate under the applicable rate schedule including all adjustments. If the Replacement Shipper fails to pay all or any portion of any invoice by the due date specified on the invoice, Transporter shall send an invoice to the Releasing Shipper for all unpaid amounts up to the amount of the Releasing Shipper’s reservation charge, which the Releasing Shipper shall pay to Transporter with interest on the unpaid amount, which interest shall be calculated from the date that Transporter credited the Releasing Shipper for the applicable demand charges in accordance with (f) above. The Releasing Shipper shall submit the payment within ten days after receipt of Transporter’s invoice. The Releasing Shipper shall be responsible for obtaining reimbursement for any such payment from the Replacement Shipper. Failure of either the Replacement Shipper or the Releasing Shipper to pay invoices shall entitle Transporter to exercise the remedies available under the applicable transportation service agreement and this Tariff, including suspension or termination of service to the Releasing Shipper and/or the Replacement Shipper, as well as any other remedies available to Transporter.

(h)	Except in case of permanent assignment, any increase in Transporter’s rates, charges, and surcharges shall remain the responsibility of the Releasing Shipper; provided, however, that the Releasing Shipper may provide in its release request for the rates, charges or surcharges for released service rights to increase in accordance with such increase in Transporter’s rates, charges, and surcharges. Any refunds of any rates or charges ordered by the Commission shall be paid by Transporter to the Releasing Shipper and/or the Replacement Shipper in the manner specified in the release request and incorporated in the transportation service agreement between Transporter and the Replacement Shipper.

(i)	Except in case of permanent assignment, Transporter shall accept nominations, schedule transportation, afford priority of service, and curtail service based on instructions and communications from the Releasing Shipper and the Replacement Shipper that are consistent with one another and with the terms and conditions of this Tariff and their respective transportation service agreements. If instructions or nominations from the Releasing Shipper and Replacement Shipper are inconsistent or conflicting, and if Transporter is unable to resolve the conflict prior to the time that it must take the required action, Transporter shall comply with the instructions of the Releasing Shipper; provided, however, that such instructions must not be inconsistent with this Tariff. The Releasing Shipper will indemnify Transporter against any claim or suit by the Replacement Shipper, its successors or assigns, arising from any action taken by Transporter in reliance upon the Releasing Shipper’s nominations and instructions and will hold Transporter harmless for any action taken by Transporter in reliance upon the nominations and scheduling instructions of the Replacement Shipper. The Replacement Shipper will indemnify Transporter against any claim or suit by the Releasing Shipper, its successors or assigns, arising from any action taken by Transporter in reliance upon the nominations and scheduling instructions of the Replacement Shipper and will hold Transporter harmless for any actions taken by Transporter in reliance upon the instructions of the Releasing Shipper.

(j)	Except in case of permanent assignment, Replacement Shippers may not change primary points or otherwise alter the underlying transportation service agreement without the consent of the Releasing Shipper. Replacement Shippers may use secondary points.

(k)	All transportation rights released hereunder shall be scheduled and curtailed as firm transportation service under Section 9 of these General Terms and Conditions. Interruption or curtailment of such released service shall be in accordance with interruption or curtailment of firm service under this Tariff and as prescribed by the terms of the release.

11.6 	Procedure for Manual Index-Based Capacity Release: The Releasing Shipper shall submit all the information necessary for an index-based capacity release to Transporter by e-mail, in accordance with this Tariff. Transporter will post a notice that provides the details of the index-based capacity release offer on its website. For biddable releases, a Bidder shall submit its bid to Transporter by e-mail. Transporter will manually evaluate any bids for an index-based capacity release, and award the capacity by the deadline prescribed by the Releasing Shipper, in accordance with this Tariff. Transporter will post details regarding the winning bid on its website.

11.7	Offers to Acquire Firm Capacity: Transporter agrees to post on its internet website as part of its Informational Postings, at an approved Replacement Shipper’s request, offers to purchase releasable firm capacity on a permanent or temporary basis.  Each offer will remain in the Informational Postings for at least (30) Business Days before it is removed, unless the requesting party notifies Transporter prior to the expiration of any thirty-day period that it wishes to extend the posting for an additional thirty (30) Business Days.  Such offers may be tendered electronically to the Transporter by email.  These offers must include, at a minimum, the following information:

(a)	The party’s complete contact information, 
(b)	The quantity(ies) requested, 
(c)	The date the released capacity is desired, 
(d)	The receipt and delivery point(s)), 
(e)	The rate per Dth being offered, and
(f)	Any other terms and conditions.

11.8	Recall Rights: Transporter shall provide the following recall notification periods for all released capacity subject to recall rights.

(a)	Timely Recall Notification:

(i)	A Releasing Shipper recalling capacity should provide notice of such recall to the Transporter and the first Replacement Shipper no later than 8:00 a.m. on the day that Timely Nominations are due;
(ii)	The Transporter should provide notification of such recall to all affected Replacement Shippers no later than 9:00 a.m. on the day that Timely Nominations are due.

(b)	Early Evening Recall Notification:

(i)	A Releasing Shipper recalling capacity should provide notice of such recall to the Transporter and the first Replacement Shipper no later than 3:00 p.m. on the day that Evening Nominations are due;
(ii)	The Transporter should provide notification of such recall to all affected Replacement Shippers no later than 4:00 p.m. on the day that Evening Nominations are due.

(c)	Evening Recall Notification:

(i)	A Releasing Shipper recalling capacity should provide notice of such recall to the Transporter and the first Replacement Shipper no later than 5:00 p.m. on the day that Evening Nominations are due; 
(ii)	The Transporter should provide notification of such recall to all affected Replacement Shippers no later than 6:00 p.m. on the day that Evening Nominations are due;

(d)	lntraday 1 Recall Notification:

(i)	A Releasing Shipper recalling capacity should provide notice of  such recall to the Transporter and the first Replacement Shipper no later than 7:00 a.m. on the day that lntraday 1 Nominations are due;
(ii)	The Transporter should provide notification of such recall to all affected Replacement Shippers no later than 8:00 a.m. on the day that lntraday 1 Nominations are due.

(e)	lntraday 2 Recall Notification:

(i)	A Releasing Shipper recalling capacity should provide notice  of  such recall to the Transporter and the first Replacement Shipper no later than 12:00 p.m. on the day that lntraday 2 Nominations are due;
(ii)	The Transporter should provide notification of such recall to all affected Replacement Shippers no later than 1:00 p.m. on the day that lntraday 2 Nominations are due.

(f)	lntraday 3 Recall Notification:

(i)	A Releasing Shipper recalling capacity should provide notice of such recall to the Transporter and the first Replacement Shipper no later than 4:00 p.m. on the day that lntraday 3 Nominations are due;
(ii)	The Transporter should provide notification of such recall to all affected Replacement Shippers no later than 5:00 p.m. on the day that lntraday 3 Nominations are due.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>200</record_id>
      <option_code>A</option_code>
      <record_title>Possession of Gas, Risk of Loss, Liability, and Limitation</record_title>
      <record_content_desc>Section 8.12</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>200</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>12.	POSSESSION OF GAS, RISK OF LOSS, LIABILITY, AND LIMITATION OF DAMAGES

12.1	As between Shipper and Transporter, Shipper shall be deemed to be in control and possession of gas and responsible therefore and shall hold Transporter harmless of and from any damage or injury caused thereby until the gas shall have been delivered to Transporter at the receipt point(s), after which Transporter shall be deemed to be in control and possession of such gas until its delivery to Shipper or for Shipper’s account at the delivery point(s) and while in such possession Transporter shall be responsible therefore and hold Shipper harmless of and from any damage or injury caused thereby so long as the quality of the same meets the specifications of this Tariff. Transporter shall have no responsibility with respect to any gas on account of anything which may be done, happen or arise with respect to said gas until it is received by Transporter. Shipper shall have no responsibility with respect to said gas after its receipt by Transporter on account of anything which may be done, happen or arise with respect to said gas after such receipt until its delivery to Shipper, or for Shipper’s account, at the delivery point(s), except in the event that said gas does not meet the specification of this Tariff. The point of the division of responsibility shall be the point of interconnection between the facilities of Transporter and Shipper or downstream transporter, or their respective agents, at the Receipt or Delivery Point(s), as applicable. The foregoing provisions of this Section shall not relieve either party from responsibility for acts of concurring negligence, gross negligence or willful misconduct of such party, its agents or employees.

12.2	Except for issues of force majeure, which shall be governed by Section 15 of this Tariff, and notwithstanding other provisions herein, each party (the “Indemnitor”) shall indemnify and hold harmless the other party and its related parties (collectively, the “Indemnitee”) from and against any and all claims, demands, causes of action, costs, actions, damages, losses, expenses or liabilities (“Claims”) reasonably and necessarily incurred by the Indemnitee to the extent such claims arise out of the Indemnitor’s acts or omissions associated with the performance of the Indemnitor’s obligations under this Tariff; provided, however, that this obligation shall not apply to the extent such claims arise out of the acts or omissions that are the result of the Indemnitee’s concurring negligence, gross negligence or willful misconduct, nor to the extent that strict liability is imposed upon the Indemnitee as a matter of law.

12.3	In the event that both Transporter and Shipper or their respective related parties are adjudicated negligent or otherwise at fault or strictly liable without fault with respect to damage or injuries sustained by a third-party claimant, the contractual obligation of indemnification set forth in Section 12.2 shall continue, but in such case the Transporter (as to itself and its related parties) and Shipper (as to itself and its related parties) shall each indemnify the other only for the percentage of responsibility for the damage or injuries adjudicated to be attributed to each Indemnitor.  It is intended that, to the extent in such a situation either Transporter or Shipper pays such third-party claimant for its costs, losses, liabilities, expenses and/or judgments attributed to the percentage of negligence, fault or liability of the other, these obligations of indemnification shall function as a contractual arrangement of contribution. This contractual arrangement of contribution shall survive settlement of an underlying third-party claim and, provided that notice and the right to participate in the investigation, defense, and resolution (including settlement) of such third-party claim has been provided, shall apply to voluntary settlements made by either Transporter or Shipper with the third party.

12.4	The indemnity provisions of this Section 12 shall survive the expiration or early termination of any transportation service agreement for a period of two (2) years from the date of such expiration or termination.

12.5	A party’s liability under this Tariff shall be limited to direct actual damages only and in no event will either party be liable under this Tariff, whether in contract or in tort, or otherwise, for any incidental, consequential, indirect, special or punitive damages or lost profits, by statute, in tort, or contract, under any indemnity provision or otherwise (except for third party claim indemnity obligations), all of the same being hereby expressly waived and negated. It is the intent of the parties that the limitations herein imposed on remedies and the measure of damages be without regard to the cause or causes related thereto, including the strict liability or negligence of any party, whether such strict liability or negligence be sole, joint or concurrent, or active or passive. To the extent any damages required to be paid hereunder are liquidated, the parties acknowledge that the damages are difficult or impossible to determine, or otherwise obtaining an adequate remedy is inconvenient, and the damages calculated hereunder constitute a reasonable approximation of the harm or loss.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>270</record_id>
      <option_code>A</option_code>
      <record_title>Applicable Regulations</record_title>
      <record_content_desc>Section 8.19</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>270</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>19.	APPLICABLE REGULATIONS

This Tariff, including these General Terms and Conditions, and the respective obligations of the parties under transportation service agreements, are subject to valid laws, orders, rules and regulations of duly constituted authorities having jurisdiction and are subject to change from time to time by addition, amendment or substitution as provided by law.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>280</record_id>
      <option_code>A</option_code>
      <record_title>Code Compliance</record_title>
      <record_content_desc>Section 8.20</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>280</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>20.	CODE COMPLIANCE

It shall be the Shipper’s sole responsibility to purchase, install, operate, and maintain Shipper’s facilities or equipment used for odorizing, handling, manufacturing, storing, transporting or distributing natural gas delivered to or received from Transporter in compliance with all applicable local, State, and Federal codes, rules, and regulations. Transporter shall not be held responsible for any damages resulting from Shipper’s noncompliance even if such is known to Transporter.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>260</record_id>
      <option_code>A</option_code>
      <record_title>Waivers and Future Default</record_title>
      <record_content_desc>Section 8.18</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>260</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>18. WAIVERS

18.1	Transporter may waive any rights hereunder or any obligations of Shipper as to any specific default that has already occurred, or case-by-case in advance as to any specific, temporary operation problem, on a basis which is not unduly discriminatory; provided that no waiver shall operate or be construed as a waiver of other or future rights or obligations, whether of a like or different character.

18.2	No waiver by either Shipper or Transporter of any one or more defaults by the other in performance of any of the provisions of the transportation service agreement shall operate or be construed as a waiver of any other existing or future default or defaults, whether of a like or of a different character.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>240</record_id>
      <option_code>A</option_code>
      <record_title>Notices and Communications</record_title>
      <record_content_desc>Section 8.16</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>240</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>16.	NOTICES AND COMMUNICATIONS

Except when these General Terms and Conditions require it to give notice through its Internet web site, any communication, notice, request, demand, statement or invoice provided for in this Tariff or in a transportation service agreement, or any notice that either Transporter or Shipper may desire to give to the other, shall be in writing and shall be considered as duly presented, rendered or delivered when delivered by email, or when sent by electronic medium or such other method mutually agreed upon between the parties, at such address as that party may designate. More specifically, the method of communication shall be as follows for the items designated:

(a)	Communications regarding the right of first refusal under Section 7 of these General Terms and Conditions shall be in writing and sent by electronic methods, ordinary mail or other physical delivery. The posting for bidding shall be on Transporter’s Internet web site.

(b)	Operational Flow Orders shall be communicated as provided in Section 8.3 of these General Terms and Conditions.

(c)	Nominations and all communications related to scheduling and curtailment shall be via email or by other electronic means acceptable to both parties.

(d)	Communications regarding invoicing and payment shall be consistent with Section 10 of these General Terms and Conditions.

(e)	The current Gas Retainage percentage and any change in such percentage shall be communicated via posting on Transporter’s web site.

(f)	Requests for service must be submitted in a form and manner consistent with Section 5.

(g)	Capacity release offers and bids must be communicated in accordance with the procedures set forth in Section 11.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>250</record_id>
      <option_code>A</option_code>
      <record_title>Modification</record_title>
      <record_content_desc>Section 8.17</record_content_desc>
      <record_version_num>1.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>250</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2018-05-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>17.	MODIFICATION

No modification of the terms and provisions of an executed transportation service agreement shall be made except by the execution of a superseding transportation service agreement or the execution of a superseding exhibit to such agreement.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>203</filing_id>
      <filing_title>Baseline new 2018 Volume 1</filing_title>
      <filing_type>730</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2018-05-01</current_effective_date>
      <ferc_order_date>2018-05-03</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>30</record_id>
      <option_code>A</option_code>
      <record_title>Preliminary Statement</record_title>
      <record_content_desc>Section 3</record_content_desc>
      <record_version_num>3.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>30</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2020-09-01</proposed_effective_date>
      <priority_order>710</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>PRELIMINARY STATEMENT

PPG Shawville Pipeline LLC, (“Transporter”), a Delaware limited liability corporation, owns and operates a natural gas pipeline under a certificate of public convenience and necessity issued by the Federal Energy Regulatory Commission (“Commission” or “FERC”). Such pipeline facilities (the “Pipeline”) located in Clearfield and Elk Counties, Pennsylvania extend from an interconnection with Eastern Gas Transmission and Storage, Inc. to an interconnection with a natural gas fired power plant in Shawville, Pennsylvania.  Transporter is engaged in the transportation of natural gas in interstate commerce. Transporter does not own or operate any storage facilities.  Transporter owns and operates other natural gas gathering facilities in Pennsylvania that are connected to its transmission line and are used for gathering of natural gas and not for transportation of natural gas in interstate commerce.

The location of Transporter’s facilities and the points at which it receives and delivers gas are shown on the System Map.</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>303</filing_id>
      <filing_title>Normal  Change in Rates and Forms 2021</filing_title>
      <filing_type>570</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2020-09-01</current_effective_date>
      <ferc_order_date>2021-09-02</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>90</record_id>
      <option_code>A</option_code>
      <record_title>Definition of Terms</record_title>
      <record_content_desc>Section 8.1</record_content_desc>
      <record_version_num>3.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>90</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2021-09-01</proposed_effective_date>
      <priority_order>710</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>GENERAL TERMS AND CONDITIONS

1.	DEFINITION OF TERMS

The following terms when used in this Tariff and in any transportation service agreement shall be construed to have the following meanings:

1.1	“Bidder” shall mean, depending upon the context, any person that submits a bid for released or newly available transportation capacity pursuant to these General Terms and Conditions or any person which submits a bid in a right of first refusal procedure under Section 7 of these General Terms and Conditions.

1.2	“British thermal unit” or “Btu” shall mean the amount of heat required to raise the temperature of one pound of water one degree Fahrenheit at a standard pressure of 14.73 dry psia at 60 degrees Fahrenheit.

1.3 	“Business Day” shall mean Monday through Friday, excluding Federal Banking Holidays for transactions in the U.S.

1.4	“Central Clock Time” and “CCT” shall mean Central Daylight Time when daylight savings time is in effect and Central Standard Time when daylight savings time is not in effect.

1.5 	“Confirmation” shall mean a communication that reflects the quantity of gas to be received or delivered on behalf of each Shipper at a receipt or delivery point.

1.6 	“Cubic foot” shall mean the volume of gas that occupies one cubic foot when such gas is at a temperature of 60 degrees Fahrenheit, and at a pressure of 14.73 points per square inch absolute [psia] and dry. 

1.7	“Daily Limit” shall mean the quantity specified in an Operational Flow Order at a receipt or delivery point.

1.8	“Day” and “Gas Day” shall mean a period of 24 consecutive hours, beginning and ending at 9:00 A.M. Central Clock Time.

1.9 	“Dekatherm” or “Dth” shall mean the quantity of heat energy that is equal to 1,000,000 Btu’s. The standard quantity for nominations, confirmation and scheduling is dekatherms per Gas Day.

1.10	“DTI” shall mean Dominion Transmission, Inc.

1.11	“Excess Overrun Charge” shall have the meaning set forth in Section 5.5 of Rate Schedule FT and Rate Schedule IT.

1.12	 “Gas Retainage Charge” shall mean a volumetric portion of the gas retained by the Transporter calculated by using the applicable Gas Retainage percentage set forth on the Notice of Rates multiplied by the dekatherms of natural gas received in the Month.

1.13	“Gas Retainage” shall mean the quantities of gas which Transporter retains to compensate it for any system gas used, which includes fuel gas or electricity for Transporter’s compressors or other system operation and gas lost and unaccounted for, as applicable. Transporter is to redeliver at delivery points the quantities of gas it receives from Shipper less Gas Retainage. The difference between Dth delivered to Transporter for transportation from all Shippers and Dth redelivered to all Shippers hereunder, shall be deemed part of the Gas Retainage. Each Shipper shall provide such Gas Retainage to the actual Dth of gas delivered by such Shipper to Transporter during the period covered by the thermal balance.

1.14	“Maximum Daily Quantity,” or “MDQ” where used herein or in a transportation service agreement shall mean the maximum daily quantity of natural gas that Transporter shall be obligated to transport on a firm basis under an FT Agreement. The MDQ shall also be subdivided to indicate the maximum daily quantity which Transporter shall be obligated to redeliver on a firm basis under the Agreement at a particular primary delivery point each Gas Day and the maximum daily quantity of gas that Transporter shall be obligated to receive at a particular primary receipt point each Gas Day.

1.15 	“Maximum Hourly Quantity” or “MHQ” shall be equal to the MDQ or MIQ (as applicable) divided by twenty-four (24).

1.16 	“Maximum Interruptible Quantity” or “MIQ” shall mean the maximum daily quantity that a Shipper may nominate under its IT Agreement.

1.17 	“Mcf” shall mean 1,000 cubic feet of gas.

1.18 	“Month” shall mean the period beginning at 9:00 A.M. CCT on the first day of the calendar month and ending at 9:00 A.M. CCT on the first day of the next succeeding calendar month.

1.19	”Natural Gas” or “Gas” shall mean any mixture of hydrocarbons or of hydrocarbons and noncombustible gases, in a gaseous state consisting primarily of methane.

1.20 	“Negotiated Rate” should mean a rate determined under Section 26 of these General Terms and Conditions.

1.21	“NFG” shall mean National Fuel Gas Supply, LLC.

1.22 	“Operational Flow Order(s)” or “OFO” shall mean an order issued by Transporter to alleviate conditions, inter alia, which threaten or could threaten the safe operations or system integrity, of the Transporter’s system or to maintain operations required to provide efficient and reliable service. An OFO may cover actions required of any Shipper or Shippers, pursuant to Section 8 of these General Terms and Conditions, in order to ensure deliveries of gas to all Shippers in accordance with their Scheduled Quantities or as required to maintain system integrity or when an interconnecting entity calls an OFO or takes similar action. Whenever the Transporter experiences these conditions, any pertinent order should be referred to as an Operational Flow Order.

1.23 	“Recourse Rate” shall mean the applicable maximum rate which would apply to a service but for agreement on a Negotiated Rate.

1.24 	“Release Quantity” shall mean the quantity that a Shipper releases under Section 11 of these General Terms and Conditions. The Release Quantity shall be stated in Dth per Day.
	
1.25 	“Releasing Shipper” shall mean any Shipper that releases capacity pursuant to the provisions of Section 11 in these General Terms and Conditions.

1.26 	“Replacement Shipper” shall mean any shipper that purchases temporarily or permanently released capacity pursuant to the provisions of Section 11 in these General Terms and Conditions.

1.27 	“Scheduled Quantity” shall mean the quantity of natural gas expressed in Dth per Day that Shipper nominates for receipt at a receipt point or redelivery to Shipper at a delivery point, and that Transporter schedules for receipt and/or redelivery.

1.28 	“Shipper” or “Shippers” shall mean any party receiving service pursuant to any of Transporter’s Rate Schedules and transportation service agreements.
	
1.29 	“Title,” if not otherwise addressed in the Transporter’s contract or Tariff, is the term used to identify the ownership of gas.

1.30 	“Total heating value”, when applied to a cubic foot of gas, shall mean the number of Btu’s produced by the complete combustion with air at constant pressure of one anhydrous (dry) cubic foot of gas under a pressure of 14.73 psia and a temperature of 60 degrees Fahrenheit and when the products of combustion are cooled to the initial temperature of the gas and air and the water formed by combustion is condensed to the liquid state.

1.31 	“Transporter” shall mean PPG Shawville Pipeline LLC.

1.32 	“Transportation Service Agreement” or “TSA” shall mean an IT Agreement or an FT Agreement, or both, depending upon the context. This term also includes IT or FT Agreements which reflect a Negotiated Rate and FT Agreements entered into with a Replacement Shipper. A transportation service agreement which includes a Negotiated Rate shall conform to the Form of Service Agreement set out in and appended to this Tariff, except for the special elements identified in Section 26 of these General Terms and Conditions. A transportation service agreement between Transporter and a Replacement Shipper shall conform to the Form of Service Agreement set out in this Tariff, except for the additional items required under Section 11 of these General Terms and Conditions, and provisions necessary to reflect the permissible terms and conditions of the specific release.

1.33 	“Year” shall mean a period of 365 consecutive Days beginning on the date natural gas is first delivered or is to be delivered under the gas transportation or other service contract, whichever is earlier, or on any anniversary thereof; provided, however, that any such year that contains a date of February 29 shall consist of 366 consecutive Days.</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>303</filing_id>
      <filing_title>Normal  Change in Rates and Forms 2021</filing_title>
      <filing_type>570</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2021-09-01</current_effective_date>
      <ferc_order_date>2021-09-02</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>390</record_id>
      <option_code>A</option_code>
      <record_title>Form of Service Agreement&amp;#58; FT and IT Agreement</record_title>
      <record_content_desc>Section 9</record_content_desc>
      <record_version_num>3.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>390</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2021-09-01</proposed_effective_date>
      <priority_order>710</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>Form of Service Agreement

(FOR RATE SCHEDULES FT, IT)
Contract No._____________

[FT / IT] TRANSPORTATION AGREEMENT

Dated: ________________

This [FT / IT] Transportation Agreement (this “Agreement”) is made and entered as of ___________, 20_____, between PPG Shawville Pipeline LLC, a Delaware limited liability corporation (“Transporter”) and _________________, a _____________ (“Shipper”).

NOW, THEREFORE, in consideration of the mutual covenants, rights and obligations set forth herein and other good and valuable consideration, the receipt, adequacy and sufficiency of which the parties hereto acknowledge, the parties hereto, intending to be legally bound, hereby agree as follows:

1.	Rate Schedule [FT / IT]: Subject to the terms of this Agreement and applicable General Terms and Conditions of Transporter’s FERC Gas Tariff (the “Tariff”; as the same may be amended or superseded in accordance with the rules and regulations of the Federal Energy Regulatory Commission (the “FERC”)), Transporter agrees to accept and receive daily on a firm ___ or interruptible ___ basis (check one), at the Receipt Point(s) (set forth on Exhibit A attached hereto) from Shipper or for Shipper’s account such quantity of natural gas as Shipper makes available up to the [Maximum Daily Quantity (“MDQ”)] [or][ Maximum Interruptible Quantity (“MIQ”)] set forth on Exhibit A, and to redeliver to or for the account of Shipper at the Delivery Point(s) (set forth on Exhibit A) an equivalent quantity of natural gas subject to the provisions of the Tariff (including retainage provisions).  Exhibit A may be amended from time to time by agreement between Shipper and Transporter, or in accordance with the rules, regulations, or other requirements mandated or approved by the FERC.

2.	Rates:  Transporter will provide the transportation service as required under this Agreement and Shipper shall pay the following rates, and all other generally applicable surcharges and charges (including the ACA surcharge) imposed by FERC:

Reservation Fee per Day (firm only) (check one), plus:
__________	 Maximum Tariff Rate; or
			__________	 Negotiated Rate (set forth on Exhibit A)
Usage Charge per Dth delivered (firm and interruptible) (check one), plus:
__________	 Maximum Tariff Rate; or
			__________	 Negotiated Rate (set forth on Exhibit A)
Gas Retainage Charge per Dth delivered (firm and interruptible) (check one):
_________	 Maximum Tariff Rate; or
			_________	 Negotiated Rate (set forth on Exhibit A)

Transporter shall have the right to propose, file and make effective with the FERC or any other body having jurisdiction, revisions to any applicable rate schedule, or to propose, file, and make effective superseding rate schedules for the purpose of changing the type of service (firm or interruptible), rate, charges, and other provisions thereof effective as to Shipper; provided, however, that the term, quantities, and Receipt Point(s) and Delivery Point(s) shall not be subject to unilateral change under this paragraph.  Said rate schedule or superseding rate schedule and any revisions thereof which shall be filed and made effective shall apply to and become a part of this Agreement.  The filing of such changes and revisions to any applicable rate schedule shall be without prejudice to any regulatory right, if applicable, of Shipper to contest or oppose such filing.

3.	Term:  Service under this Agreement shall commence as of __________________, [or when applicable, “This Agreement shall be effective as of the later of __________________, or the date that all of Transporter's _____________________________________ (insert project name) facilities necessary to provide firm transportation service to Shipper have been commissioned, tested, and are ready for service as determined in Transporter's discretion”] and shall continue in full force and effect until ________________________________ [or, when applicable, “shall remain in full force and effect for a term of ___________________”] [or, when applicable to Rate Schedule IT, “Service under this Agreement shall commence as of ______________________________, and shall continue from month to month thereafter until terminated by either Transporter or Shipper upon thirty days prior notice”].  Pre-granted abandonment shall apply upon termination of this Agreement, subject to any right of first refusal Shipper may have under the Commission’s regulations and Transporter’s Tariff.  [Insert any other applicable provisions related to term of service]

4.	Service Hereunder Will Be On Behalf Of (Check One):
	_________________ Shipper or
	_________________    Other: __________________________, a ____________________________________________________

5.	The Ultimate End Users Are (Check One):
	________ customers of the following LDC/pipeline company(ies): ______________________________________________________________;
________ customers in these states: ___________________________________________________________________; or
	________ customers within any state in the continental U.S.

6.	This Agreement Supersedes And Cancels The Following Agreement(s) (If Applicable):
_______________________________________________________________________________
													
7.	Capacity Rights For This Agreement Were Released From (If Applicable): ___________________________________________________________________

8.	Obligation Of Shipper To Pay The Reservation Fee Shall Commence On The Earlier Of:
	(a) _______________________________________________, or
	(b) the date capacity to render the service hereunder is available on Transporter’s system.

9.	Shipper shall be responsible for its pro rata share of any costs or charges incurred and entitled to its pro rata share of any revenues received by Transporter under its Operational Balancing Agreements with upstream or downstream pipelines as a result of any difference between the quantities of Gas received by Transporter on behalf of Shipper at the Receipt Point(s) and the quantities of Gas delivered by Transporter on behalf of Shipper at the Delivery Point(s).

10.	Transporter’s Address:				Shipper’s Address:
PPG Shawville Pipeline LLC
3500 East College Ave. 
Suite 1300 Box 6
State College, PA 16801, 
Phone - 814 470 6330
Fax – 814 235 3342  

11.	The above-stated Rate Schedule and the General Terms and Conditions of Transporter’s FERC Gas Tariff, as approved by the FERC (or its successor) and as either may be revised from time to time, control this Agreement and are incorporated herein.  The attached Exhibit A is part of this Agreement.  This Agreement is subject to any and all applicable rulings by the FERC (or its successor) and any other governmental authorities having jurisdiction.  

12.	THIS AGREEMENT SHALL BE CONSTRUED AND GOVERNED BY THE LAW OF PENNSYLVANIA, AND NO STATE LAW SHALL APPLY TO REACH A DIFFERENT RESULT.

13.	Service under this Agreement shall not commence until Transporter has received all necessary authorizations from the FERC (or its successor) and any other governmental authorities having jurisdiction in the form satisfactory to Transporter in its sole discretion and all facilities are in place and ready to render the service to be provided hereunder.

14.	This Agreement states that entire agreement between the parties and no waiver, representation or agreement shall affect this Agreement unless it is in writing.  Shipper shall provide the actual end user purchaser name(s) to Transporter if Transporter must provide them to the FERC (or its successor).

	IN WITNESS WHEREOF, this Agreement is signed as of the date first written above and agreed to by the parties.

TRANSPORTER:					SHIPPER:
PPG Shawville Pipeline LLC				[__________________________________]

												
By: _________________________________		By: __________________________
Its: __________________________ 			Its: ______________________



EXHIBIT A

TO (FT / IT) TRANSPORTATION AGREEMENT

DATED _____________

Shipper:					_______________

Contract No.:					_______________

Primary Receipt Point (check one):	_______________ NFG M&amp;R station meter #PSP1121471
  [MAOP of ________]

						_______________ DTI M&amp;R station meter #5192401
  [MAOP of ________]

Primary Receipt Point MDQ (firm)/MIQ (interruptible):	_____________  Dth/Day

Receipt Pressure, Assumed Atmospheric Pressure: Natural gas to be delivered to Transporter at the Receipt Point shall be at a delivery pressure sufficient to enter Transporter’s facilities at the pressure maintained from time to time, but Shipper shall not deliver gas at a pressure in excess of the Maximum Allowable Operating Pressure (MAOP) stated for the Receipt Point. The measuring party shall use or cause to be used an assumed atmospheric pressure corresponding to the elevation at such Receipt Point.

Primary Delivery Point (check one):	 	_______________ NFG M&amp;R station meter #PSP1121471

						_______________ DTI M&amp;R station meter #5192401

_______________Interconnect with NRG REMA LLC plant line in Goshen Township, Pennsylvania

Primary Delivery Point MDQ (firm)/MIQ (interruptible): 	_____________ Dth/Day (subject to the provisions of the Tariff, including retainage provisions).

Delivery Pressure, Assumed Atmospheric Pressure: Natural gas to be delivered by Transporter to Shipper, or for Shipper’s account, at the Delivery Point shall be at the pressures available in Transporter’s pipeline facilities from time to time.  The measuring party shall use or cause to be used an assumed atmospheric pressure corresponding to the elevation at such Delivery Point.

Rates (check one):				____________ (rates described in Transportation Agreement)
						____________ (negotiated rate described as follows:
							__________________________________________)		
Supersedes Prior Version of Exhibit A, Dated: 	_______________

TRANSPORTER:					SHIPPER:
PPG Shawville Pipeline LLC				[__________________________________]

												
By:							By: __________________________
Its: ______________________				Its: __________________________</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>303</filing_id>
      <filing_title>Normal  Change in Rates and Forms 2021</filing_title>
      <filing_type>570</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2021-09-01</current_effective_date>
      <ferc_order_date>2021-09-02</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>10</record_id>
      <option_code>A</option_code>
      <record_title>Title Page</record_title>
      <record_content_desc>Section 1</record_content_desc>
      <record_version_num>3.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>10</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2024-04-01</proposed_effective_date>
      <priority_order>730</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>FERC GAS TARIFF

ORIGINAL VOLUME NO. 1

OF

PPG SHAWVILLE PIPELINE LLC

FILED WITH THE

FEDERAL ENERGY REGULATORY COMMISSION






Communications Concerning This Tariff
Should Be Addressed To:


Josh Hull, CEO
Penn Production Group LLC
3500 East College Ave. 
Suite 1300 Box 6
State College, PA 16801
814 470 6330
jhull@pennproduction.com &lt;mailto:jhull@pennproduction.com&gt;</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>305</filing_id>
      <filing_title>Normal filing 2024 Clean-up</filing_title>
      <filing_type>570</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2024-04-01</current_effective_date>
      <ferc_order_date>2024-04-02</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>40</record_id>
      <option_code>A</option_code>
      <record_title>System Map</record_title>
      <record_content_desc>Section 4</record_content_desc>
      <record_version_num>3.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>40</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2024-04-01</proposed_effective_date>
      <priority_order>730</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data>e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcdWMxXGRlZmYxXGFkZWZmMVxkZWZsYW5nMFxkZWZsYW5nZmUwXGFkZWZsYW5nMHtcZm9udHRibA0Ke1xmMFxmc3dpc3NcZmNoYXJzZXQwXGZwcnEye1wqXHBhbm9zZSAwMjBCMDYwNDAyMDIwMjAyMDIwNH1BcmlhbDt9DQp7XGYxXGZyb21hblxmY2hhcnNldDBcZnBycTJ7XCpccGFub3NlIDAyMDIwNjAzMDUwNDA1MDIwMzA0fVRpbWVzIE5ldyBSb21hbjt9DQp7XGYyXGZzd2lzc1xmY2hhcnNldDBcZnBycTJ7XCpccGFub3NlIDAyMEYwNTAyMDIwMjA0MDMwMjA0fUNhbGlicmk7fQ0Ke1xmM1xmc3dpc3NcZmNoYXJzZXQwXGZwcnEye1wqXHBhbm9zZSAwMjBCMDYwNDAzMDUwNDA0MDIwNH1WZXJkYW5hO30NCntcZjRcZnJvbWFuXGZjaGFyc2V0MlxmcHJxMntcKlxwYW5vc2UgMDUwNTAxMDIwMTA3MDYwMjA1MDd9U3ltYm9sO319DQp7XGNvbG9ydGJsO1xyZWQwXGdyZWVuMFxibHVlMDtccmVkNzBcZ3JlZW4xMjBcYmx1ZTEzNDt9DQp7XHN0eWxlc2hlZXR7XHMwXGx0cnBhclxpdGFwMFx3aWRjdGxwYXJccWxcbGkwXHJpMFxsaW4wXHJpbjBcc2ExNjBcc2wyNTlcc2xtdWx0MVxjYnBhdDBccnRsY2hcYWYxXGFmczIyXGx0cmNoXGYxXGZzMjIgTm9ybWFsO317XCpcY3MxMFxhZGRpdGl2ZSBEZWZhdWx0IFBhcmFncmFwaCBGb250O317XHMxNlxsdHJwYXJcaXRhcDBcbm93aWRjdGxwYXJccWxcbGkwXHJpMFxsaW4wXHJpbjBcY2JwYXQwXHJ0bGNoXGFmMFxhZnMyNFxsdHJjaFxmMFxmczI0IFtOb3JtYWxdO317XHMxN1xsdHJwYXJcaXRhcDBcd2lkY3RscGFyXHFsXGxpMFxyaTBcbGluMFxyaW4wXHNhMTYwXHNsMjU5XHNsbXVsdDFcdHFjXHR4NDY4MFx0cXJcdHg5MzYwXGNicGF0MFxydGxjaFxhZjFcYWZzMjJcbHRyY2hcZjFcZnMyMlxzYmFzZWRvbjAgaGVhZGVyO317XHMxOFxsdHJwYXJcaXRhcDBcd2lkY3RscGFyXHFsXGxpMFxyaTBcbGluMFxyaW4wXHNhMTYwXHNsMjU5XHNsbXVsdDFcdHFjXHR4NDY4MFx0cXJcdHg5MzYwXGNicGF0MFxydGxjaFxhZjFcYWZzMjJcbHRyY2hcZjFcZnMyMlxzYmFzZWRvbjAgZm9vdGVyO317XCpcY3MxOVxydGxjaFxhdWxcYWNmMlxsdHJjaFx1bFxjZjJcYWRkaXRpdmVcc2Jhc2Vkb24xMCBIeXBlcmxpbms7fXtcKlxjczIwXHJ0bGNoXGFmMVxsdHJjaFxmMVxhZGRpdGl2ZVxzYmFzZWRvbjEwIEhlYWRlciBDaGFyO317XCpcY3MyMVxydGxjaFxhZjFcbHRyY2hcZjFcYWRkaXRpdmVcc2Jhc2Vkb24xMCBGb290ZXIgQ2hhcjt9e1xzMjJcbHRycGFyXGl0YXAwXHdpZGN0bHBhclxxbFxsaTBccmkwXGxpbjBccmluMFxjYnBhdDBccnRsY2hcYWYxXGFmczIyXGx0cmNoXGYxXGZzMjJcc2Jhc2Vkb24xNiBSZXZpc2lvbjt9fQ0Ke1xpbmZvDQp7XCpcdHhJbmZve1x0eFZlciAyOC4wLjc1Mi41MDB9fX0NClxwYXBlcncxMjI0MFxwYXBlcmgxNTg0MFxtYXJnbDE0NDBcbWFyZ3QxNDQwXG1hcmdyMTQ0MFxtYXJnYjE0NDBcZGVmdGFiMTEzNFx3aWRvd2N0cmxcdHJhY2ttb3ZlczBcdHJhY2tmb3JtYXR0aW5nMVxseXRleGN0dHBcZm9ybXNoYWRlXHNlY3RkDQpcaGVhZGVyeTcyMFxmb290ZXJ5NzIwXHBnd3N4bjEyMjQwXHBnaHN4bjE1ODQwXG1hcmdsc3huMTQ0MFxtYXJndHN4bjE0NDBcbWFyZ3JzeG4xNDQwXG1hcmdic3huMTQ0MFxwZ2JyZHJvcHQwIA0Ke1xoZWFkZXJccGFyZFxsdHJwYXJcczE3XGl0YXAwXHdpZGN0bHBhclxxbFxsaTBccmkwXGxpbjBccmluMFxzYTE2MFxzbDI1OVxzbG11bHQxXHRxY1x0eDQ2ODBcdHFyXHR4OTM2MFxwbGFpblxydGxjaFxhZjJcYWZzMjJcYWxhbmcxMDMzXGx0cmNoXGYyXGZzMjJcbGFuZzEwMzNcbGFuZ25wMTAzM1xsYW5nZmUxMDMzXGxhbmdmZW5wMTAzM1xwYXJ9DQp7XGZvb3RlclxwYXJkXGx0cnBhclxzMThcaXRhcDBcd2lkY3RscGFyXHFsXGxpMFxyaTBcbGluMFxyaW4wXHNhMTYwXHNsMjU5XHNsbXVsdDFcdHFjXHR4NDY4MFx0cXJcdHg5MzYwXHBsYWluXHJ0bGNoXGFmMlxhZnMyMlxhbGFuZzEwMzNcbHRyY2hcZjJcZnMyMlxsYW5nMTAzM1xsYW5nbnAxMDMzXGxhbmdmZTEwMzNcbGFuZ2ZlbnAxMDMzXHBhclxwYXJkXGx0cnBhclxzMThcaXRhcDBcd2lkY3RscGFyXHFsXGxpMFxyaTBcbGluMFxyaW4wXHNhMTYwXHNsMjU5XHNsbXVsdDFcdHFjXHR4NDY4MFx0cXJcdHg5MzYwXHBsYWluXHJ0bGNoXGFmM1xhZnMxMlxhbGFuZzEwMzNcbHRyY2hcZjNcZnMxMlxsYW5nMTAzM1xsYW5nbnAxMDMzXGxhbmdmZTEwMzNcbGFuZ2ZlbnAxMDMzIDEzNjAxMjYyLjFccGFyXHBhcmRcbHRycGFyXHMxOFxpdGFwMFx3aWRjdGxwYXJccWxcbGkwXHJpMFxsaW4wXHJpbjBcc2ExNjBcc2wyNTlcc2xtdWx0MVx0cWNcdHg0NjgwXHRxclx0eDkzNjBccGxhaW5ccnRsY2hcYWYyXGFmczE2XGFsYW5nMTAzM1xsdHJjaFxmMlxmczE2XGxhbmcxMDMzXGxhbmducDEwMzNcbGFuZ2ZlMTAzM1xsYW5nZmVucDEwMzN7XGZpZWxke1wqXGZsZGluc3R7IERPQ1BST1BFUlRZIGlNYW5hZ2VGb290ZXIgXFwqIE1FUkdFRk9STUFUIH19e1xmbGRyc2x0eyMxNjk1MzIwNnYxfX19XHBhcn1ccGFyZFxsdHJwYXJcaXRhcDBcbm93aWRjdGxwYXJccWxcbGkwXHJpMFxsaW4wXHJpbjBcdHg3MjBcdHgxNDQwXHR4MjE2MFx0eDI4ODBcdHgzNjAwXHR4NDMyMFx0eDUwNDBcdHg1NzYwXHR4NjQ4MFx0eDcyMDBcdHg3OTIwXHR4ODY0MFx0eDkzNjBcdHgxMDA4MFxwbGFpblxydGxjaFxhZjFcYWZzMjBcYWxhbmcxMDMzXGx0cmNoXGYxXGZzMjBcbGFuZzEwMzNcbGFuZ25wMTAzM1xsYW5nZmUxMDMzXGxhbmdmZW5wMTAzM1xwYXJccGFyXHBhclxwYXJccGFyXHBhclxwYXJccGFyXHBhclxwYXJccGFyXHBhclxwYXJccGxhaW5ccnRsY2hcYWYxXGFmczIwXGFsYW5nMTAzM1xhY2YxXGx0cmNoXGYxXGZzMjBcbGFuZzEwMzNcbGFuZ25wMTAzM1xsYW5nZmUxMDMzXGxhbmdmZW5wMTAzM1xjZjEgVGhlIGN1cnJlbnRseSBlZmZlY3RpdmUgc3lzdGVtIG1hcCBjYW4gYmUgZm91bmQgb24gVHJhbnNwb3J0ZXJcbG9jaFxhZjFcZGJjaFxhZjFcaGljaFxmMVwnOTJcaGljaFxhZjFcZGJjaFxhZjFcbG9jaFxmMSBzIHdlYnNpdGUgYXQ6XHBsYWluXHJ0bGNoXGFmMVxhZnMyMFxhbGFuZzEwMzNcbHRyY2hcZjFcZnMyMFxsYW5nMTAzM1xsYW5nbnAxMDMzXGxhbmdmZTEwMzNcbGFuZ2ZlbnAxMDMzXHBhclxwYXJccGxhaW5ccnRsY2hcYWYxXGFmczIwXGFsYW5nMTAzM1xhY2YxXGx0cmNoXGYxXGZzMjBcbGFuZzEwMzNcbGFuZ25wMTAzM1xsYW5nZmUxMDMzXGxhbmdmZW5wMTAzM1xjZjEgIFxwbGFpblxydGxjaFxhZjFcYWZzMjBcYWxhbmcxMDMzXGx0cmNoXGYxXGZzMjBcbGFuZzEwMzNcbGFuZ25wMTAzM1xsYW5nZmUxMDMzXGxhbmdmZW5wMTAzM1xwYXJccGFyXHBsYWluXHJ0bGNoXGFmMVxhZnMyMFxhbGFuZzEwMzNcYWNmMVxsdHJjaFxmMVxmczIwXGxhbmcxMDMzXGxhbmducDEwMzNcbGFuZ2ZlMTAzM1xsYW5nZmVucDEwMzNcY2YxXHRhYlx0YWJcdGFiXHRhYlxwbGFpblxjczE5XHJ0bGNoXGFmMVxhZnMyMlxhbGFuZzEwMzNcYXVsXGFjZjJcbHRyY2hcZjFcZnMyMlxsYW5nMTAzM1xsYW5nbnAxMDMzXGxhbmdmZTEwMzNcbGFuZ2ZlbnAxMDMzXHVsXGNmMntcdHhmaWVsZGRlZntcKlx0eGZpZWxkc3RhcnRcdHhmaWVsZHR5cGUxXHR4ZmllbGRmbGFnczB9e1wqXHR4ZmllbGRkYXRhZGVmXHR4ZmllbGRkYXRhdHlwZTFcdHhmaWVsZGRhdGEgDQo2ODAwNzQwMDc0MDA3MDAwNzMwMDNhMDAyZjAwMmYwMDc1MDA3MjAwNmMwMDJlMDA3NTAwNzMwMDJlMDA2ZDAwMmUwMDZkMDA2OTAwNmQwMDY1MDA2MzAwNjEwMDczMDA3NDAwDQo3MDAwNzIwMDZmMDA3NDAwNjUwMDYzMDA3NDAwMmUwMDYzMDA2ZjAwNmQwMDJmMDA3MzAwMmYwMDc4MDAzNzAwNDUwMDM5MDA0MzAwNGYwMDU5MDA0NTAwNDUwMDRjMDA2ODAwDQozMjAwNTYwMDRjMDA3MjAwMzUwMDU0MDA3NjAwNDQwMDQ3MDA3MzAwNTAwMDAwMDB9e1wqXHR4ZmllbGR0ZXh0IHd3dy5wcGdzaGF3dmlsbGVwaXBlbGluZS5jb217XCpcdHhmaWVsZGVuZH19e1xmaWVsZHtcKlxmbGRpbnN0eyBIWVBFUkxJTksgImh0dHBzOi8vdXJsLnVzLm0ubWltZWNhc3Rwcm90ZWN0LmNvbS9zL3g3RTlDT1lFRUxoMlZMcjVUdkRHc1AiIH19e1xmbGRyc2x0e3d3dy5wcGdzaGF3dmlsbGVwaXBlbGluZS5jb219fX19XHBsYWluXHJ0bGNoXGFmMVxhZnMyMlxhbGFuZzEwMzNcbHRyY2hcZjFcZnMyMlxsYW5nMTAzM1xsYW5nbnAxMDMzXGxhbmdmZTEwMzNcbGFuZ2ZlbnAxMDMzXHBhclxwbGFpblxydGxjaFxhZjFcYWZzMjBcYWxhbmcxMDMzXGx0cmNoXGYxXGZzMjBcbGFuZzEwMzNcbGFuZ25wMTAzM1xsYW5nZmUxMDMzXGxhbmdmZW5wMTAzM1xwYXJccGFyXHBhclxwYXJccGFyXHBhclxwYXJccGFyXHBhclxwYXJccGFyZFxsdHJwYXJcaXRhcDBcbm93aWRjdGxwYXJccWNcbGkwXHJpMFxsaW4wXHJpbjBcdHg3MjBcdHgxNDQwXHR4MjE2MFx0eDI4ODBcdHgzNjAwXHR4NDMyMFx0eDUwNDBcdHg1NzYwXHR4NjQ4MFx0eDcyMDBcdHg3OTIwXHR4ODY0MFx0eDkzNjBcdHgxMDA4MFxwYXJccGxhaW5ccnRsY2hcYWYxXGFmczIwXGFsYW5nMTAzM1xhY2YxXGx0cmNoXGYxXGZzMjBcbGFuZzEwMzNcbGFuZ25wMTAzM1xsYW5nZmUxMDMzXGxhbmdmZW5wMTAzM1xjZjEgUFBHIFNoYXd2aWxsZSBQaXBlbGluZSBMTENccGxhaW5ccnRsY2hcYWYxXGFmczIwXGFsYW5nMTAzM1xsdHJjaFxmMVxmczIwXGxhbmcxMDMzXGxhbmducDEwMzNcbGFuZ2ZlMTAzM1xsYW5nZmVucDEwMzNccGFyXHBsYWluXHJ0bGNoXGFmMVxhZnMyMFxhbGFuZzEwMzNcYWNmMVxsdHJjaFxmMVxmczIwXGxhbmcxMDMzXGxhbmducDEwMzNcbGFuZ2ZlMTAzM1xsYW5nZmVucDEwMzNcY2YxIENsZWFyZmllbGQgYW5kIEVsayBDb3VudGllcywgUGVubnN5bHZhbmlhXHBsYWluXHJ0bGNoXGFmMVxhZnMyMFxhbGFuZzEwMzNcbHRyY2hcZjFcZnMyMFxsYW5nMTAzM1xsYW5nbnAxMDMzXGxhbmdmZTEwMzNcbGFuZ2ZlbnAxMDMzXHBhclxwYXJkXGx0cnBhclxpdGFwMFxub3dpZGN0bHBhclxxbFxsaTBccmkwXGxpbjBccmluMFx0eDcyMFx0eDE0NDBcdHgyMTYwXHR4Mjg4MFx0eDM2MDBcdHg0MzIwXHR4NTA0MFx0eDU3NjBcdHg2NDgwXHR4NzIwMFx0eDc5MjBcdHg4NjQwXHR4OTM2MFx0eDEwMDgwXHBhclxwbGFpblxydGxjaFxhZjFcYWZzMTZcYWxhbmcxMDMzXGx0cmNoXGYxXGZzMTZcbGFuZzEwMzNcbGFuZ25wMTAzM1xsYW5nZmUxMDMzXGxhbmdmZW5wMTAzM1xwYXJccGFyZFxsdHJwYXJcaXRhcDBcbm93aWRjdGxwYXJccWxcbGkwXHJpMFxsaW4wXHJpbjBcc2EyMDBcc2wyNjRcc2xtdWx0MVx0eDcyMFx0eDE0NDBcdHgyMTYwXHR4Mjg4MFx0eDM2MDBcdHg0MzIwXHR4NTA0MFx0eDU3NjBcdHg2NDgwXHR4NzIwMFx0eDc5MjBcdHg4NjQwXHR4OTM2MFx0eDEwMDgwXHBsYWluXHJ0bGNoXGFmMlxhZnMyMlxhbGFuZzEwMzNcbHRyY2hcZjJcZnMyMlxsYW5nMTAzM1xsYW5nbnAxMDMzXGxhbmdmZTEwMzNcbGFuZ2ZlbnAxMDMzXHBhciB9</record_binary_data>
      <record_plain_text>The currently effective system map can be found on Transporter’s website at:

 

				www.ppgshawvillepipeline.com &lt;https://url.us.m.mimecastprotect.com/s/x7E9COYEELh2VLr5TvDGsP&gt;











PPG Shawville Pipeline LLC
Clearfield and Elk Counties, Pennsylvania</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>305</filing_id>
      <filing_title>Normal filing 2024 Clean-up</filing_title>
      <filing_type>570</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2024-04-01</current_effective_date>
      <ferc_order_date>2024-04-02</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>50</record_id>
      <option_code>A</option_code>
      <record_title>Notice of Rates</record_title>
      <record_content_desc>Section 5</record_content_desc>
      <record_version_num>4.0.1</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>50</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2024-04-01</proposed_effective_date>
      <priority_order>730</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>NOTICE OF RATES

(Rates Per Dekatherm)

Rate Schedule									Base Tariff Rate

  Monthly Reservation Fees

FT -	Max									$28.8952
-	Min									$0.00

  Daily Usage Charges

FT -  	Max									$0.00
   -	Min									$0.00

IT -  	Max									$0.9500
   -	Min									$0.00

Additional notes:

1/	The maximum Volumetric Firm Rate for Capacity Release is $0.9500.

2/	An ACA surcharge is added to each usage rate to the extent provided in Section 28 of the General Terms and Conditions in this Tariff. The ACA surcharge shall be as posted on the Commission website at www.ferc.gov.

3/	The Gas Retainage is 1% of the quantities of gas in Dekatherms received from a Shipper for transportation.
NEGOTIATED RATES

(Rates Per Dekatherm)

Shipper #1 Name: Shawville Power, LLC
Schedule: FT
Negotiated Rate: $1,250,000 annual reservation rate; $0.17 per Dekatherm usage rate; adjusted as set forth in Exhibit A in the FT Transportation Agreement.  A negotiated usage rate of $0.52 per dekatherm applies to out of path shipments between primary or secondary receipt points and secondary delivery points. 
Term of Agreement: From the effective date and ending upon the earlier of (a) 10 years, and (b) November 24, 2026. May be extended.
Contracted Capacity: 152,000 Dekatherms per Day (MDQ); 6,300 Dekatherms per hour (MHQ)
Primary Receipt Point: Dominion Energy Transmission, Inc. Interconnect Meter #41701
Primary Delivery Point: Shawville (Goshen Township, Clearfield County, PA) Meter 2001
Gas Retainage: limited to 0.75% on an annualized basis, which may be adjusted upon renewal of the TSA.

Shipper #2 Name: PPG Energy LLC
Schedule: FT
Negotiated Rate: $0.52 per Dekatherm volumetric rate payable on quantities flowed hereunder. No Gas Retainage Charge.
Term of Agreement: Through December 31, 2023. May be extended.
Contracted Capacity: 125,000 Dekatherms per Day.
Primary Receipt Points: Dominion Energy Transmission, Inc. Interconnect Meter #41701; : Shawville (Goshen Township, Clearfield County, PA) Meter 2001; Field gas receipt points on pipeline (Meter 1001 – Coldstream; Meter 1002 – Whitetail; Meter 1003 – COP; Meter 1004 - Elk)
Primary Delivery Points: Dominion Energy Transmission, Inc. Interconnect Meter #41701; Shawville (Goshen Township, Clearfield County, PA) Meter 2001

The negotiated rate transportation agreements with the above parties are described above and conform in all material respects with its pro forma service agreement and do not violate the Alternative Rate Policy Statement or the Commission’s negotiated rate policies.


















1/	All applicable surcharges apply including ACA surcharge as posted on the Commission’s website at www.ferc.gov, and Gas Retainage, as stated in Agreement.</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>305</filing_id>
      <filing_title>Normal filing 2024 Clean-up</filing_title>
      <filing_type>570</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2024-04-01</current_effective_date>
      <ferc_order_date>2024-04-02</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>290</record_id>
      <option_code>A</option_code>
      <record_title>Web Site Access and Complaints</record_title>
      <record_content_desc>Section 8.21</record_content_desc>
      <record_version_num>1.0.2</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>290</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2024-04-01</proposed_effective_date>
      <priority_order>730</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>21.	WEB SITE ACCESS AND COMPLAINTS

21.1 	Access to Internet Web Site: Information about Transporter’s system, its capacity, its services and procedures for requesting its services, including a form for requesting service and information about submitting an offer to release capacity, shall be provided on Transporter’s HTML web page, accessible via the Internet’s World Wide Web, at ppgshawvillepipeline.com &lt;https://url.us.m.mimecastprotect.com/s/jvIYCkRwwBSqxByqt2bXTH&gt;.

21.2 	System and Service Information: Information on the availability, pricing, or other terms of transportation services will be made available on Transporter’s Internet web site.

21.3 	Service Complaints: Shippers are encouraged to resolve any disputes informally with Transporter. A formal complaint concerning any transportation services offered by Transporter shall be directed in writing to 
Josh Hull, CEO
Penn Production Group LLC
3500 East College Ave. 
Suite 1300 Box 6
State College, PA 16801
814 470 6330
jhull@pennproduction.com &lt;mailto:jlh2@goh-inc.com&gt;

Transporter will respond initially to the complaint within five Business Days, and in writing within thirty (30) days.</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>305</filing_id>
      <filing_title>Normal filing 2024 Clean-up</filing_title>
      <filing_type>570</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2024-04-01</current_effective_date>
      <ferc_order_date>2024-04-02</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>Y</suspend_motion>
    </record_data>
    <record_data>
      <record_id>370</record_id>
      <option_code>A</option_code>
      <record_title>North American Industries Standards Board &amp;#40;NAESB&amp;#41; St</record_title>
      <record_content_desc>Section 8.29</record_content_desc>
      <record_version_num>4.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>370</collation_value>
      <record_parent_id>80</record_parent_id>
      <proposed_effective_date>2025-08-01</proposed_effective_date>
      <priority_order>755</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>29.	NORTH AMERICAN ENERGY STANDARDS BOARD (NAESB) STANDARDS

Compliance with 18 CFR 284.12

Transporter has adopted the Business Practices and Electronic Communications Standards, NAESB WGQ Version 4.0 and the standard revised by Minor Correction MC24002 marked with an asterisk [*], which are required by the Commission in 18 CFR Section 284.12(a), as indicated below. Standards without accompanying identification or notations are incorporated by reference. Standards that are not incorporated by reference are identified along with the tariff record in which they are located. Standards for which waivers or extensions of time have been granted are also identified.
Standards not Incorporated by Reference and their Location in Tariff:
NAESB Standard							Tariff Record
Nomination Related Standards:
	Standards:
	1.3.2(i-vi)			Scheduling of Receipts and Deliveries		
Section 8.9.1(e)
Capacity Release Standards
	5.3.2				Temporary Release or Permanent Assignment	Section 8.11
	5.3.73				Temporary Release or Permanent Assignment	Section 8.11
Standards Incorporated by Reference: 
Additional Standards:
General:
Definition:
0.2.5
Standards: 
0.3.1, 0.3.2, 0.3.16, 0.3.17
Creditworthiness:
Standards: 
	0.3.3, 0.3.4, 0.3.5, 0.3.6, 0.3.7, 0.3.8, 0.3.9, 0.3.10
Gas/Electric Operational Communications:
Definitions:
0.2.1, 0.2.2, 0.2.3, 0.2.4
Standards: 
0.3.11, 0.3.12, 0.3.13, 0.3.14, 0.3.15
Operating Capacity and Unsubscribed:
	Standards:
	0.3.18, 0.3.20
Location Data Download:
	Standards:
	0.3.23, 0.3.24, 0.3.25, 0.3.26, 0.3.27, 0.3.28, 0.3.29	
	Dataset:
	0.4.4
Nominations Related Standards:
Definitions:
1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.8, 1.2.9, 1.2.10, 1.2.11, 1.2.12, 1.2.13, 1.2.14, 1.2.15, 1.2.16, 1.2.17, 1.2.18, 1.2.19
Standards: 
1.3.1, 1.3.5, 1.3.6, 1.3.7, 1.3.8, 1.3.9, 1.3.11, 1.3.13, 1.3.14, 1.3.15, 1.3.16, 1.3.17, 1.3.18, 1.3.19, 1.3.20, 1.3.21, 1.3.22, 1.3.23, 1.3.24, 1.3.25, 1.3.26, 1.3.27, 1.3.28, 1.3.29, 1.3.30, 1.3.31, 1.3.32, 1.3.33, 1.3.34, 1.3.35, 1.3.36, 1.3.39, 1.3.64, 1.3.65, 1.3.66, 1.3.67, 1.3.68, 1.3.69, 1.3.70, 1.3.71, 1.3.73, 1.3.74, 1.3.75, 1.3.76, 1.3.77, 1.3.80, 1.3.81, 1.3.82
Flowing Gas Related Standards:
Definitions:
2.2.1, 2.2.2, 2.2.3, 2.2.4, 2.2.5
Standards: 
2.3.1, 2.3.2, 2.3.3, 2.3.4, 2.3.5, 2.3.7, 2.3.8, 2.3.9, 2.3.10, 2.3.11, 2.3.12, 2.3.13, 2.3.14, 2.3.15, 2.3.16, 2.3.17, 2.3.18, 2.3.19, 2.3.20, 2.3.21, 2.3.22, 2.3.23, 2.3.26, 2.3.27, 2.3.28, 2.3.29, 2.3.30, 2.3.31, 2.3.41, 2.3.43, 2.3.44, 2.3.45, 2.3.47, 2.3.48, 2.3.50, 2.3.54, 2.3.55, 2.3.56, 2.3.57, 2.3.58, 2.3.59, 2.3.60, 2.3.61, 2.3.62, 2.3.63, 2.3.64, 2.3.65, 2.3.66
Invoicing Related Standards:
Definition:
3.2.1
Standards: 
3.3.3, 3.3.4, 3.3.5, 3.3.6, 3.3.7, 3.3.8, 3.3.9, 3.3.10, 3.3.11, 3.3.12, 3.3.13, 3.3.14, 3.3.15, 3.3.16, 3.3.17, 3.3.18, 3.3.19, 3.3.21, 3.3.22, 3.3.25, 3.3.27
Quadrant Electronic Delivery Mechanism Related Standards:
Definitions:
4.2.1, 4.2.2, 4.2.3, 4.2.4, 4.2.5, 4.2.6, 4.2.7, 4.2.8, 4.2.9, 4.2.10, 4.2.11, 4.2.12, 4.2.13,
4.2.14, 4.2.15, 4.2.16, 4.2.17, 4.2.18

Standards:
4.3.90, 4.3.92, 4.3.93. 4.3.95, 4.3.96, 4.3.97, 4.3.98, 4.3.107, 4.3.108, 4.3.110
Capacity Release Standards:
Definitions:
5.2.1, 5.2.2, 5.2.3, 5.2.4, 5.2.5
Standards: 
5.3.1, 5.3.3, 5.3.4, 5.3.5, 5.3.7, 5.3.8, 5.3.9, 5.3.15, 5.3.16, 5.3.19, 5.3.21, 5.3.22, 5.3.23, 5.3.25, 5.3.26, 5.3.28, 5.3.29, 5.3.36, 5.3.37, 5.3.38, 5.3.39, 5.3.40, 5.3.41, 5.3.42, 5.3.44, 5.3.45, 5.3.46, 5.3.47, 5.3.48, 5.3.49, 5.3.50, 5.3.51, 5.3.52, 5.3.53, 5.3.54, 5.3.55, 5.3.56, 5.3.57, 5.3.58, 5.3.59, 5.3.60, 5.3.62, 5.3.62a, 5.3.63, 5.3.64, 5.3.65, 5.3.66, 5.3.67, 5.3.68, 5.3.69, 5.3.70, 5.3.71, 5.3.73
Cybersecurity Related Standards:

	Definitions:

12.2.1, 12.2.2, 12.2.3, 12.2.4, 12.2.5, 12.2.6, 12.2.7, 12.2.8, 12.2.9, 12.2.10, 12.2.11, 12.2.12, 12.2.13, 
12.2.14, 12.2.15, 12.2.16, 12.2.17, 12.2.18, 12.2.19, 12.2.20, 12.2.21, 12.2.22, 12.2.23, 12.2.24, 12.2.25, 
12.2.26, 12.2.27, 12.2.28, 12.2.29, 12.2.30, 12.2.31, 12.2.32, 12.2.33, 12.2.34, 12.2.35, 12.2.36, 12.2.37, 
12.2.38, 12.2.39, 12.2.40, 12.2.41				

Standards for which Waiver or Extension of Time to Comply have been granted: 
NAESB Standard						Waiver or Extension of Time 
Operating Capacity and Unsubscribed:
Standards:
0.3.21 &amp; 0.3.22						Extension of Time
Datasets:
0.4.2, 0.4.3						Extension of Time

Nomination Related Standards:
Standards:
1.3.48, 1.3.53, 1.3.55, 1.3.56, 1.3.58, 1.3.62, 1.3.79, 

1.3.3, 1.3.4, 1.3.37, 1.3.38, 1.3.40, 1.3.41, 1.3.42, 
1.3.43, 1.3.44, 1.3.45, 1.3.46, 1.3.51, 1.3.72			Extension of Time

Datasets:
1.4.1, 1.4.2, 1.4.31.4.4, 1.4.5, 1.4.6, 1.4.7			Extension of Time
Flowing Gas Related Standards:
Standards: 
2.3.6, 2.3.25, 2.3.32, 2.3.40, 2.3.42, 2.3.46, 
2.3.51, 2.3.52, 2.3.53					Extension of Time

Datasets:
2.4.1, 2.4.2, 2.4.3, 2.4.4, 2.4.5, 2.4.6, 2.4.7, 
2.4.8, 2.4.9, 2.4.10, 2.4.11, 2.4.17, 2.4.18			Extension of Time

Invoicing Related Standards:
Standards: 
3.3.23, 3.3.24, 3.3.26					Extension of Time
Datasets:
3.4.1*, 3.4.2, 3.4.3, 3.4.4					Extension of Time
Quadrant Electronic Delivery Mechanism Related Standards:			
Standards: 
4.3.1, 4.3.2, 4.3.3, 4.3.16, 4.3.17, 4.3.18, 4.3.20, 
4.3.22, 4.3.23, 4.3.24, 4.3.25, 4.3.26, 4.3.27, 
4.3.28, 4.3.30, 4.3.31, 4.3.32, 4.3.33, 4.3.34, 
4.3.35, 4.3.36, 4.3.38, 4.3.40, 4.3.41, 4.3.42, 
4.3.43, 4.3.44, 4.3.45, 4.3.46, 4.3.47, 4.3.48, 
4.3.49, 4.3.50, 4.3.52, 4.3.53, 4.3.54, 4.3.55, 
4.3.57, 4.3.58, 4.3.66, 4.3.67, 4.3.68, 4.3.69, 
4.3.72, 4.3.75, 4.3.78, 4.3.79, 4.3.80, 4.3.81, 
4.3.82, 4.3.85, 4.3.86, 4.3.87, 4.3.89, 
4.3.91, 4.3.94, 4.3.99, 4.3.100, 4.3.101, 
4.3.102, 4.3.104, 4.3.105, 4.3.106			Extension of Time

Capacity Release Related Standards:
Standards: 
5.3.10, 5.3.13, 5.3.14, 5.3.35, 5.3.72,
5.3.11, 5.3.12, 5.3.18, 5.3.20, 5.3.24,
5.3.31, 5.3.32, 5.3.33, 5.3.34				Extension of Time

Datasets:
5.4.14, 5.4.15, 5.4.16, 5.4.17, 5.4.20, 5.4.21, 
5.4.22, 5.4.23, 5.4.24, 5.4.25, 5.4.26, 5.4.27			Extension of Time
	
	Cybersecurity Related Standards:
		
Standards:
12.3.1, 12.3.2, 12.3.3, 12.3.4, 12.3.5, 12.3.6, 12.3.7, 
12.3.8, 12.3.9, 12.3.10, 12.3.11, 12.3.12, 12.3.13, 
12.3.14, 12.3.15, 12.3.16, 12.3.17, 12.3.18, 12.3.19, 
12.3.20, 12.3.21, 12.3.22, 12.3.23, 12.3.24, 12.3.25, 
12.3.26, 12.3.27, 12.3.28, 12.3.29, 12.3.30, 12.3.31		Extension of Time</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>307</filing_id>
      <filing_title>Compliance to 306</filing_title>
      <filing_type>580</filing_type>
      <associated_filing_id>306</associated_filing_id>
      <associated_record_id>370</associated_record_id>
      <associated_option_code>A</associated_option_code>
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2025-08-01</current_effective_date>
      <ferc_order_date>2025-07-28</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>