<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C011079</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>1</tariff_id>
    <tariff_title>FERC MBR Tariff</tariff_title>
    <tariff_export_date>2025-09-16T20:49Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>1</record_id>
      <option_code>A</option_code>
      <record_title>FERC MBR Tariff</record_title>
      <record_content_desc>FERC MBR Tariff</record_content_desc>
      <record_version_num>1.0.0</record_version_num>
      <record_narrative_name>FERC MBR Tariff</record_narrative_name>
      <collation_value>1000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2021-12-21</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>FERC Market-Based Rate Tariff

1)	Availability

Seller makes electric energy, capacity, and ancillary services available under this tariff to any purchaser, except as prohibited below.

2)	Applicability

This tariff is applicable to all sales of energy, capacity, and/or ancillary services by Seller at market-based rates, which are (a) subject to the jurisdiction of the Commission, and (b) not made pursuant to another tariff on file with the Commission.

3)	Rates

All sales shall be made at rates established by agreement between the purchaser and Seller.

4)	Seller Category

Seller is a Category 1 seller in all regions, as defined in 18 CFR 35.36(a).

5)	Compliance with Commission Regulations

Seller shall comply with the provisions of 18 CFR Part 35, Subpart H, as applicable, and with any conditions the Commission imposes in its orders
concerning seller’s market-based rate authority, including orders in which the Commission authorizes seller to engage in affiliate sales under this tariff or otherwise restricts or limits the seller’s market-based rate authority. Failure to comply with the applicable provisions of 18 CFR Part 35, Subpart H, and with any orders of the Commission concerning seller’s market-based rate authority, will constitute a violation of this tariff.

6)	Limitations and Exemptions Regarding Market-Based Rate Authority

Seller has received waiver of: Subparts B and C of Part 35, except for sections 35.12(a), 35.13(b), 35.15 and 35.16; Part 41, Part 101, regarding the Uniform System of Accounts prescribed for public utilities and licensees, with the exception that waiver of the provisions of Part 101 that apply to hydropower licensees is not granted with respect to licensed hydropower projects; and Part 141, except sections 141.14 and 141.15.; and received blanket approval under Part
34. Indra Power Business CT, LLC, ER21-	_-000 (2021).

7) Effective Date 

This date shall become effective on the date specified by the Commission.</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>1</filing_id>
      <filing_title>Tariffs and Agreements</filing_title>
      <filing_type>400</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2021-12-21</current_effective_date>
      <ferc_order_date>2021-12-17</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>