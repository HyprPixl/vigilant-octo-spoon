<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C001647</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>200</tariff_id>
    <tariff_title>Northern Maine Market Rules</tariff_title>
    <tariff_export_date>2025-09-16T19:31Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>3</record_id>
      <option_code>A</option_code>
      <record_title>Definitions and Acronyms</record_title>
      <record_content_desc>NMMR #1</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>3000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>1 DEFINITIONS AND ACRONYMS1.1 DEFINITIONS1.1.1 Affiliate   Any person or entity that controls, is controlled by, or is under common control with, such person or entity.  As used in the Northern Maine Market Rules and the ISA Tariff, “control” means either:  (i) the ownership, directly, indirectly or through a chain of successive ownership, of 10% or more or the voting interest of an entity; or (ii) the possession, directly, indirectly or through a chain of successive ownership of the power to direct the policies and actions of an entity.1.1.2 Alternative Dispute Resolution ("ADR")   The Alternative Dispute Resolution procedure set forth in Section 9 of the ISA Tariff.1.1.3 Ancillary Interconnected Services   Services as specified in and required for service under NB Power's transmission tariff.  These services are (1) Scheduling, System Control and Dispatch, (2) Reactive Supply and Voltage Control Supplied from Generation Sources, and (3) Energy Imbalance Service.1.1.4 Ancillary Services   The Ancillary Services are (1) Scheduling, System Control and Dispatch Service; (2) Reactive Supply and Voltage Control from Generation Sources Service; (3) Regulation and Frequency Response Service; (4) Energy Imbalance Service; (5) Operating Reserve - Spinning Reserve Service; and (6) Operating Reserve - Supplemental Reserve Service.1.1.5 Approved Maintenance Outage   A Proposed Maintenance Outage that has been approved by the ISA.1.1.6 Area - One of the following: New England, New York, Ontario, Quebec or the Maritimes within the Northeast Power Coordinating Council that is operated as a control area as defined by the North American Electric Reliability Council.1.1.7 Automatic Generation Control ("AGC")   Automatic Generation Control is the measure of the ability of an electric Generating Unit or portion thereof to respond automatically within a specified time to a direction to increase or decrease the level of output in order to control frequency and maintain proper power flows into and out of the Northern Maine Market.1.1.8 Available Transfer Capability ("ATC")   Transmission capability which has not been committed and is available for reservation and use by Market Participants.1.1.9 Balanced Schedule – A schedule for which the sum of the Competitive Electricity Provider's scheduled:  (i) Energy from Generating Units and imports; and (ii) Firm Energy to replace energy unavailable due to outages of such Generating Units and imports equals the sum of the Competitive Electricity Provider’s scheduled:  (iii) Demand; (iv) allocated share of Transmission Losses; (v) exports; and (vi) inter Competitive Energy Provider Energy trades.1.1.10 Balancing Area – The Area of operation of the Balancing Authority to which the ISA is subject.1.1.11 Balancing Authority –The responsible entity that integrates resource plans ahead of time, maintains load-interchange-generation balance within an Area, and supports interconnection frequency in Real-time.1.1.12 Balancing Energy   Energy used to maintain the balance between generation and Demand on an actual basis and to provide Competitive Electricity Providers with the difference between their actual generation and actual Demand, including losses, on an hourly basis.1.1.13 Balancing Energy Clearing Price   The price, applied hourly, for Balancing Energy.1.1.14 Balancing Energy Market - The market for Balancing Energy.1.1.15 Balancing Energy Requirement ("BER")   The requirement for Balancing Energy which will be met by various sources as described in Northern Maine Market Rules #2 and #4.1.1.16 Base Case – A study of the planned development of the Northern Maine Transmission System prepared in accordance with the requirements of Northern Maine Market Rule #9, System Planning.1.1.17 Billable Quantity ("BQ")   The Billable Quantity is the Competitive Electricity Provider's Actual Demand less its share of actual generation less its share of actual imports for a specific Northern Maine region.1.1.18 Black Start Capability   The capability of a Generating Unit to restart from system black conditions.1.1.19 Board of Directors – The governing board of the Northern Maine Independent System Administrator as described in the ISA Tariff.1.1.20 Capability Period - The period defined by the ISA for which rights and obligations of the ISA and Market Participants are determined in respect of the procurement and provision of Capacity.  The winter Capability Period covers the months of November through March and the summer Capability Period covers the months of April  through October.1.1.21 Capacity – The High Operating Limit of a Resource that is demonstrated to the reasonable satisfaction of the ISA based on actual experience.  It is the maximum output, commonly expressed in megawatts (MW), that generating equipment can supply to system load, adjusted for ambient conditions.  With respect to imports, Capacity is limited to that which is recognized as being exported from the relevant market operator and not being counted as Capacity in that market.1.1.22 Capacity Obligation – The requirement for Eligible Unforced Capacity established in Northern Maine Market Rule #10.1.1.23 Codes of Conduct   Behavioral rules, which preclude inappropriate actions of Market Participants, ISA staff and the ISA Board of Directors.1.1.24 Commission   Refers to the Federal Energy Regulatory Commission.  Also referred to as the FERC.1.1.25 Committed Uses   Transmission capability that has been pledged pursuant to existing agreements or other binding commitments.1.1.26 Competitive Electricity Provider ("CEP")   Any marketer, broker, aggregator or other entity that is legally entitled in the State of Maine to sell, and that is selling or that will sell electric Energy, Capacity, or Ancillary Services to the public at retail in the Northern Maine Market.  A CEP includes only a limited number of competitive electricity providers as they defined under 35-A M.R.S.A. § 3201 sub § 5.1.1.27 Connected Entity - An entity that is not a Market Participant but that, due to its connections to a transmission and/or distribution system, must coordinate its work on its electric facilities with a Transmission Owner and the ISA.1.1.28 Connection Agreement – An agreement between an entity that wishes to connect a new facility to the Northern Maine Transmission System and the Transmission Owner for the portion of the Northern Maine Transmission System to which the entity wishes to connect.1.1.29 Connection Applicant – An entity that wishes to connect a new facility to the Northern Maine Transmission System in accordance with the requirements of Northern Maine Market Rule #8, Connections, Retirements and Demand-Side Management Programs.1.1.30 Consumer Owned Utility ("COU")   A utility owned and operated by its customers (i.e., a municipal or a cooperative).1.1.31 Control Area   A system which regulates its Generating Units in order to maintain its interchange schedule with other Control Areas and contributes its frequency bias obligation to the interconnection.1.1.32 Control Area Operator ("CAO")   The party in charge of the operation of a Control Area.  In Northern Maine, Maine Public Service Company and Eastern Maine Electric Cooperative are Transmission System Operators performing some roles similar to a CAO, while NBSO operates as the CAO in the Maritimes.  The Northern Maine Area Operator will be a joint function of the TSOs and the ISA.1.1.33 Daily Trading Deadline - The time at which Day-Ahead Schedules must be submitted by Competitive Electricity Providers to the ISA.1.1.34 Day Ahead Schedule   The Schedules submitted as part of the Day Ahead Scheduling Process and which establishes the Operating Plan for the next Trading Day.1.1.35 Day-Ahead Scheduling Process - The process under which Competitive Electricity Providers submit their Day-Ahead Schedules to the ISA for use in constructing the Operating Plan.1.1.36 Demand   The Load of a Market Participant plus its allocated share of Northern Maine losses.1.1.37 Demand-Side Management (“DSM”) – The application of programs, activities and technologies designed to encourage or facilitate consumers'  longer term modification of electricity usage and patterns of use, including the timing and level of electricity demand.  It refers specifically to Energy and load-shape modifications that are undertaken in response to utility-administered programs, customer initiated activities or programs developed in the marketplace, including government initiated Energy-efficiency standards.1.1.38 Dispatch   Dispatch is the process of issuing Dispatch Instructions to Generating Units to operate at levels determined with the objectives of:  (i) maintaining system reliability; (ii) complying with the Balanced Schedules; and (iii) minimizing the Balancing Energy costs.1.1.39 Dispatch Instruction - An instruction issued to a Generating Unit to change its output or provision of Ancillary Services.1.1.40 DSM Implementer - An entity that wishes to implement a Demand-Side Management program on the Northern Maine Transmission System in accordance with the requirements of Northern Maine Market Rule #8, Connections, Retirements and Demand-Side Management Programs.1.1.41 Eastern Maine Electric Cooperative ("EMEC")   A consumer owned electric utility operating in Northern Maine and performing the functions of a T&amp;D Utility and a Transmission System Operator.1.1.42 Effective Date - The date on which the ISA Tariff is permitted to become effective by the Commission.1.1.43 Eligible Installed Capacity – In respect of a Generating Unit or import, the net output of that Generating Unit or the net import that can be achieved on a sustained basis under normal weather conditions when called upon by the ISA in each Capability Period as determined in accordance with Northern Maine Market Rule #10.1.1.44 Eligible Unforced Capacity – In respect of a Generating Unit or import, that Generating Unit's or import’s Eligible Installed Capacity de-rated to account for the Generating Unit's or import’s Forced Outage rate, energy limits and intermittent output, as determined in accordance with Northern Maine Market Rule #10.1.1.45 Energy - Power produced in the form of electricity, measured in kilowatt-hours or megawatt-hours.1.1.46 Executive Session - Any meeting of the ISA Board of Directors that is not open to any ISA Members except those constituting the Board and Alternate Directors.1.1.47 Federal Energy Regulatory Commission ("FERC")   The governmental organization responsible for the regulation of transmission services and wholesale transactions in the United States.  Also referred to as the Commission.1.1.48 Federal Power Act ("FPA")   An Act of the United States Congress that governs the ISA.1.1.49 Final Approval - The act by which the Northern Maine Area Operator authorizes an entity to proceed with an Approved Maintenance Outage.1.1.50 Firm Energy - Firm Energy is electric energy backed by Eligible Unforced Capacity.  Such capacity, in the context of Section 10.3.8 and elsewhere in the Market Rules, means the capacity already provided to meet the Capacity Obligation under Market Rule #10 and not an additional capacity purchase (except where the capacity fails to meet the 70% availability standard in the Market Rules).1.1.51 Forced Outage   An unplanned disconnection or separation of one or more elements of an electric system.1.1.52 Force Majeure   Any act of God, labor disturbance, act of the public enemy, war, insurrection, riot, fire, storm or flood, explosion, breakage or accident to machinery or equipment, any reduction in firm or non-firm transmission service in response to a transmission capacity shortage as a result of system reliability conditions, order, regulation or restriction imposed by governmental, military or lawfully established civilian authorities, or any other cause beyond the control of the party claiming Force Majeure.  Neither the ISA nor any ISA Member will be considered in default as to any obligation under the ISA Tariff if prevented from fulfilling the obligation due to an event of Force Majeure.  However, a party whose performance under the ISA Tariff is hindered by an event of Force Majeure shall make all reasonable efforts to perform its obligations under the ISA Tariff.  Force Majeure shall not include:  (i) equipment failures that can reasonably occur in normal operation due to any degree of wear or tear; (ii) economic hardship or any inability to obtain financing; or (iii) conditions of national or local economies or markets.1.1.53 Forecast Demand - A projection of the Demand of a Competitive Electricity Provider or the ISA.1.1.54 Generating Unit   An electric generator and its associated plant and apparatus whose electrical output is capable of being separately identified and metered that is:a) Located within Northern Maine;b) Connected to the Northern Maine Transmission System, either directly or via interconnected transmission or distribution facilities; andc) Capable of producing and delivering net Energy (Energy in excess of a generating station's internal power requirements).A Generating Unit shall be an individual unit or a group of units with a common connection point and meter.1.1.55 Generator   The owner or operator of any electric Generating Unit or combination of Generating Units located in Northern Maine, the dispatch and scheduling of which is subject to the oversight and monitoring of the ISA.1.1.56 Generator Name   The official resource name as agreed with the ISA.1.1.57 Generator ID   The official resource ID as agreed with and assigned by the ISA.1.1.58 Good Utility Practices   Any of the practices, methods, and acts engaged in or approved by a significant portion of the electric utility industry during the relevant time period, or any of the practices, methods and acts which, in the exercise of reasonable judgment in light of the facts known at the time the decision was made, could have been expected to accomplish the desired result at a reasonable cost consistent with good business practices, reliability, safety, and expedition.  Good Utility Practice is not intended to be limited to the optimum practice, method or act to the exclusion of all others, but rather to be acceptable practices, methods, or acts generally accepted in the region.1.1.59 High Operating Limit ("HOL")   The High Operating Limit will be used as the maximum value to which the Northern Maine Area Operator will dispatch a Generating Unit under normal system conditions.  In addition, the High Operating Limit is the maximum value to which the ISA will allocate Operating Reserves to the Generating Unit.1.1.60 Houlton Water Company ("HWC")   A municipally-owned electricity utility (also known as a Consumer Owned Utility) operating in the Northern Maine Market and performing the functions of a T&amp;D Utility.1.1.61 Hour Ahead Schedule   A Schedule prepared by a Competitive Electricity Provider in the Hour Ahead Scheduling Process.1.1.62 Hour-Ahead Scheduling Process - The process under which Competitive Electricity Providers submit their Hour-Ahead Schedules to the ISA for use in updating the Operating Plan.1.1.63 Hourly Trading Deadline - The time at which Hour-Ahead Schedules must be submitted by Competitive Electricity Providers to the Northern Maine Area Operator.1.1.64 Independent System Administrator ("ISA")   The Northern Maine Independent System Administrator, Inc., a non-profit organization that, with Commission authorization:  (i) oversees, monitors, and coordinates the use of the Northern Maine Transmission System and administers the relevant Transmission Tariffs; (ii) administers the Balancing Energy, Energy and Ancillary Services Markets, including support for bilateral and self-scheduled services; (iii) provides the settlement and billing functions in the Northern Maine Market; (iv) requires compliance with Capacity Obligations and Reliability Standards; and (v) discharges the other responsibilities set forth in the ISA Tariff.1.1.65 Independent System Operator ("ISO")   A public utility that controls a regional electrical operating system in accordance with the eleven (11) ISO principals as outlined in FERC Order  888.1.1.66 Interface - Either or both of the interconnections between NB Power and Maine Public Service Company and between NB Power and Eastern Maine Electric Cooperative.1.1.67 Investor Owned Utility ("IOU")   A utility owned and operated by its stockholders.1.1.68 ISA Member   Any entity or person that meets the requirements of Section 7 of the ISA Tariff and that executes the Service Agreement attached to the ISA Tariff as Attachment A and that agrees to be bound by the terms of the ISA Tariff.1.1.69 ISA Operations Date - The date, after the Effective Date, on which the ISA commences actual operation of the Northern Maine Market in accordance with the ISA Tariff and the Northern Maine Market Rules.1.1.70 ISA Web-site   The internet site at which the ISA shall publish information.1.1.71 ISO New England ("ISO NE")   The Independent System Operator of the New England Power Pool (“NEPOOL”) Control Area.1.1.72 Large Customer   Any retail consumer of electric Energy or Capacity whose maximum Demand during the previous calendar year is equal to or greater than 500 kilowatts.1.1.73 Load   The total of all kilowatt hours delivered for consumption to an end user during a relevant period, regardless of the Resources supplying those kilowatt hours.  For a wholesale Market Participant, Load is the total of all kilowatt-hours consumed by the wholesale Market Participant’s end-user customer(s) during a relevant period.  For a T&amp;D Utility, Load is the total of all kilowatt-hours delivered to its point(s) of interconnection with the Northern Maine Transmission System for use by end-user customers on its system.1.1.74 Load Profiling   The process by which hourly retail customer loads are estimated using statistically derived load patterns and total Energy consumption over some time period such as one (1) month.1.1.75 Low Operating Limit ("LOL")   The minimum MW value to which the Market Participant is willing to operate a Generating Unit for each hour.  The Low Operating Limit value, submitted for each trading interval, may be greater than or equal to zero.  The Low Operating Limit will be used as the minimum value to which the Northern Maine Area Operator will dispatch a Generating Unit under normal system conditions.1.1.76 Maine Electric Power Company ("MEPCO")   A transmission company operating a single transmission line which interconnects the New Brunswick Transmission System with the transmission facilities which are part of the New England Power Pool.1.1.77 Maine Public Advocate   The entity established to represent the using and consuming public before the Maine Public Utilities Commission under Chapter 17 of Title 35 A of the Maine Revised Statutes Annotated.1.1.78 Maine Public Service Company ("MPS")   An investor-owned electric utility operating in Northern Maine and performing the functions of a T&amp;D Utility and Transmission System Operator.1.1.79 Maine Public Utilities Commission ("MPUC")   The governmental organization responsible for regulation of, among other items, retail electricity supply in Northern Maine.1.1.80 Maintenance Outage - An outage of a facility, on either a planned or unplanned basis, in order to perform maintenance in order to return the facility to service.1.1.81 Market Participant   Any Generator, Competitive Electricity Provider, Transmission System Operator or T&amp;D Utility whose participation in the Northern Maine Market is required in order to provide electric service to the ultimate end users in that market.1.1.82 Market Participant ID   The identification of the Market Participant as agreed with the ISA.1.1.83 Market Rules - Those rules and operating procedures developed, implemented, interpreted and enforced by the ISA pursuant to Section 4.2 of the ISA Tariff.  Also known as the Northern Maine Market Rules.1.1.84 Network Transmission Service or Network Service   Within the Northern Maine Transmission System, Network Transmission Service affords the customer the ability to have Energy delivered from multiple designated Points of Receipt to multiple designated Points of Delivery for a single transmission charge and under a single contract.1.1.85 New Brunswick Power Corporation ("NB Power")   An electric utility owned and operated by the Province of New Brunswick, Canada and which owns the only direct transmission Interfaces with Northern Maine.1.1.86 New Brunswick System Operator (“NBSO”) - The independent body whose primary responsibilities are to ensure the security and reliability of the New Brunswick electricity system and to facilitate the development and operation of a competitive electricity market in New Brunswick and serves as the Balancing Authority for the Maritimes Area.1.1.87 New Brunswick Transmission System   The transmission system owned and operated by New Brunswick Power Corporation.1.1.88 New England Power Pool ("NEPOOL")   The wholesale electricity market operating in most of New England (excluding Northern Maine).1.1.89 North American Electric Reliability Council ("NERC")   An organization formed after the 1965 Northeast blackout to coordinate reliability activities in North America, or successor organization.1.1.90 Northeast Power Coordinating Council ("NPCC")   A regional reliability council in the northeast United States and one (1) of the regional reliability councils in the North American Electric Reliability Council, or successor organization.1.1.91 Northern Maine   That portion of Aroostook, Washington, and Penobscot Counties, Maine that, as of the Effective Date of the ISA Tariff, is served on a retail basis by Eastern Maine Electric Cooperative, Houlton Water Company, Maine Public Service Company, and Van Buren Light &amp; Power District, and which is not a part of ISO-NE.1.1.92 Northern Maine Area Operator ("NMAO")   The:  (i) ISA and the Transmission System Operators; or (ii) Transmission System Operators at any time when they are acting on behalf of the ISA pursuant to the terms of the ISA Tariff.1.1.93 Northern Maine Market   The market for all products and reliability-related services administered by the ISA under the ISA Tariff.1.1.94 Northern Maine Market Rules ("NMMR") - Those rules and operating procedures developed, implemented, interpreted and enforced by the ISA pursuant to Section 4.2 of the ISA Tariff.1.1.95 Northern Maine/NB Power Interfaces   The electrical connections between Maine Public Service Company and NB Power and between Eastern Maine Electric Cooperative and NB Power.1.1.96 Northern Maine Transmission System (“NMTS”)   The total of all transmission facilities located in Northern Maine and operated in accordance with the Commission’s Order No. 888, and the Commission’s subsequent orders and decisions with respect thereto.1.1.97 Northern Maine Working Group ("NMWG")   The four (4) Northern Maine T&amp;D Utilities.1.1.98 Open Access Same Time Information System (“OASIS”)   An information system and standards of conduct implemented pursuant to the requirements of 18 C.F.R. § 37 of the Commission’s regulations.1.1.99 Open Access Transmission Tariff (“OATT”) – The transmission tariff of a Transmission Owner.1.1.100 Operating Plan   The plan for the daily scheduling and dispatch of Resources created in the manner described in Section 4 of the ISA Tariff and in Northern Maine Market Rule #2.1.1.101 Operating Reserves   Resource Capacity available above firm system Demand that is reserved for and capable of providing for regulation within the hour to cover load variations and power supply reductions.  It consists of spinning reserve and non spinning reserve.1.1.102 Operating Year - Means:  (i) for the ISA's first Operating Year, those consecutive calendar months beginning with the month in which the ISA first provides service under the ISA Tariff and ending on December 31; and (ii) each calendar year thereafter.1.1.103 Outage Coordination   All information submitted in relation to Maintenance Outages must be submitted in accordance with Northern Maine Market Rule #6.1.1.104 Payment Date - The 20th day of the month following the month being invoiced and includes any adjustments for previous months.  If the 20th is not a business day, the Payment Date is the last business day prior to the 20th.1.1.105 Point to Point ("PtP") Transmission Service or PtP Service   Transmission service that is the same as or similar to "Point to Point Transmission Service" as defined in the FERC Order  888 Pro Forma Tariff.1.1.106 Preferred Plan – The proposal or combination of proposals identified in accordance with the provisions of Northern Maine Market Rule #9, System Planning, that are best designed to alleviate an existing or emerging transmission constraint.1.1.107 Products and Services Agreement ("PSA")   The agreement between NB Power and the four (4) Northern Maine T&amp;Ds to be administered by the ISA.1.1.108 Proposed Maintenance Outage - A Maintenance Outage which has been submitted to the ISA but which has not been classified as an Approved Maintenance Outage.1.1.109 Real time   The time period as actual events occur.1.1.110 Regional Transmission Group ("RTG")   A group of utilities that are working together to coordinate various aspects of the operation, use and expansion of the Northern Maine Transmission System in their region and the connection with other regions.1.1.111 Regulation and Load Following Service ("R&amp;LFS") - Services under the NBSO transmission tariff which are used to accommodate the moment to moment variations in the load and/or frequency in the Maritime Control Area.1.1.112 Reliability Coordinator – The entity that is the highest level of authority who is responsible for the reliable operation of the bulk electric system, has the wide Area view of the bulk electric system, and has the operating tools, processes and procedures, including the authority, to prevent or mitigate emergency operating situations in both next-day analysis and Real-time operations.1.1.113 Reliability Standards – The standards for reliability that are used in Northern Maine and are described in Northern Maine Market Rule #8, Connections, Retirements and Demand-Side Management Programs.1.1.114 Resource   Any source of electric Energy, Capacity, or ancillary services, firm or non firm, including any electric Generating Unit, combination of Generating Units, Demand-Side Management, contractual right to purchase electric Capacity, Energy, or Ancillary Services, used to supply Load with Energy and meet Capacity Obligations in the Northern Maine Market.1.1.115 Retail Transaction - A transaction where the purchaser is the end user of the Energy product.1.1.116 Retirement Applicant - An entity that wishes to retire a Generating Unit or group of Generating Units located in Northern Maine in accordance with the requirements of Northern Maine Market Rule #8, Connections, Retirements and Demand-Side Management Programs.1.1.117 Schedules   Information provided to or by the ISA, consisting of a schedule of Demand, including losses, which is matched by a schedule of Resources (Energy and associated Capacity) and necessary transmission rights.1.1.118 Settlement Period   The period beginning at the start of the hour and ending at the end of that hour.1.1.119 System Emergency   A condition on NB Power's system or on any system with which it is interconnected that, in NB Power's reasonable judgment at the time of the occurrence, is imminently likely to result in disruption of service to customers or is imminently likely to endanger life or property.1.1.120 Tariff - The Northern Maine Independent System Administrator Tariff.1.1.121 T&amp;D Utility   (i) If stated as "a T&amp;D Utility", a distribution utility providing retail electric service under the regulation of the Maine Public Utilities Commission; and (ii) if stated as "the T&amp;D Utility", all or any of Eastern Maine Electric Cooperative, Houlton Water Company, Maine Public Service Company, and Van Buren Light &amp; Power District.1.1.122 Ten Minute Non Spinning Reserve ("TMNSR")   The non synchronized reserve Capacity that is fully available in ten minutes.1.1.123 Ten Minute Spinning Reserve ("TMSR")   The synchronized reserve Capacity that is fully available in ten minutes.1.1.124 Thirty Minute Operating Reserve ("TMOR")   The sum of synchronized and non synchronized reserve Capacity that is fully available in thirty minutes excluding Capacity assigned to meet Ten Minute Spinning and Non-Spinning Reserve requirements.1.1.125 Tie Line Interruption Service ("TLIS")   Tie Line Interruption Service is available under the Products and Services Agreement when ISO NE determines that a contracted south to north delivery cannot be made on the Maine Electric Power Company transmission line due to minimum tie line flow constraints.1.1.126 Total Transfer Capability ("TTC")   The amount of electric power that can be transferred over the interconnected transmission network in a reliable manner while meeting all of a specific set of defined pre  and post contingency system conditions.1.1.127 Trading Day   The Trading Day is the 24 hour period beginning with the hour ending 0100 and ending with the hour ending 2400, as adjusted for the changes to and from Daylight Savings Time.1.1.128 Transmission Customer   Any entity receiving transmission service pursuant to a Transmission Tariff.1.1.129 Transmission Owner ("TO")   The owner of transmission level facilities in Northern Maine.1.1.130 Transmission Service Access Fee - The fee for transmission access for any transmission service in the Northern Maine Market as prescribed in Section 6 of the ISA Tariff.1.1.131 Transmission System Operator ("TSO")   Any entity operating transmission facilities in Northern Maine pursuant to a Transmission Tariff.  Eastern Maine Electric Cooperative and Maine Public Service Company are the only TSOs in Northern Maine.1.1.132 Transmission Tariff - A standard set of rates, terms and conditions for the provision of transmission service that is in compliance with the requirements of the Commission’s Order No. 888, and the Commission’s subsequent orders and decisions with respect thereto.1.1.133 User   Any entity that is not a Market Participant and that uses the Northern Maine Transmission System.1.1.134 Van Buren Light &amp; Power District ("VBL&amp;PD")   A municipally-owned electric utility operating in Northern Maine and performing the functions of a T&amp;D Utility.1.2 ACRONYMS1.2.1.      ADR   Alternative Dispute Resolution1.2.2. AGC   Automatic Generation Control1.2.3. ATC - Available Transfer Capability1.2.4. BECP - Balancing Energy Clearing Price1.2.5. BER - Balancing Energy Requirement1.2.6. BQ - Billable Quantity1.2.7. CAO - Control Area Operator1.2.8. CEP - Competitive Electricity Provider1.2.9. COU - Consumer Owned Utility1.2.10. DSM – Demand-Side Management1.2.11. EMEC - Eastern Maine Electric Cooperative1.2.12. FERC - Federal Energy Regulatory Commission1.2.13. FPA - Federal Power Act1.2.14. HOL - High Operating Limit1.2.15. HWC - Houlton Water Company1.2.16. IOU - Investor Owned Utility1.2.17. ISA - Independent System Administrator1.2.18. ISO - Independent System Operator1.2.19. ISO NE - ISO New England1.2.20. LOL - Low Operating Limit1.2.21. MEPCO - Maine Electric Power Company1.2.22. MPS - Maine Public Service Company1.2.23. MPUC - Maine Public Utilities Commission1.2.24. NB Power - New Brunswick Power Corporation1.2.25. NBSO – New Brunswick System Operator1.2.26. NEPOOL - New England Power Pool1.2.27. NERC - North American Electric Reliability Council1.2.28. NMAO - Northern Maine Area Operator1.2.29. NMMR - Northern Maine Market Rule1.2.30. NMTS – Northern Maine Transmission System1.2.31. NMWG - Northern Maine Working Group1.2.32. NPCC - Northeast Power Coordinating Council1.2.33. OASIS - Open Access Same-Time Information System1.2.34. OATT – Open Access Transmission Tariff1.2.35. PSA - Products and Services Agreement1.2.36. PtP - Point to Point Transmission Service1.2.37. R&amp;LFS - Regulation &amp; Load Following Service1.2.38. RTG - Regional Transmission Group1.2.39. TLIS - Tie Line Interruption Service1.2.40. TMNSR - Ten-Minute Non-Spinning Reserve1.2.41. TMOR - Thirty-Minute Operating Reserve1.2.42. TMSR - Ten-Minute Spinning Reserve1.2.43. TO - Transmission Owner1.2.44. TSO - Transmission System Operator1.2.45. TTC - Total Transfer Capability1.2.46. VBL&amp;PD - Van Buren Light &amp; Power DistrictDOCUMENT HISTORYApproved by the ISA Board of Directors August 23, 1999Revision 1 approved by the ISA Board of Directors November 16, 2005Revision 2 approved by the ISA Board of Directors November 28, 2006Revision 3 approved by the ISA Board of Directors April 5, 2007Revision 4 approved by the ISA Board of Directors July 10, 2007</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>4</record_id>
      <option_code>A</option_code>
      <record_title>Scheduling and Dispatch</record_title>
      <record_content_desc>NMMR #2</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>4000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>2 SCHEDULING AND DISPATCH2.1 SCHEDULINGThis rule specifies the processes and data requirements for the scheduling of Energy, Ancillary Services and transmission with the Independent System Administrator (ISA).Additionally, this Northern Maine Market Rule (NMMR) #2 – Scheduling and Dispatch describes the ISA’s scheduling process with the Balancing Authority for purposes of scheduling Ancillary Services and controlling the flows on the Northern Maine/NB Power Interfaces (i.e., the Maine Public Service Company (MPS) Interface and the Eastern Maine Electric Cooperative (EMEC) Interface).2.1.1 Scheduling PrinciplesThe ISA will develop an Operating Plan which ensures that sufficient Resources (Generating Units and imports) are scheduled by the Competitive Electricity Providers (CEPs) to meet the Forecast Demand of the CEPs.  This will be accomplished through the Schedules submitted by the CEPs.  Differences between the ISA’s Forecast Demand and the sum of the Demand Schedules submitted by the CEPs represent the projected Balancing Energy Requirements (BERs).  The ISA will satisfy the actual BER through the use of Regulation &amp; Load Following Service (R&amp;LFS) pursuant to the NBSO transmission tariff and, if necessary, through the use of imbalance Energy under the NBSO transmission tariff.Under the NBSO transmission tariff, the ISA will purchase R&amp;LFS at both the MPS and EMEC Interfaces on either a monthly or annual basis.  Balancing Energy will be available under the terms of the NBSO transmission tariff and from any other entity which the ISA determines can provide, on a reliable basis, comparable and competitively priced services.The MPS and EMEC Interfaces will be scheduled as separate and distinct Interfaces.  Consequently, the ISA’s Forecast Demand will separately identify its projection of the Demand behind each of the Interfaces (i.e., a Forecast Demand will be created for both the MPS and EMEC regions).  In order for a CEP to submit a Balanced Schedule the CEP must have met its Capacity Obligation and submit a Schedule for each region in which:  (i) Energy from Generating Units and imports designated to meet the CEP’s energy requirement and Energy from other eligible sources; and (ii) Firm Energy to replace energy unavailable due to outages of such Generating Units and imports equal the sum of the CEP’s scheduled:  (iii) Demand; (iv) allocated share of Transmission Losses; (v) exports; and (vi) inter-CEP Energy trades.2.1.2 Day-Ahead Scheduling2.1.2.1 Day-Ahead Scheduling ProcessThe Day-Ahead Scheduling Process establishes the Operating Plan for the next Trading Day.  The Trading Day is the 24 hour period beginning with the hour ending 0100 and ending with the hour ending 2400, as adjusted for changes to and from Daylight Savings Time.  The Day-Ahead Scheduling Process begins at 0800 on the day ahead of the Trading Day.  CEPs and Generators are required to submit Day-Ahead Schedules, provided that a Generator is not required to submit a schedule for a Generating Unit serving native load if the output of the Generating Unit is scheduled by a CEP to serve native load.  The process is as follows (see Section 2.1.5 for details of the CEP and exporting Generator submittal requirements), all times being approximate:0815:       ISA posts its Forecast Demand by region and the total Northern Maine Operating Reserve requirements for the Trading Day (and for the remainder of the current Trading Day).0930:       Generators and CEPs submit their Schedules to the ISA for the entire Trading Day.  This is the Daily Trading Deadline.  Each of the Generator and CEP Schedules must be a Balanced Schedule.  Note that a Generator or CEP may allow another Generator or another CEP to submit Schedules on its behalf (see Section 2.1.5 - Submittal of Schedules).1000:       ISA validates all Schedules, ensuring that each of the Generator and CEP Schedules are Balanced Schedules.  ISA notifies the affected Generators of their composite output as scheduled by all CEPs, and the Generators must either accept or reject the composite output schedule.  If rejected, the Generator must inform the ISA of which CEP’s Schedule has been rejected.  The ISA notifies the CEPs of any apparent scheduling errors, including Generator rejections and Schedule imbalances.  If a Schedule imbalance or Generator rejection is not immediately resolved by the parties affected, the ISA will adjust the Schedules in a manner which uses the lower claimed value for the transaction which was not agreed by both parties.  Any such Schedule changes will be made with consideration given to the Low Operating Limits (LOLs) and High Operating Limits (HOLs) of the Generating Units.1030:       ISA notifies Generators and/or CEPs of changes to their Schedules resulting from the validation process.1100:       ISA develops the combined Day-Ahead Schedule (Operating Plan) for the Trading Day.  ISA submits to the Balancing Authority a schedule of imports and exports on each Interface.1400:       ISA provides the Operating Plan to the Transmission System Operators (TSOs).  Non-confidential elements of the Operating Plan (such as the ISA Forecast Demand, composite CEP scheduled Demand, and the projected BERs for each region, etc.) are posted on the ISA Web-site.  Specific Generating Unit scheduled dispatch levels are also issued directly to the appropriate Generators/CEPs.2.1.2.2 Operating PlanThe ISA’s Operating Plan:  (i) specifies the scheduled dispatch level of each Generating Unit based on the Generator and CEP Schedules; (ii) confirms the sources of Balancing Energy and Operating Reserves for each hour of the Trading Day; and (iii) provides any other information necessary for the Northern Maine Area Operator (NMAO – together the ISA and TSOs) to administer the market and operate the system during the Trading Day.  The Operating Plan will be updated with each subsequent Hour-Ahead Schedule.2.1.2.3 Weekends and HolidaysDay-Ahead Schedules will not be permitted on weekends and holidays.  Therefore the Day-Ahead Schedules submitted on the last working day prior to a weekend or holiday period shall cover the entire period, including the first working day following the weekend or holiday period.  Hour-Ahead Schedules (Section 2.1.3 below) will be permitted on weekends and holidays, but with special validation restrictions.2.1.3 Hour-Ahead SchedulingThe Hour-Ahead Scheduling Process establishes the Operating Plan for the next hour.  Generators and CEPs will be permitted to submit Hour-Ahead Schedules to the NMAO at any time after the Day-Ahead Operating Plan for the Trading Day has been issued.  However, the Hour-Ahead Schedule for any specific hour must be submitted prior to each TSO’s Hourly Trading Deadline (currently 30 minutes before the hour) for that hour.  If multiple Hour-Ahead Schedules are submitted over time for the same specific hour, the last Hour-Ahead Schedule submitted for that hour prior to the Hourly Trading Deadline for that hour will be used to evaluate changes to the Schedule for that hour.  The NMAO will only keep a record of the Hour-Ahead Schedule actually evaluated for each hour.The ISA will use the same Schedule validation procedures used for the Day-Ahead Scheduling Process to ensure that each Generator and CEP Hour-Ahead Schedules is a Balanced Schedule.  Accepted Hour-Ahead Schedules will be used to update the Operating Plan for the next hour.Due to the limited staffing of the TSOs on evenings, weekends and holidays, any Hour-Ahead Schedules on evenings, weekends and holidays which fail the validation checks may be automatically rejected.  In the case of such rejection, the previously approved Hour-Ahead Schedule will be used.The NMAO will adjust Schedules on an hourly basis with the Balancing Authority and the Generators.  The NMAO’s Hour-Ahead Scheduling Process with the Balancing Authority is as follows:a) Update/confirm the Day-Ahead Schedule of Operating Reserves.b) Schedule imports and exports on behalf of Generators and CEPs.  Generators and CEPs are responsible for securing their own transmission path from the source to the destination point.c) Schedule transactions between the MPS and EMEC regions on behalf of Generators and CEPs.  Generators and CEPs are responsible for securing their own transmission path from the source to the destination point.d) Schedule Tie Line Interruption Service (TLIS).  Upon notification from the Balancing Authority of an impending Maine Electric Power Company (MEPCO) tie line flow constraint, the NMAO will either accept the TLIS or implement alternative arrangements.  CEPs relying on the MEPCO tie line must specify in their Day-Ahead Schedule or Hour-Ahead Schedule whether and how they authorize the NMAO to respond to a MEPCO tie line constraint.2.1.4 Development of Forecast DemandThe ISA will develop a Day-Ahead and Hour-Ahead Forecast Demand separate and independent of the Forecast Demand derived from the aggregation of the Demand Schedules provided by the CEPs.  The ISA will rely on its Day-Ahead Forecast Demand to project requirements for the Balancing Energy Market.A separate Forecast Demand will be developed for both the MPS and the EMEC regions, where the term region refers to the total electrical load behind the respective MPS and EMEC Interfaces.  The sum of the two regional Forecast Demands will constitute the total ISA Forecast Demand.The process for developing the Forecast Demand includes the use of a weather and Demand database and personal experience and knowledge of the relationship between Demand and weather, as well as other variables such as sociological conditions.  A proven method of Demand forecasting is to look for a historical day with weather similar to the Trading Day being forecast.  Adjustments for sociological impacts, such as the effect of school schedules or major events will also be made.MPS and EMEC will make their historical hourly Demand databases (at least one year of weather and Demand data) available to the ISA.  Alternatively or initially, MPS and EMEC could provide the Demand forecasting function for the ISA on a contract basis.2.1.5 Submittal of Schedules – Exporting Generator and CEP RequirementsThis section specifies the information that must be included in the Schedules submitted by exporting Generators and CEPs.  It is incumbent upon CEPs to coordinate with the other parties to their bilateral contracts to ensure that the Schedules submitted are balanced.  Schedules which are not balanced will either be adjusted by the ISA as indicated in Section 2.1.2.1 or, in the case of Hour-Ahead Schedules made during periods the ISA is not staffed, may be rejected. As indicated in Section 2.1.2.1, exporting Generators and CEPs may assign their scheduling requirement to another Generator or CEP.  Authorization permitting such assignments, duly executed by the assignor and the assignee, must be provided to the ISA with or prior to submission of the Schedules.2.1.5.1 Exporting Generator RequirementsThe following information must be provided by exporting Generators for each of their Generating Units being used for exports from one of the Northern Maine regions:a) Settlement Period (specifies the Trading Day and Settlement Period (hour) to which the submitted information applies).b) Exporting Generating Unit ID.c) Hourly scheduled output of the exporting Generating Unit, in MWh.  The hourly scheduled output of the exporting Generating Unit shall be disaggregated to reflect:  (i) each CEP’s entitlement share, if any; and (ii) exports out of the Northern Maine Market.  Export schedules (including those attributable to transactions between the MPS and EMEC regions) must reflect transmission losses from the Generating Unit to the relevant Interface.Note that exports out of the Northern Maine Market will be netted from the ISA’s Interface Schedules and will thus be separately subject to the provisions the of NBSO transmission tariff.  When Generating Units are exporting less than their full hourly output, the portion scheduled to serve internal CEP Demand shall be deemed to flow as scheduled.d) Hourly Schedule of transactions between the MPS and EMEC regions, in MWh.  The exporting Generator self-schedule must reflect transmission losses from the Generating Unit to the relevant Interface.  Note that exporting Generators are also responsible for the transmission losses through NB Power and may, therefore, have their exporting Generating Units dispatched above their self-schedules from time-to-time to offset any such losses.2.1.5.2 CEP RequirementsSince CEPs, in general, will be responsible for all losses from the system input meters (Generating Unit buses and NB Power Interfaces) to the point of receipt (customer meter) less losses attributable to exporting Generating Units, the CEPs’ hourly Schedules should reflect all applicable losses.  In the case of transactions between the MPS and EMEC regions, CEPs will not be responsible for losses beyond their region’s Interface.  The loss factors for each Transmission and Distribution (T&amp;D) Utility, by voltage level, will be posted on the ISA Web-site.The following information must be provided by each CEP:a) Settlement Period (specifies the Trading Day and Settlement Period (hour) to which the submitted information applies).b) CEP ID.c) The IDs of any Resources (Generating Units and imports) designated to meet the CEP’s Capacity Obligation and from which the CEP is entitled to receive any output during any portion of the Trading Day.d) The IDs of any Firm Energy acquired to replace energy unavailable due to outages of Generating Units and imports designated to meet the CEP’s Capacity Obligations and from which the CEP is entitled to receive any output during any portion of the Trading Day.e) The IDs of any CEPs with which the CEP will execute inter-CEP transactions during any portion of the Trading Day.  Note that, for settlement purposes, inter-CEP transactions will be treated as a transfer of Resources rather than as a transfer of Demand responsibility.f) Hourly scheduled Demand of the CEP, in MWh.  The hourly scheduled Demand shall be disaggregated by region (MPS and EMEC) and shall reflect the amount to be provided by each Resource identified in (c) and the inter-CEP transactions identified in (d).Note that imports by any CEPs with separate inadvertent bandwidths on an Interface into the Northern Maine Market (see Section 2.1.1) will be netted from the ISA’s Interface Schedules and will thus be separately subject to the provisions of the NBSO transmission tariff.g) CEPs relying on the MEPCO tie line must inform the ISA if they elect to respond to a MEPCO tie line flow constraint themselves through the next available Hour-Ahead Schedule, rather than take the TLIS.  Note that TLIS can only be invoked by the NMAO.2.1.6 Scheduling of Ancillary ServicesAll Ancillary Services requirements will be procured under the NBSO transmission tariff or from any other entity which the ISA determines can provide, on a reliable basis, comparable and competitively priced services.  The ISA will schedule Ancillary Services on a Day-Ahead basis.2.1.7 Scheduling of Transmission2.1.7.1 Transmission ReservationsGenerally, all Energy Schedules accepted by the NMAO will require that the exporting Generator and/or CEP obtain transmission path reservations between the Energy sources and the Energy sinks from one of the Northern Maine Transmission Owners (TOs).  All transmission path reservations will be billed at standard prices per FERC regulation and the individual TO Transmission Tariffs.The three transmission reservation service offerings are:  (i) Network Transmission Service; (ii) Firm Point-to-Point Transmission Service; and (iii) Non-Firm Point-to-Point Transmission Service.  Network Transmission Service is a reservation for movement of Energy between all points on the local transmission network.  Customers must purchase a contract sufficient to supply the customer’s Demand.  Point-to-Point (PtP) Transmission Service is between multiple points of receipt and multiple points of delivery.  Point-to-Point Transmission Service may be either Firm or non-Firm.  Point-to-Point customers must purchase a firm or non-firm reservation in a specified amount sufficient to support the Energy Schedule.2.1.7.2 Transmission Scheduling Principlesa) The NMAO will check every Energy Schedule to see that either the CEP serving the Demand or the exporting Generator holds a valid transmission reservation posted on the NMAO’s Open Access Same-time Information System (OASIS) as required.  Initially, transactions under Network Transmission Service will not require an OASIS posting.  FERC may, however, require Network Transmission Service transactions to be explicitly scheduled in the future.  It is anticipated that the majority of the Northern Maine Demand will be served under Network Transmission Service.b) The NMAO shall receive and approve all requests for transmission on behalf of the TOs and shall enforce the specified rules of the TO Transmission Tariffs.c) The NMAO will calculate and update for all potentially constrained transmission paths the Available Transfer Capability (ATC), which is defined by the North American Electric Reliability Council (NERC) as the Total Transfer Capability (TTC) less reserve margin less previously reserved Capacity (Committed Uses).d) The NMAO will post and update on OASIS the currently available transmission products and associated parameters.e) The NMAO will ensure that any transmission path discounts offered by the individual TOs are administered consistently and fairly.f) The NMAO will be responsible for the fair and equitable curtailment of any transmission reservations should any transmission path become constrained, all in accordance with the individual TO Transmission Tariffs.g) The ISA or NMAO may become a transmission customer under the NBSO transmission tariff to schedule transmission with the Balancing Authority.h) The NMAO will forward to the Northern Maine TOs on a periodic and timely basis all records associated with actual transmission reservations for the purposes of transmission billing under the individual TO Transmission Tariffs.2.1.7.3 Day-Ahead Transmission Scheduling ProcessGenerally, all transmission reservations for the following day must be submitted prior to the time Day-Ahead Schedules are received.  Reservation updates/changes are necessary only to the extent that existing reservations are insufficient to cover Hour-Ahead Schedules.2.1.7.4 OASIS and Electronic Posting of Transmission Reservation InformationThe NMAO will operate the Northern Maine OASIS page (node) on the ISO-NE OASIS server or on a comparable server.  This requires that the NMAO be registered with the OASIS security agent, registered with ISO-NE, and registered with NERC as a transmission provider.  The NMAO will also be responsible for maintaining internet access necessary to communicate with OASIS on a 24 by 7 basis either through a registered internet service provider or through direct connection to the internet.The NMAO will be responsible for seeing that the details of all transmission reservations on all Northern Maine transmission paths are accurate and responded to in accordance with all rules and regulations.2.2 DISPATCHThe TSOs, with ISA oversight, will operate the system in accordance with the daily Operating Plan developed by the ISA and updated through the Hour-Ahead Scheduling Process.  To the extent deviations from the current Operating Plan are deemed necessary, dispatch levels will be determined with the objectives of:  (i) maintaining system reliability; and (ii) complying with the Schedules.  Any Dispatch Instructions issued by a TSO to a Generating Unit which request that Generating Unit to deviate from its Scheduled output may result in the Generator being eligible for compensation under NMMR #4 – Settlement and Billing.DOCUMENT HISTORYApproved by the ISA Board of DirectorsAugust 23, 1999Revision 1 approved by the ISA Board of DirectorsNovember 28, 2006Revision 2 approved by the ISA Board of DirectorsApril 5, 2007Revision 3 approved by the ISA Board of DirectorsJuly 10, 2007</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>2</record_id>
      <option_code>A</option_code>
      <record_title xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_content_desc>Index</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>2000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data>e1xydGYxXGZiaWRpc1xhbnNpXGFuc2ljcGcxMjUyXGRlZmYwXGRlZmxhbmcxMDMzXGRlZmxhbmdmZTEwMzN7XGZvbnR0Ymx7XGYwXGZyb21hblxmcHJxMlxmY2hhcnNldDAgVGltZXMgTmV3IFJvbWFuO317XGYxXGZyb21hblxmY2hhcnNldDAgVGltZXMgTmV3IFJvbWFuIEJvbGQ7fX0NCntcc3R5bGVzaGVldHsgTm9ybWFsO317XHMxIGhlYWRpbmcgMTt9fQ0KXHZpZXdraW5kNFx1YzFccGFyZFxsdHJwYXJca2VlcFxrZWVwblxzYjEyMFxzYTYwXHFjXGJcZjBcZnMzNiBOb3J0aGVybiBNYWluZSBNYXJrZXQgUnVsZXMgSW5kZXhccGFyDQpccGFyZFxsdHJwYXJca2VlcFxrZWVwblxzYjEyMFxzYTYwXHFqXGIwXGZzMjBccGFyDQpccGFyZFxsdHJwYXJca2VlcFxzMVxmaS0xNDQwXGxpMTQ0MFxzYjEyMFxzYTYwXHFqXHR4MTQ0MFxrZXJuaW5nMjhcYlxjYXBzXGZzMjQgTk1NUiAjMS5cdGFiXGZzMjAgRGVmaW5pdGlvbnMgYW5kIGFjcm9ueW1zXHBhcg0KXHBhcmRcbHRycGFyXGtlZXBcczFcZmktMTQ0MFxsaTE0NDBcc2IxMjBcc2E2MFxxalxmczI0IE5NTVIgIzIuXHRhYlxmczIwIFNjaGVkdWxpbmcgYW5kIGRpc3BhdGNoXHBhcg0KXGZzMjQgTk1NUiAjMy5cdGFiXGZzMjAgYW5jaWxsYXJ5IHNlcnZpY2VzIG1hcmtldFxwYXINClxmczI0IE5NTVIgIzQuXHRhYlxmczIwIHNldHRsZW1lbnQgYW5kIGJpbGxpbmdccGFyDQpcZnMyNCBOTU1SICM1Llx0YWJcZnMyMCBNb25pdG9yaW5nIGFuZCBBdWRpdGluZ1xwYXINClxmczI0IE5NTVIgIzYuXHRhYlxmczIwIE9VVEFHRSBDT09SRElOQVRJT05ccGFyDQpcZnMyNCBOTU1SICM3Llx0YWJcZnMyMCBJTVBPU0lUSU9OIE9GIFNBTkNUSU9OU1xwYXINClxmczI0IE5NTVIgIzguXHRhYlxmczIwIENPTk5FQ1RJT05TLCBSRVRJUkVNRU5UUyBBTkQgREVNQU5ELVNJREUgTUFOQUdFTUVOVCBQUk9HUkFNU1xwYXINClxmczI0IE5NTVIgIzkuXHRhYlxmczIwIFNZU1RFTSBQTEFOTklOR1xwYXINClxwYXJkXGx0cnBhclxrZWVwXGtlZXBuXHNiMTIwXHNhNjBccWpca2VybmluZzBcY2FwczBcZnMyNCBOTU1SICMxMC5cdGFiXGYxXGZzMjAgQ0FQQUNJVFkgT0JMSUdBVElPTlNccGFyDQpcYjBcZjBcZnMyNFxwYXINClxwYXINCn0NCg==</record_binary_data>
      <record_plain_text>Northern Maine Market Rules IndexDefinitions and acronymsScheduling and dispatchancillary services marketsettlement and billingMonitoring and AuditingOUTAGE COORDINATIONIMPOSITION OF SANCTIONSCONNECTIONS, RETIREMENTS AND DEMAND-SIDE MANAGEMENT PROGRAMSSYSTEM PLANNINGNMMR #10. CAPACITY OBLIGATIONS</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>1</record_id>
      <option_code>A</option_code>
      <record_title xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_content_desc>Title Page</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>1000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data>e1xydGYxXGZiaWRpc1xhbnNpXGFuc2ljcGcxMjUyXGRlZmYwXGRlZmxhbmcxMDMzXGRlZmxhbmdmZTEwMzN7XGZvbnR0Ymx7XGYwXGZyb21hblxmcHJxMlxmY2hhcnNldDAgVGltZXMgTmV3IFJvbWFuO319DQpcdmlld2tpbmQ0XHVjMVxwYXJkXGx0cnBhclxmMFxmczI0IE5vcnRoZXJuIE1haW5lIEluZGVwZW5kZW50IFN5c3RlbSBBZG1pbmlzdHJhdG9yLCBJbmMuXHBhcg0KRkVSQyBGUEEgRWxlY3RyaWMgVGFyaWZmXHBhcg0KUHJvcG9zZWQgRWZmZWN0aXZlIERhdGUgMjAxMC0wOS0zMFxwYXINCk5vcnRoZXJuIE1haW5lIE1hcmtldCBSdWxlc1xwYXINClxwYXJkXGx0cnBhclx0eDBcdHg3MjBcdHgxNDQwXHR4MjE2MFx0eDI4ODBcdHgzNjAwXHR4NDMyMFx0eDUwNDBcdHg1NzYwXHR4NjQ4MFx0eDcyMDBcdHg3OTIwXHR4ODY0MCBPcHRpb24gQ29kZSBBXHBhcg0KXHBhcmRcbHRycGFyXHBhcg0KXHBhcg0KXHBhcg0KXHBhcg0KXHBhcg0KXHBhcg0KfQ0K</record_binary_data>
      <record_plain_text>Northern Maine Independent System Administrator, Inc.FERC FPA Electric TariffProposed Effective Date 2010-09-30Northern Maine Market RulesOption Code A</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>5</record_id>
      <option_code>A</option_code>
      <record_title>Ancillary Services Market</record_title>
      <record_content_desc>NMMR #3</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>5000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>ANCILLARY SERVICESINTRODUCTIONThe purpose of Northern Maine Market Rule (NMMR) #3 – Ancillary Services is to provide details on the treatment of Ancillary Services in the Northern Maine Market.Ancillary Services RequirementsThe types of potentially “competitive” Ancillary Services which will be required in the Northern Maine Market include:Operating Reserve, in the form of Ten-Minute Spinning Reserve (TMSR) service;Operating Reserve, in the form of Ten-Minute Non-Spinning Reserve (TMNSR) service;Operating Reserve, in the form of Thirty-Minute Operating Reserve (TMOR) service; andRegulation in the form of Automatic Generation Control (AGC).In addition to these competitive Ancillary Services, the Independent System Administrator (ISA), or the Transmission Owners (TOs) on behalf of the ISA, may, as necessary, contract for voltage support in the form of reactive power and for black start capability.  Balancing Energy will be available through the Balancing Energy Market (see NMMR #2 – Scheduling and Dispatch and NMMR #4 – Settlement and Billing).  Finally, scheduling and Dispatch services will be provided by the ISA, as described in NMMR #2.The ISA will utilize the NBSO transmission tariff to obtain the Operating Reserves and the necessary Regulation services.  In addition, the ISA will consider any additional proposals to provide Operating Reserves and Regulation under contract from any other entity which the ISA determines can provide, on a reliable basis, comparable and competitively priced services and, if suitable provisions can be agreed, will bring acceptable contracts to the ISA Board of Directors for approval.Outside of any possible contracts for voltage support, there will not be any reactive power “market.”  Instead, Generating Units will be required to meet specific technical power factor requirements to participate in the Northern Maine Market.  There may be lost opportunity compensation available if a Generating Unit is asked to back-down its real power production in order to produce reactive power in excess of the technical power factor requirements.  These technical requirements are contained in the Transmission Tariffs of the TOs.  The TOs will also establish power factor requirements for Demand, connected to their transmission systems, through their Transmission Tariffs.As to the magnitude of each of the competitive Ancillary Services required, the ISA will use the Northern Maine ISA’s pro-rata share of the Ancillary Services requirements of the combined Northern Maine and Canadian Maritime Provinces system, as they vary from time to time.  The pro-rata (percentage) share to be used to determine the Northern Maine requirements will be determined and set jointly by the ISA and the Balancing Authority on a monthly basis, based on the portion of the Northern Maine Demand purchasing Ancillary Services through the ISA, under the NBSO transmission tariff (i.e., excluding the Demand of Competitive Electricity Providers (CEPs) which meet the metering and telemetering requirements of the Transmission System Operators (TSOs) and the Balancing Authority, have their own point-to-point transmission under the NBSO transmission tariff which includes their pro-rata share of the Northern Maine Ancillary Services requirements and standards, and have their own Balancing Energy on one or both of the Interfaces).  This pro-rata percentage, however, will be applied to the actual hourly Ancillary Services requirements of the combined systems.Ancillary Services ResponsibilitiesEach hour, each CEP participating in the ISA will have a requirement in each of the competitive Ancillary Services.  This requirement will be based on its pro-rata share of the hourly Northern Maine Market requirement for Ancillary Services.  Each CEP’s hourly pro-rata share will be based on its percentage share of the total Northern Maine Demand in that hour.Sources of Ancillary ServicesThe NBSO transmission tariff, which can provide all of the competitive Ancillary Services, will be utilized for all such Ancillary Services.  In addition, as indicated in Section 3.2, the ISA will consider buying such Ancillary Services from any other entity which the ISA determines can provide, on a reliable basis, comparable and competitively priced services.Acquisition Mechanism for Ancillary ServicesThe ISA will acquire the necessary Ancillary Services:through the use of the NBSO transmission tariff; orthrough any other entity which the ISA determines can provide, on a reliable basis, comparable and competitively priced services.All Ancillary Services must be under the operational control of the Northern Maine Area Operator (NMAO), consisting of the ISA and the TSOs, or the Balancing Authority.Scheduling and Dispatch of Ancillary ServicesThe scheduling and Dispatch of Ancillary Services is covered in NMMR #2 and is summarized here for convenience.  Essentially, the provision of Ancillary Services will be scheduled by the ISA as part of the Day-Ahead Scheduling Process.  In other words, the ISA will acquire the required Ancillary Services on an economic basis from the NBSO transmission tariff.The actual use of Ancillary Services will depend on system conditions and the type of service.  For example, it is expected that AGC and Balancing Energy will be used every hour.  On the other hand, it is expected that TMSR, TMNSR and TMOR will only be activated in hours where a contingency occurs.  The Energy produced by the use of the three Operating Reserves Ancillary Services will be accounted for in the Balancing Energy Market.settlement of ancillary servicesThe billing and settlement of Ancillary Services is covered in detail in NMMR #4 and is summarized here for convenience.Payments for Supply of Ancillary ServicesThe ISA’s cost of acquiring each Ancillary Service will be the result of determining the applicable price for each Ancillary Service under the terms of the applicable Ancillary Services contract.  Payments for any actual net Energy produced by the providers of the various Ancillary Services will be accounted for in the Balancing Energy Market.Charges for Use of Ancillary ServicesAfter-the-fact, the ISA will determine each CEP’s Ancillary Services responsibilities and, therefore, how many Ancillary Services each CEP “bought” from the market.  The CEPs will share the ISA’s cost of acquiring each Ancillary Service in proportion to each of their Ancillary Services purchases from the market.Ancillary Services BillingThe hourly bills for Ancillary Services will be included in the monthly ISA bill for all ISA costs and services.  Any fixed costs in any Ancillary Services contracts will be recovered over the time period for which the fixed costs apply, with equal amounts collected each hour of the time period.Performance Audits for complianceAs indicated in NMMR #5 – Monitoring and Auditing, the ISA is charged with carrying out monitoring activities for Ancillary Services.  The following sections describe the process by which the ISA will meet these responsibilities with respect to competitive Ancillary Services.  Performance standards for Ancillary Services procured under contract will be defined in the respective contracts.Performance Audit for Operating ReservesThe ISA, in coordination with the relevant TSO, will audit the performance of a Resource providing Operating Reserve by auditing its response to Dispatch Instructions received from the relevant TSO and by analysis of meter data associated with the Resource.  Such audits may not necessarily occur on the hour.  A Resource providing Operating Reserve shall be evaluated on its ability to respond in accordance with the terms of its contract.Consequences of Failure to PerformA Resource which fails a performance audit or fails to perform during normal Dispatch situations in accordance with its contract may be subject to the financial penalties as contained in the contract.  The ISA may exercise judgment in applying the penalties contained in the contract depending upon the circumstances which caused the Resource to fail the audit.Ability to Provide Ancillary Services in the FutureIf a Resource fails a performance audit or fails to perform during normal Dispatch situations in accordance with its contract, the Resource tested shall be restricted to the amount of Ancillary Service provided during the audit or actual performance for all future sales of Ancillary Services from the Resource until such time that it can be demonstrated to the ISA that the Resource is capable of delivering the previously accepted or some other specific amount of Ancillary Services.DOCUMENT HISTORYApproved by the ISA Board of DirectorsAugust 23, 1999Revision 1 approved by the ISA Board of DirectorsNovember 28, 2006Revision 2 approved by the ISA Board of DirectorsApril 5, 2007Revision 3 approved by the ISA Board of DirectorsJuly 10, 2007</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>9</record_id>
      <option_code>A</option_code>
      <record_title>Imposition of Sanctions</record_title>
      <record_content_desc>NMMR #7</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>9000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>7 IMPOSITION OF SANCTIONS7.1 Introduction7.1.1 PurposeThis Northern Maine Market Rule (NMMR) #7 – Imposition of Sanctions sets forth the procedures and standards under which the Independent System Administrator (ISA) can impose sanctions for certain intentional or repeated violations of a Market Participant’s obligations under the ISA Tariff, NMMRs, and directions of the ISA or the Transmission System Operators (TSOs, together with the ISA, the Northern Maine Area Operator (NMAO)) and/or orders pursuant thereto (collectively, "Market Participant Obligations").  The NMMRs embody procedures and standards of conduct that are intended to assure the reliability and the competitiveness and efficiency of the Northern Maine Markets.  The purpose of this NMMR is to encourage good faith adherence to the requirements of the NMMRs, and to discourage intentional or repeated violations of the ISA Tariff, NMMRs, or the directions or orders of ISA or NMAO pursuant thereto.  Therefore, the ISA's ability to impose sanctions under this NMMR is intended to deter noncompliance by Market Participants with Market Participant Obligations.  The term ISA, as used in this NMMR, refers to the Northern Maine ISA Staff, as distinct from, but operating under the authority of, the ISA Board.7.1.2 Sanctionable BehaviorSanctionable Behavior in this market rule refers to intentional or repeated noncompliance by a Market Participant with any Market Participant obligation, including an act, or failure to act, that:a) materially impairs or threatens to materially impair reliability;b) involves unexcused failure to follow ISA or NMAO orders or instructions, including, but not limited to, the Operating Plan;c) involves unexcused failure to provide to the ISA or NMAO, in certain circumstances, accurate and timely information required and requested by the ISA or NMAO; ord) involves unexcused failure to comply with the terms of the ISA Tariff or NMMRs.7.1.3 Reserved for Future Use7.1.4        Obligation to Modify NMMRsIf the NMMRs are inadequate to assure reliability and the efficiency and competitiveness of the Northern Maine Markets, the ISA is authorized, with the approval of the ISA Board, consistent with the ISA Tariff, to promulgate new or changed NMMRs to address the problem.  The sanctions set forth in this NMMR are intended, inter alia, to assure compliance by the Market Participants with the NMMRs from time to time in effect, and are not a substitute for the appropriate modification of NMMRs.  Behavior not constituting a violation by a Market Participant of its Market Participant Obligations, and not otherwise specifically made subject to sanction by another NMMR, is not Sanctionable Behavior under this NMMR.7.1.5 Reserved for Future Use7.1.6       ApplicationThis NMMR is intended to create an efficient deterrent to noncompliance by Market Participants of their Market Participant obligations.  In order for this NMMR to be an effective deterrent, the ISA shall apply this NMMR in a consistent and non-discriminatory manner.  This NMMR is not intended to sanction any failure by a Market Participant to perform any Market Participant Obligation which occurs notwithstanding the good faith efforts of the Market Participants to perform.  Neither this NMMR nor the ISA's failure to impose sanctions is intended to excuse performance by Market Participants of Market Participant Obligations.7.2 DefinitionsUnless otherwise defined herein, capitalized terms used in this NMMR have the meaning given in Section 1 of the ISA Tariff and in NMMR #1 – Definitions and Acronyms.  Each of the following capitalized terms used in this NMMR is defined as set forth below:a) Administrative Sanction has the meaning set forth in Section 7.5.1(b) of this NMMR.b) Formal Warning has the meaning set forth in Section 7.5.1(a) of this NMMR.c) Formula-Based Sanctions has the meaning set forth in Section 7.5.1(c) of this NMMR.d) Market Participant Obligations has the meaning set forth in Section 7.1.1 of this NMMR.e) Sanctionable Behavior has the meaning set forth in Section 7.1.2 of this NMMR.7.3 LIMITATIONS ON Application of Sanctions7.3.1 General Rule and PurposeThe ISA may impose sanctions on any Market Participant that engages in Sanctionable Behavior.  This Section 7.3 provides limitations on the application of sanctions in certain circumstances, such as, for example, where a Market Participant owns or leases, but does not control a facility.7.3.2 Control of ResourcesA Market Participant with operating control of a Resource, either directly or through an affiliate, may be subject to sanctions.  An ownership, lease or other interest in a Resource that does not provide a right to operating control of the Resource shall not provide the basis for imposition of sanctions.7.3.3 Special Rule for Contract RightsWith respect to a Resource that is a contract entitlement for a Resource or combination of Resources, or for the purchase of electric Energy and/or Eligible Unforced Capacity not associated with identifiable Resources, either within or outside Northern Maine:a) The Market Participant with such a Resource is entitled to rely in good faith on information as to Resource availability, capability and operating conditions supplied by the person with operating control of the Resource unless the Market Participant knew, or would have known if it had exercised the degree of diligence required by Good Utility Practice, that such information as to Resource availability, capability and operating condition were inaccurate.b) The Market Participant with such a Resource shall use its reasonable efforts to ensure operation of such Resource in accordance with the NMMRs, consistent with its rights under its contract.  The Market Participant may be subject to sanction as if it were the Market Participant with operating control of such Resource if:i) the person with operating control is not a Market Participant and engages in conduct that would be sanctionable if such person were a Market Participant; andii) the Market Participant fails to use reasonable efforts, consistent with its rights under its contract, to prevent operation that would otherwise be sanctionable.7.3.4 Transmission FacilitiesTo the extent identified in this NMMR, a Market Participant with operating control of transmission facilities may be subject to sanctions with respect to operation of such facilities.7.4 Sanctionable BehaviorA Market Participant that engages in Sanctionable Behavior, either actively or by omission, is subject to sanction under this NMMR pursuant to the process and subject to the standards, exclusions and evaluative factors set forth in this NMMR.7.4.1 Failure to Perform in Markets7.4.1.1 Failure to Meet Resource Schedules or Dispatch InstructionsFailure to meet a Resource Schedule or Dispatch Instruction means the failure of a Market Participant:a) to provide the Energy or Ancillary Services as scheduled by the NMAO pursuant to NMMR #2 – Scheduling and Dispatch; orb) to abide by the Dispatch Instructions issued by the TSOs pursuant to Section 2.2 of NMMR #2.7.4.1.2 Failure to Meet Capacity ObligationsA failure by a Market Participant to meet its Capacity Obligations can be Sanctionable Behavior.7.4.1.3 Relationship to NMMR #5Failure to perform in Northern Maine Markets may be determined based on NMMR #5, or on any other appropriate and reliable information available to the ISA.7.4.2 Inaccurate Operating Information7.4.2.1 Misrepresentation Regarding Operating ConditionsA misrepresentation regarding operating conditions means the making by a Market Participant of any statement to the NMAO regarding inability or restricted ability of its Resource to perform, or the unavailability or restricted availability of its transmission facilities, including any statement as to the existence of a Forced Outage, Force Majeure or System Emergency affecting its facilities, in circumstances where the Market Participant knew or should have known the statement to be materially inaccurate and such misrepresentation is not excused under the provisions of this NMMR.7.4.2.2 Misrepresentation of Resource AvailabilityMisrepresentation with respect to Resource availability means:a) a failure by a Market Participant to advise the NMAO as soon as reasonably practical that a Resource for which the Market Participant has submitted a Schedule to the NMAO could not respond as necessary to meet that Schedule in circumstances where the Market Participant knew or should have known such Resource’s inability to respond, unless such failure is excused under the provisions of this NMMR; orb) a failure by a Market Participant to advise the NMAO as soon as reasonably practical that one or more of its Resources for which the Market Participant will receive credit or a payment for an hour is not available, in whole or in part, where the Market Participant knew or should have known that such Resource or Resources were unavailable to meet the submitted Schedule unless such unavailability is excused under the provisions of this NMMR.7.4.2.3 Failure to Provide Resource InformationFailure of a market participant to provide the information necessary for the ISA to complete in a timely manner the North American Electric Reliability Council (NERC) required 18-month Winter and Summer Assessments (known as the C 13 report) and the Northeast Power Coordinating Council (NPCC) required weekly updates of Generating Unit and external import capability for the following week (known as the C 14 report).  7.4.2.4 Excuse for Good Faith Descriptiona) Resource performance and availability are subject to, among other factors, climatic variations and emissions, license and other limitations.  A good faith effort to describe in a Schedule the technical abilities of equipment in expected operating conditions is not subject to sanction if actual operating conditions vary.b) A Market Participant shall be deemed to have satisfied its obligation to deliver accurate information as to operating conditions or Resource availability if it had made a good faith effort to supply accurate, responsive information; inadvertent errors or omissions shall not be Sanctionable Behavior.7.4.3 Failure to Follow NMAO Instructions7.4.3.1 Failure to Follow Scheduling ProceduresFailure to comply with applicable NMMRs for scheduling or rescheduling Resource maintenance, including failure to follow an established schedule without rescheduling, which failure is determined by the ISA to be intentional on the part of the Market Participant and is not excused under the provisions of this NMMR.7.4.3.2 Failure to Follow Transmission InstructionsFailure to follow transmission instructions means:a) failure to follow routine NMAO transmission Dispatch Instructions; orb) failure to follow NMAO operating instructions during a System Emergency with respect to transmission facilities; orc) failure to comply with applicable NMMRs for scheduling or rescheduling transmission maintenance, including failure to follow an established schedule without rescheduling, which failure, in any such case, is determined by the ISA to be intentional on the part of the Market Participant and is not excused under the provisions of this NMMR.7.4.4 Failure to Provide Information7.4.4.1 Routine ReportsFailure to provide timely, accurate routine scheduled reports, which is not excused by the provisions of this NMMR.7.4.4.2 Emergencies or System DisturbancesFailure to provide timely, accurate information in response to ISA or NMAO inquiries about System Emergencies or disturbances in Northern Maine, which is not excused by the provisions of this NMMR.7.4.4.3 Special Information RequestsFailure by a Market Participant to meet an agreed schedule to provide information that the ISA needs to perform its obligations under the ISA Tariff, for purposes other than current operations, that is not contained in routine scheduled reports, or to work in good faith to establish such a schedule that is reasonable based on the complexity of the information request and the urgency of the ISA's need for the information that, in either case, is not excused by the provisions of this NMMR.7.4.4.4 Market Settlement and Billing InformationFailure to provide timely or accurate billing or metering information or similar information used in settlement and billing under NMMR #4 – Settlement and Billing, which is not excused by the provisions of this NMMR.7.4.4.5 Resource InformationFailure to provide, in response to an NMAO inquiry, pertinent information that a Market Participant knew or should have known about the ability of its Resource to perform, which failure is not excused by the provisions of this NMMR.7.4.4.6 Timeliness and Accuracya) If a Market Participant, for good cause, requests an extension of time to deliver information subject to a routine scheduled report or a special information request, the ISA shall grant a reasonable extension, and failure to provide information by the original delivery date shall not be Sanctionable Behavior.b) A Market Participant shall be deemed to have satisfied its obligation to deliver accurate information if it has made a good faith effort to supply accurate, responsive information; inadvertent errors or omissions shall not be Sanctionable Behavior.7.4.5 Violations of Orders or DirectionsFailure of a Market Participant to follow an ISA direction or order issued pursuant to the ISA’s authority under the ISA Tariff and Market Rules.7.4.6 Certain Behavior Excused7.4.6.1 Force MajeureNo failure by a Market Participant to perform Market Participant Obligations shall be Sanctionable Behavior to the extent and for the period that the Market Participant's inability to perform is caused by an event or condition of Force Majeure affecting the Market Participant; provided that the Market Participant gives notice to the NMAO of the event or condition as promptly as possible after it knows of the event or condition and makes all reasonable efforts to cure, mitigate or remedy the effects of the Force Majeure event or condition.7.4.6.2 Safety, Licensing or Other RequirementsNo failure by a Market Participant to perform Market Participant Obligations shall be Sanctionable Behavior if the Market Participant is acting in good faith to preserve the safety of persons or the safety or integrity of equipment subject to Dispatch Instructions or to comply with facility licensing, environmental or other requirements of law.7.4.6.3 EmergenciesNo failure by a Market Participant to perform Market Participant Obligations shall be Sanctionable Behavior if the Market Participant is acting in good faith and consistent with Good Utility Practice to preserve system reliability in a System Emergency or other system disturbance; provided that a Market Participant shall not override direct NMAO instructions except in cases described in Section 7.4.6.4.7.4.6.4 Conflicting DirectivesTo the extent that any action or omission by a Market Participant is specifically required by the NMMRs or by logged NMAO Dispatch Instructions, such action or omission shall not be Sanctionable Behavior.7.4.7 Interpretation7.4.7.1 Intenta) Where any action or failure to act requires that behavior be intentional to constitute Sanctionable Behavior, the ISA may make a finding that behavior is intentional if it finds:i) direct evidence of intent;ii) evidence of reckless endangerment of reliability; oriii) evidence of a pattern of unexcused behavior or circumstances from which the ISA may reasonably infer that the behavior was intentional.In making an inference as to intent pursuant to clause (iii) above, the ISA shall consider the financial benefits or detriments to the Market Participant of its behavior and the adequacy of any alternative explanation provided by the Market Participant for its behavior.  Actions taken by a Market Participant in good faith shall not be viewed as part of a pattern of unexcused behavior or otherwise serve as the basis of a finding of intent.b) The ISA shall also consider the degree to which the Market Participant's behavior materially impaired or threatened to materially impair reliability or the competitiveness or efficiency of the Northern Maine Markets and shall not infer intent pursuant to clause (iii) above unless the ISA finds that the Market Participant's behavior materially impaired or threatened to materially impair reliability or the competitiveness or efficiency of the Northern Maine Markets.  Small variations from permitted deviations or specified time limits shall be presumed to be inadvertent unless there is specific evidence to the contrary.  Behavior that would materially impair reliability or the competitiveness or efficiency of the Northern Maine Markets if it were engaged in on a widespread basis by other Market Participants to the same degree and at the same time as by the Market Participant engaging in the behavior, shall be deemed to threaten to materially impair reliability or the competitiveness or efficiency of the Northern Maine Markets, as the case may be.7.4.7.2 KnowledgeWhere any section of this NMMR requires that the ISA determine that a Market Participant "knew or should have known" particular information as an element of a determination that Sanctionable Behavior has occurred, the ISA may only make a finding based on evidence that the Market Participant's operating personnel, other persons responsible for communicating such information to the ISA, or management personnel supervising such persons:a) knew the relevant information;b) had the relevant information readily available to them in normal control room displays, operating records, or otherwise; orc) failed to obtain the relevant information, and such information was readily available to them from third parties, but only to the extent that failure to obtain such third-party information constitutes reckless endangerment of reliability.The ISA may consider a Market Participant's efforts (or lack of efforts) to investigate a Resource's failure to perform, its efforts to correct any deficiencies and the Market Participant's conclusions as to whether they have been corrected.  Failure to obtain information that is readily available as described in clauses (a) or (b) above is excused during the continuance of the circumstances described in Sections 7.4.6.1 through 7.4.6.4 of this NMMR.7.5 Sanctions7.5.1 Amount and NatureAppendix 7-A to this NMMR sets forth the maximum applicable sanctions with respect to each category of Sanctionable Behavior subject to potential increase under Section 7.5.3 in certain circumstances.  In most cases the ISA may impose three categories of sanctions:a) Formal Warning.  A Formal Warning consists of written notification from the ISA to a Market Participant stating that Sanctionable Behavior has occurred and directing the Market Participant not to engage in further Sanctionable Behavior.b) Administrative Sanctions.  Administrative Sanctions consist of fixed, per-event monetary charges set forth in Appendix 7-A imposed on Sanctionable Behavior.c) Formula-Based Sanctions.  Formula-Based Sanctions are monetary charges determined by a formula set forth in Appendix 7-A imposed on Sanctionable Behavior.In imposing an Administrative Sanction or a Formula-Based Sanction, the ISA may impose the sanction in a lesser amount than that specified in Appendix 7-A if it determines that the lesser amount will have a sufficient deterrent effect.7.5.2 Cumulative Effecta) Sanctions imposed under this NMMR are in addition to any consequences for settlement set forth in NMMR #4.b) The ISA may impose both an Administrative Sanction and a Formula-Based Sanction with respect to the same Sanctionable Behavior if it believes both sanctions are necessary for appropriate deterrence.c) If a single event is sanctionable under two different sections or subsections of this NMMR, the ISA may only impose a sanction under one of such sections or subsections; provided that if an event is sanctionable under one or more sections or subsections and is also sanctionable under Section 7.4.4, the ISA may impose Administrative Sanctions under Section 7.4.4 and a sanction under one other section or subsection.  For purposes of this NMMR, an "event" means the facts and circumstances constituting a single occurrence of behavior, or multiple occurrences of the same Sanctionable Behavior within a day, sanctionable under this NMMR.  Each day that the behavior continues constitutes a separate event.  While the ISA may review a pattern of behavior, for example, to make a finding of intent under Subsection 7.4.7.1, the pattern of behavior may consist of multiple events, each one of which is subject to sanction once a finding of intent is made.  With respect to operating behavior, an event relates to a single operating action.  Failure to provide information relates to a particular report or a particular request for information, and separate inaccuracies in the same report or in response to the same information request are not separate events.7.5.3 Increased SanctionsThe ISA may increase Administrative Sanctions and Formula-Based Sanctions to an amount up to triple the base amount of the sanction in the following circumstances:a) If Sanctionable Behavior occurs during a System Emergency; orb) If the ISA determines that the Sanctionable Behavior is part of a continuing pattern of Sanctionable Behavior for which one or more monetary sanctions have previously been imposed upon the Market Participant.7.5.4 CostsIn addition to applicable sanctions, if a monetary sanction is imposed, the ISA may charge to the sanctioned Market Participant the reasonable costs of the ISA's investigation of the Sanctionable Behavior.  Such costs will be payable after the deadline for requesting Alternative Dispute Resolution (ADR) has passed and any requested ADR proceedings are complete and the ADR decision in any such proceeding sustains the imposition of a monetary sanction.Any monetary sanctions collected by the ISA will be utilized to reduce the ISA expenses charged to Market Participants.  The ISA Board has the authority to suspend or waive monetary sanctions for up to six (6) months after the ISA Operations Date.7.5.5 DisclosureExcept as provided in this Section 7.5.5, the ISA will not normally disclose the imposition of particular sanctions on a particular Market Participant, but will make periodic reports of sanctions imposed and the Sanctionable Behavior upon which such sanctions were imposed that do not identify Market Participants by name or provide a basis for identifying such Market Participants.  However, the ISA may make disclosure of monetary sanctions imposed on a particular Market Participant if, in the ISA's judgment, such disclosure is warranted by the nature of the Sanctionable Behavior and monetary sanctions previously imposed on the Market Participant have been unsuccessful in deterring repeated Sanctionable Behavior.  The ISA shall notify the Market Participant before making disclosure, and the Market Participant shall be entitled to obtain ADR review of the proposed disclosure.  No disclosure of a monetary sanction will be made until after the deadlines for requesting ADR with respect to the sanction and proposed disclosure have passed and any requested ADR proceedings are complete and the ADR decision sustains the ISA’s actions.  Once such disclosure has occurred, nothing in this NMMR should be construed as limiting the rights of Market Participants harmed by Sanctionable Behavior from seeking legal compensation from the sanctioned Market Participant.7.6 Process for Imposing Sanctions7.6.1 Observation and CommunicationIf, in the conduct of system operations or settlement, in auditing Resource performance under NMMR #5, in making inquiry of Market Participants about operating problems, in monitoring the competitiveness and efficiency of the Northern Maine Markets, or otherwise in the receipt of information relevant to the performance of its duties, the ISA discovers behavior that it believes may constitute Sanctionable Behavior, the ISA shall:a) make a record of the information leading to ISA’s belief that Sanctionable Behavior may have occurred; andb) contact the Market Participant whose behavior is in question, inform the Market Participant of the information leading to the ISA's belief that Sanctionable Behavior may have occurred, and provide the Market Participant the opportunity to discuss the behavior observed or documented by the ISA and to offer additional facts or explanation of circumstances:i) that tend to show that no Sanctionable Behavior occurred; orii) that should be weighed in determining whether to impose a sanction and, if so, what level of sanction to impose.The ISA may make use of information provided by third parties in forming the basis for an inquiry to a Market Participant about possible Sanctionable Behavior, and is not required to reveal the identity or existence of such third parties.  However, unsubstantiated statements by third parties may not serve as the basis for the imposition of sanctions.7.6.2 Consideration by ISA7.6.2.1 Occurrence of Sanctionable BehaviorBased upon information in its possession and information provided by the Market Participant, the ISA shall first determine if Sanctionable Behavior has occurred.  To conclude that Sanctionable Behavior has occurred under any specific subsection of Section 7.4, the ISA must make:a) a written finding with respect to each element of such Sanctionable Behavior, as set forth in the relevant subsection, including the basis of any finding as to intent or state of knowledge under Section 7.4.7;b) a written finding with respect to the duration of the Sanctionable Behavior; andc) a written finding that the Sanctionable Behavior is not excused by any specific provision of Section 7.4.7.6.2.2 Level of Sanctiona) If the ISA determines that Sanctionable Behavior has occurred, the ISA may impose a sanction as authorized under this NMMR.  In determining which sanction or sanctions to apply, the ISA shall consider:i) The nature of the Sanctionable Behavior and the degree of impact on reliability or the competitiveness and efficiency of Northern Maine Markets;ii) The Market Participant's past history of Sanctionable Behavior and the nature of sanctions previously imposed; andiii) The promptness and effectiveness of the Market Participant's response in correcting the Sanctionable Behavior.b) Ordinarily, the ISA will issue a Formal Warning before imposing a monetary sanction for similar behavior.  However, in cases of Sanctionable Behavior that materially impairs reliability or the competitiveness or efficiency of Northern Maine Markets, or reflects the sanctioned Market Participant’s unexcused failure to obey ISA instructions, the ISA may directly impose a monetary sanction.  The ISA has no obligation to consider a Formal Warning with respect to sanctions imposed under Section 7.5.  The ISA will select the level of sanction based on its determination of the need for effective deterrence and consistency with sanctions imposed in similar circumstances.c) The ISA shall make:i) a written finding with respect to the level of sanction imposed and the factors considered by it;ii) a written finding with respect to the basis of any increased sanction;iii) a calculation of the amount of any monetary sanction; andiv) if disclosure of a sanction is proposed, a written finding as to why disclosure of the sanction is appropriate.7.6.3 Notice and PaymentsThe ISA shall give written notice to the Market Participant of the imposition of any sanction, together with its written findings.  The ISA's invoice for the amount of a sanction will be sent to the sanctioned Market Participant with the notice of the sanction.  The Market Participant shall pay the amount of the sanction to the ISA or post a bond for the amount of the sanction if the Market Participant is seeking review of such sanction under the ADR process of Section 7.7 within 30 days of the date of the ISA's invoice.7.6.4 No Limitations on Other Rights of the ISANothing contained in this NMMR shall limit the ability of the ISA to collect information from Market Participants or to institute new NMMRs pursuant to its authority under the ISA Tariff.7.7 ADR Review of Sanctions7.7.1 Actions That Can Be Revieweda) A Market Participant may obtain prompt ADR review of any sanction (other than a Formal Warning) imposed by the ISA on that Market Participant and any proposed disclosure of a sanction.  Actions subject to review are:i) Imposition of a sanction;ii) Level of sanction imposed;iii) Increase of a sanction;iv) Basis of calculation of a Formula-Based Sanction; andv) Proposed disclosure of a sanction.The Market Participant must make a written request for ADR review within 30 days of the delivery of the ISA's notice of imposition of the sanction and a bill for the amount of the sanction, or the delivery of the ISA’s notice of proposed disclosure of a sanction, if the Market Participant proposes to seek ADR review.b) A Market Participant may not obtain ADR review of the issuance of a Formal Warning.  It may, however, deliver to the ISA within 30 days of the issuance of the Formal Warning a written statement of its reasons for disputing the imposition of the Formal Warning.  The ISA shall retain any such written statement with its record of the imposition of the Formal Warning.  If the ISA relies on its prior imposition of the Formal Warning as a basis for imposing a more severe sanction for subsequent Sanctionable Behavior, the written statement shall also be made part of the record in any ADR proceeding relating to the subsequent Sanctionable Behavior.  The ISA may, but is not obligated to, reconsider its decision to issue the Formal Warning upon receipt of the written statement.  If the ISA determines to withdraw the Formal Warning, it shall so notify the Market Participant in writing, and the Formal Warning shall not be referred to in any subsequent proceeding or report or made the basis for any subsequent action.c) A Market Participant may seek ADR review of the actions described in Section 7.7.1(a), and any request for ADR review will be deemed to be properly and timely made, if the Market Participant:i) timely pays the full amount of the sanction imposed; orii) timely posts a bond with the ISA assuring payment in full of the sanction.Unless such timely payment or posting of a bond occurs, the Market Participant may not obtain ADR review of the imposition of a monetary sanction.  If the Market Participant makes payment in full of the sanction amount, it may, by notice accompanying its payment, state that it is paying subject to the outcome of the ADR review.  The ISA will hold in escrow and invest any payment accompanied by such a notice pending the outcome of the ADR process, and will refund any amount by which the sanction is reduced or refund the entire amount if the sanction is removed, in either case, together with interest at the rate specified in the ISA Tariff, within 30 days of the decision rendered by the result of the ADR process.7.7.2 ADR ProcessThe ADR process to be followed in appealing the imposition of sanctions shall be the process detailed in Section 9 of the ISA Tariff.DOCUMENT HISTORYApproved by the ISA Board of DirectorsDecember 14, 1999Revision 1 approved by the ISA Board of DirectorsNovember 15, 2006Revision 2 approved by the ISA Board of DirectorsApril 5, 2007Revision 3 approved by the ISA Board of DirectorsJuly 10, 2007Appendix 7-ASanctionable EventsSanctionableEventAdministrativeSanctionFormula-BasedSanctionFailure to perform in the Northern Maine Markets as defined in Section 7.4.1:Provide Energy as Scheduled$1,000/eventMW deviation * 0.5 * BECP * Hrs.Provide Ancillary Services as Scheduled$1,000/eventMW deviation * 0.5 * A/S * Hrs.Follow Dispatch Instructions during normal operations$1,000/eventMW deviation * 0.5 * A/S * Hrs.Follow Dispatch Instructions during System Emergency$5,000/eventMW deviation * 0.5 * A/S * Hrs.Inaccurate operating information as defined in Section 7.4.2:Misrepresentation of operating conditions$5,000/eventMW deviation * 0.5 * BECP * Hrs.Misrepresentation of Resource availability$1,000/eventMW deviation * 0.5 * BECP * Hrs.Failure to meet Capacity Obligations$5,000/eventFailure to follow NMAO instructions as defined in Section 7.4.3:Failure to follow scheduling procedures$1,000/eventN/AFailure to follow transmission instructions$1,000/eventN/AFailure to provide information as defined in Section 7.4.4:Late routine reports$500/eventN/AInaccurate routine reports$1,000/eventN/AInformation on emergencies or disturbances$2,000/eventN/ASpecial information requests$1,000/eventN/ALate settlement and billing information$2,000/eventN/AInaccurate settlement and billing information$2,000/eventN/AResource information$1,500/eventN/AFailure to follow an ISA direction or order as required by Section 7.4.5:Failure to follow directions or orders during normal operations$1,000/eventN/AFailure to follow directions or orders that could result in threat to reliability$5,000/eventN/AFailure to follow directions or orders during System Emergency$10,000/eventN/AWhere:  BECP = Balancing Energy Clearing Price in the hour  A/S = Cost per MW for Ancillary Services in the hour</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>10</record_id>
      <option_code>A</option_code>
      <record_title>Connections, Retirements and Demand-Side Management Programs</record_title>
      <record_content_desc>NMMR #8</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>10000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>8 CONNECTIONS, RETIREMENTS AND DEMAND-SIDE MANAGEMENT PROGRAMSThis Northern Maine Market Rule (NMMR) #8, Connections, Retirements and Demand-Side Management Programs, sets forth provisions relating to:a) the obligation to provide information to the Northern Maine Independent System Administrator (ISA) in a timely manner relative to the connection of new and modified facilities to the Northern Maine Transmission System (NMTS), including new facilities to be part of the NMTS;b) the manner in which the ISA will assess proposed connections;c) the costs related to such assessments;d) the obligation to provide information to the ISA in a timely manner relative to plans to institute or materially change Demand-Side Management (DSM) programs on the NMTS; ande) the obligation to provide information to the ISA in a timely manner relative to retirement of Generating Units in Northern Maine.8.1 Requirement for ACCEPTANCE and FOR Connection Agreement for New Facilities8.1.1 No entity shall connect any new facility (this term meaning in this NMMR #8 one or more facilities) to, or deactivate, disconnect, retire or remove an existing facility from, the NMTS:a) if such action is disapproved by the ISA under this Market Rule; andb) with respect to a new facility, other than in accordance with the provisions of a connection agreement with the directly affected Transmission Owner (TO) with respect to the design and construction of any associated connection facilities; andc) with respect to deactivation, disconnection, retirement or removal of an existing facility, unless the ISA and the affected TOs have reviewed the request in a manner similar to the process for a connection application described in the following sub-sections.8.1.2 In this Market Rule, the connection of a new facility consists of any of the following actions:a) the connection of a new Generating Unit;b) the connection and/or reactivation of an existing mothballed Generating Unit proposing to come back into service;c) the addition or removal of any transmission facility located in Northern Maine and rated 69 kV or above, whether or not the transmission facility is or will be part of the NMTS; ord) the establishment of connections with a non-NMTS transmission system.8.2 Connection Assessment Process8.2.1 An entity that wishes to connect a new facility to the NMTS (a “Connection Applicant”) shall:a) promptly submit to the directly affected TO, with a copy to the ISA:i) in the case of a Generating Unit, a connection application, pursuant to the TO’s Open Access Transmission Tariff    (OATT); orii) in the case of a transmission facility, such other application as the TO requires; andb) provide the ISA with copies of:i) all material submitted to the directly affected TO;ii) the connection agreement and any other agreements with the directly affected TO; andiii) any other information the ISA deems necessary and requests in writing; andc) in the case of a TO, provide the ISA with information comparable to that indicated in a) and b) above with respect to its own new facility.8.2.2 Following receipt and review of the documents referenced in Section 8.2.1, the ISA shall, in coordination with all affected TOs and Generating Units, conduct an assessment to consider whether the connection of the new facility may:a) have an adverse impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9;b) create the probability of additional congestion in the bulk transfer of Energy by causing the NMTS to operate at or close to its normal operating limits; orc) provide near-term or long-term reliability benefits to the NMTS.  If the facility would become part of the NMTS, in describing the reliability benefits that a facility may provide, the ISA shall indicate in its assessment a statement of the costs of each facility.  The ISA may also perform a cost/benefit analysis if it determines in its independent judgment that:  (i) such an analysis is necessary for a determination of the relative reliability benefits of the proposed facility; and (ii) the proposed facility is of sufficient size that its costs are likely to be relevant to a determination of reliability benefits.  The analysis will be limited to:  (1) the proposed facility; (2) any other current proposals of similar effect; and (3) no action.8.2.3 Where the ISA has not been provided in a timely basis with the information indicated in Section 8.2.1, the ISA shall disapprove the connection of the new facility.8.2.4 Where the ISA concludes in its assessment that the connection of the new facility:a) will have an adverse impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9, the ISA shall disapprove the connection unless the Connection Applicant undertakes, in a form satisfactory to the ISA, to bear the costs of all upgrades that may be required to mitigate such adverse impact on reliability; andb) in the case of a Generating Unit, if the Generating Unit will create the probability of additional congestion in the bulk transfer of Energy by causing the NMTS to operate at or close to its normal operating limits, the ISA shall disapprove the connection unless:i) where the ISA is satisfied that the imposition of conditions on the operation of the new Generating Unit (including any existing Generating Unit modified to change the electrical characteristics of the existing Generating Unit) can mitigate the probability of such additional congestion, the Connection Applicant agrees to operate the new Generating Unit in accordance with those conditions;ii) in all other cases, the Connection Applicant undertakes, in a form satisfactory to the ISA, to:1) bear the costs of all upgrades to the NMTS that may be required to mitigate the probability of such additional congestion; or2) agrees to bear the costs, as calculated by the ISA, of all such additional congestion.8.2.5 Where the ISA determines that it will disapprove the connection of a new facility under Section 8.2.4(a), the Connection Applicant may modify its connection proposal and request that the ISA conduct a new assessment on the basis of the modified connection proposal.8.2.6 In accordance with the reporting requirements of Section 8.2.8, for connection applications where the ISA does not disapprove the connection of the new facility due only to one or more of the following conditions:(i) failure to provide information on a timely basis; (ii) negative impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9; or (iii) negative impact on congestion, the ISA shall provide its opinion on the positive impact of the new facility on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9.8.2.7 The ISA will coordinate with any affected TOs, including, as appropriate, TOs not part of the NMTS, in conducting all or a portion of its assessment.  The ISA will, to the extent possible, oversee and review the studies and analyses submitted by the Connection Applicant and conducted by any affected TOs in order to avoid duplicating costs and in order to take advantage of the Connection Applicant’s and TOs’ expertise.  Any affected NMTS TO shall provide such assistance as the ISA may require in its assessment.8.2.8 Upon completion of each assessment, the ISA shall, subject to Section 8.2.10, prepare a report indicating:a) the ISA’s decision in respect to disapproval or not of the connection of the new facility and the reasons for that decision;b) any technical requirements that are required to be met in respect of the proposed connection of the new facility; andc) any benefits, near-term or long-term, that the proposed connection would provide with respect to the ability of the NMTS to meet the Reliability Standards contained in Section 8.9.8.2.9 The reasons referred to in Section 8.2.8(a) shall, where applicable, include a description of any deficiencies identified by the ISA, the impact of such deficiencies and any measures identified by the ISA that might possibly mitigate the adverse impact of such deficiencies.8.2.10 Where the ISA conducts an assessment under Section 8.2.5, the report relating thereto may be in the form of an addendum to a previous report that was issued by the ISA in respect of the Connection Applicant’s original proposal.8.2.11 The ISA shall provide a copy of the report prepared under Section 8.2.8 and of any related addendum prepared under Section 8.2.10 to any affected TOs.8.3 Costs of Connection Assessments8.3.1 The ISA shall invoice a Connection Applicant for the costs incurred by the ISA in conducting its assessment related to the Connection Applicant’s proposal.8.3.2 The invoice referred to in Section 8.3.1 shall also include any costs incurred by an affected TO in providing assistance to the ISA under Section 8.2.7.8.3.3 The invoice referred to in Section 8.3.1 shall be payable in full by the Connection Applicant within ten (10) business days of the date of the invoice.8.4 Allocation of Costs of ConnectionThe costs of all connections, except those that meet the requirements to be included in the Transmission Service Access Fee, shall be borne by the Connection Applicant.8.5 Implementation of Connection8.5.1 Each Connection Applicant shall ensure that the connection of its new facility is effected in a manner that does not represent a material change from:a) any technical requirements that are identified in the applicable assessment report as being required to be met in respect of the connection of the new facility; orb) the configuration or technical parameters that were used by the ISA and any affected TOs as the basis upon which the ISA did not disapprove such connection or that were imposed as a condition of such connection, unless the Connection Applicant has obtained the prior written approval of the ISA and the affected TOs for the material change.8.5.2 The ISA shall not disapprove a material change referred to in Section 8.5.1 unless it determines that such deviation will have an adverse impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9.  Where the ISA disapproves such a material change, the Connection Applicant may propose to the ISA measures designed to mitigate the adverse impact of the material change on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9.8.6 Requirement for ACCEPTANCE for MODIFIED Facilities8.6.1 No entity shall connect any modified facility to the NMTS if such connection is disapproved by the ISA under this Market Rule.8.6.2 In this Market Rule, the connection of a modified facility consists of any of the following actions:a) the connection of a modified Generating Unit, including any change in the Generating Unit’s electrical characteristics;b) the connection of any modified transmission facility located in Northern Maine and rated 69 kV or above, whether or not the transmission facility is or will be part of the NMTS, including any upgrade; orc) a change in system configuration.8.6.3 In addition to following the requirements of NMMR #6, Outage Coordination, the ISA shall be provided with detailed information on the proposed modification one (1) month prior to the proposed connection date for the modified facility.  Unless the ISA disapproves the modification within two (2) weeks of receiving such information, the entity may proceed with connection of the modified facility in accordance with the requirements of NMMR #6.  If the ISA determines that a proposed modification may impair the ability of the NMTS to meet the Reliability Standards contained in Section 8.9 and that it cannot make a decision within two (2) weeks, it may suspend the modification pending a decision to be made in not more than ninety (90) days from the receipt of detailed information.  Failure of the ISA to disapprove in writing a modification proposal submitted in accordance with this Section 8.6.3 within the specified two (2) weeks, unless extended as provided in this Section 8.6.3, shall be construed as non-objection to the modification by the ISA.  The ISA may only disapprove modifications that have a negative impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9.8.7 Demand-Side Management Programs8.7.1 No Market Participant directly connected to the NMTS shall institute or materially change a DSM program on the NMTS if such program is disapproved by the ISA under this Market Rule.8.7.2 The entity implementing the DSM program (the “DSM Implementer”) shall submit, for information purposes and in a form to be determined by the ISA, a notice of the proposed DSM program no less than four (4) months prior to when the DSM program will go into operation.8.7.3        The ISA shall not disapprove a DSM program notice unless it determines that such DSM program will clearly have an adverse impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9.  Where the ISA objects to such a DSM program in writing, the DSM Applicant may propose to the ISA measures designed to mitigate the adverse impact of the DSM program on the reliability of the NMTS for reconsideration.8.7.4         Failure of the ISA to object in writing to a notice submitted in accordance with Section 8.7.2 within sixty (60) days shall be construed as non-objection to the DSM program by the ISA.8.8 RETIREMENT OF GENERATION8.8.1 No entity shall retire a Generating Unit or group of Generating Units located in Northern Maine if such Generating Unit or group of Generating Units constitutes more than ten percent (10%) of the total generating Capacity in Northern Maine without the prior approval in writing of the ISA.  References in the rest of this Section 8.8 to a Generating Unit are intended to include a group of Generating Units.8.8.2         An entity that wishes to retire a Generating Unit located in Northern Maine (the “Retirement Applicant”) shall submit to the ISA, with a copy to the affected TO, an application to retire such Generating Unit.  Such application shall be submitted no later than twelve (12) months prior to the proposed date of retirement.  The application shall include:a) any information the Retirement Applicant has on the impact of such retirement on the operation of the NMTS;b) the preferred date for the retirement; andc) information of the state of the Generating Unit in retirement (e.g., cold reserve, mothballed, dismantled, etc.).8.8.3 Following receipt and review of the documents referenced in Section 8.8.2, the ISA shall, in coordination with the affected TOs, conduct an assessment to consider whether the retirement of such Generating Unit may:a) have an adverse impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9; orb) create the probability of additional congestion in the bulk transfer of Energy by causing the NMTS to operate at or close to its normal operating limits.8.8.4 Where the ISA concludes in its assessment that the retirement of such Generating Unit will have an adverse impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9, the ISA shall:a) disapprove the retirement until the ISA and the affected TOs have had time to develop alternative mechanisms to preserve the reliability of the NMTS; andb) shall negotiate contractual arrangements with the Retirement Applicant to secure continued operation of the Generating Unit.  Any such contractual arrangements shall not be subject to ISA Board of Directors approval if the period covered is less than or equal to nine (9) months and the contract is cost-based.  No contractual arrangement reached under this Section 8.8.4(b) may be extended, renewed or rolled-over without approval of the ISA Board of Directors.c) the costs of any contract negotiated that meets the term and value requirements of Section 8.8.4(b) above shall be recovered from each transmission and distribution utility in the affected region of the NMTS and each exporting entity using the NMTS, in a manner as provided in the ISA Tariff; provided that any documented interest costs incurred by a transmission and distribution utility in the implementation of this provision, unless waived by the transmission and distribution utility, will be reimbursed by the ISA with funds recovered in accordance with the ISA Tariff only from entities contributing to ISA budget expenses that are not transmission and distribution utilities.  A transmission and distribution utility subject to regulation by the Federal Energy Regulatory Commission may use that Commission’s published interest rate for refunds.8.8.5 When negotiating a contract in accordance with the provisions of Section 8.8.4, the ISA shall return to the Board of Directors for guidance and approval if:  (i) the term of the contract exceeds nine (9) months; and/or (ii) the rate being paid under the contract is not cost-based.  This Board of Directors guidance will include, if applicable, a mechanism for cost recovery.8.8.6 The ISA will coordinate with any affected TOs in conducting all or a portion of its retirement assessment.  The ISA will, to the extent possible, oversee and review the studies and analyses submitted by the Retirement Applicant, if any, and conducted by any affected TOs in order to avoid duplicating costs and in order to take advantage of the Retirement Applicant’s and TOs’ expertise.  Any affected NMTS TO shall provide such assistance as the ISA may require in its assessment.8.8.7 Upon completion of each retirement assessment, the ISA shall prepare a report indicating:a) the ISA’s opinion in respect of the retirement of the Generating Unit, the reasons for that decision, and a description of any impact on the ability of the NMTS to meet the Reliability Standards contained in Section 8.9; and, where applicableb) any technical requirements that are required to be met in respect of the proposed retirement of the Generating Unit in order to allow the NMTS to meet the Reliability Standards contained in Section 8.9.8.8.8 The ISA shall provide a copy of the report prepared under Section 8.8.7 to any affected TOs.8.9 Reliability Standards8.9.1 The ISA shall endeavor to ensure that the NMTS meets those reliability standards as are appropriate for the NMTS established by the North American Electric Reliability Council (NERC) and the Northeast Power Coordinating Council (NPCC) or any successor organizations and the reliability standards contained in this NMMR #8, known collectively as the Reliability Standards.8.9.2 The NMTS shall be designed for a level of reliability such that the loss of a major portion of the system, or unintentional separation of any portion of the system, will not result from reasonably foreseeable contingencies.  Therefore, the system is required to be designed to meet representative contingencies as defined in Section 8.9.3.  Analyses of simulations of these contingencies should include assessment of the potential for widespread cascading outages due to overloads, instability or voltage collapse.  The loss of small or radial (e.g., the southern NMTS) portions of the system will be allowed provided the reliability of the overall interconnected system is not jeopardized.8.9.3 Resources will be planned and installed in such a manner that, after due allowance for the factors enumerated below, the probability of disconnecting non-interruptible customers due to resource deficiency, on the average, will be no more than one (1) day in ten (10) years.  Compliance with this criteria shall be evaluated probabilistically, such that the loss of load expectation of disconnecting non-interruptible customers due to resource deficiencies shall be, on average, no more than 0.1 day per year.a) the possibility that load forecasts may be exceeded as a result of weather variations;b) immature and mature equivalent forced outage rates appropriate for generating units of the sizes and types located in Northern Maine, recognizing partial and full outages;c) due allowance for scheduled outages and de-ratings;d) seasonal adjustment of resource capability;e) proper maintenance requirements;f) available operating procedures;g) the reliability benefits of interconnections with non-NMTS systems; andh) such other factors as may from time-to-time be appropriate.8.9.4 The NMTS shall be designed with sufficient transmission capacity to integrate all resources and serve all loads.  This requirement will apply after any critical generator, transmission circuit, transformer, phase angle regulating transformer, series or shunt compensating device has already been lost, assuming that the resources and power flows are adjusted between outages, using all appropriate reserve resources available in thirty (30) minutes and, where applicable, any phase angle regulator control.  The requirements of this Section 8.9.5 will not apply to radial circuits, including the southern NMTS.DOCUMENT HISTORYApproved by the ISA Board of DirectorsNovember 16, 2005Revision 1 approved by the ISA Board of DirectorsNovember 15, 2006Revision 2 approved by the ISA Board of DirectorsApril 5, 2007Revision 3 approved by the ISA Board of DirectorsJuly 10, 2007</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>11</record_id>
      <option_code>A</option_code>
      <record_title>System Planning</record_title>
      <record_content_desc>NMMR #9</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>11000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>9 SYSTEM PLANNINGThis Northern Maine Market Rule (NMMR) #9, System Planning, sets forth provisions relating to:  (i) the responsibilities of the Northern Maine Independent System Administrator (ISA), Transmission Owners (TOs), Generators and Competitive Electricity Providers (CEPs) in relation to the adequacy and reliability of the Northern Maine Transmission System (NMTS); (ii) the manner in which the ISA will assess and report on matters relating to the adequacy and reliability of the NMTS; and (iii) the manner in which the ISA may solicit and evaluate proposals designed to alleviate transmission constraints and other reliability problems, or prospective problems, on the NMTS when no adequate proposal exists to address the problem.9.1 RESPONSIBILITIES OF THE ISA, TOs, GENERATORS AND CEPs9.1.1 The ISA shall, consistent with its authority under the ISA Tariff and Market Rules:ensure, to the extent authorized under the ISA Tariff, that the NMTS has, at all times, adequate transmission and generation Capacity to satisfy the Reliability Standards contained in NMMR #8, Connections, Retirements and Demand-Side Management Programs; andb) coordinate system planning and development responsibilities to ensure, to the extent authorized under the ISA Tariff, the adequacy and reliability of the NMTS for present and future needs and for the efficient operation of the Northern Maine Market.9.1.2 Each TO shall:plan and maintain its transmission facilities in accordance with all applicable standards, technical requirements and/or Good Utility Practices;keep the ISA informed of the operational status of its transmission facilities;schedule Maintenance Outages in accordance with NMMR #6, Outage Coordination;advise the ISA of its plans for the short-term and long-term development of the NMTS and any changes to major components that comprise the NMTS or other components that can have a significant impact on the operating characteristics of the NMTS; andotherwise comply with its obligations under the ISA Tariff and Market Rules.9.1.3 Each Generator shall:plan and maintain any transmission facilities it may own or operate in accordance with all applicable standards, technical requirements and/or Good Utility Practices;keep the ISA informed of the operational status of its assets and assets that form part of its 18-month Capacity load obligations as reported to the Northeast Power Coordinating Council (NPCC) through the Northern Maine Area Operator (NMAO);keep the ISA informed of the operational status of its Eligible Installed Capacity;schedule Maintenance Outages in accordance with NMMR #6;advise the ISA of its plans for the short-term and long-term development of, and modification to, its assets and any changes to major components that comprise its load obligation; andotherwise comply with its obligations under the ISA Tariff and Market Rules.9.1.4 Each CEP shall:otherwise meet its Capacity Obligations (see NMMR #10); andprovide Resource information to the ISA for development of the Base Case that includes only its Eligible Installed Capacity.9.2 LONG-TERM SYSTEM PLANNING9.2.1 Each year the ISA shall prepare, in accordance with this Section 9.2, and publish on the ISA Web-site by the last day of March, a Base Case for the planned development of the NMTS.  Each Base Case shall cover the following seven (7) years, commencing on April 1 of the year in which the Base Case is published.9.2.2 The ISA shall prepare each Base Case using:data and information submitted by TOs, CEPs, Generators and providers/operators of Demand-Side Management (DSM) programsinformation contained in Connection Agreements entered into pursuant to a TO’s Open Access Transmission Tariff (OATT);the preceding Base Case prepared under this Section 9.2;data received from neighboring transmission systems; andsuch other information as the ISA considers appropriate.9.2.3 Each Base Case shall include the ISA’s independent judgment and evaluation of:a) committed and scheduled investments in transmission facilities and transmission system expansion plans described in Section 9.1.2(d);all connections of new or modified facilities to, or deactivation, disconnection, retirement or removal of existing facilities from, the NMTS that have not been disapproved by the ISA pursuant to the provisions of NMMR #8;existing generation, and planned generation additions, deactivations and retirements; andsuch other information as the ISA deems appropriate.9.2.4 Nothing in this Section 9.2 shall be construed as preventing the ISA from preparing, in addition to the Base Case, alternative analyses based on differing assumptions as to the likelihood of implementation of the connection of new or modified facilities to, or the deactivation, disconnection, retirement or removal of existing facilities from, the NMTS.9.3 RESOURCE ADEQUACY9.3.1 NMMR #8 establishes resource adequacy criteria for the NMTS as a component of the Northern Maine Reliability Standards.9.3.2 The ISA shall identify in the Base Case developed in Section 9.2 the potential need for investments in transmission facilities described in Section 9.1.2(d) and other actions that may be required to:  (i) maintain reliability in accordance with the Reliability Standards contained in NMMR #8; (ii) improve performance of the Northern Maine Market; and (iii) reduce the costs associated with transmission constraints.  Where applicable, each such Base Case shall identify:a) the impact of existing and emerging shortages of transmission capacity;b) any significant existing, emerging or potential transmission constraints;c) the impact of the connection of new or modified facilities to, or the deactivation, disconnection, retirement or removal of existing facilities from, the NMTS; andd) the adequacy of interconnections to non-NMTS systems.9.3.3 In developing the Base Case, the ISA shall assess the extent to which the investments in transmission facilities identified in Section 9.3.2 will reduce congestion, reasonably improve the ability of the NMTS to meet the Reliability Standards contained in NMMR #8, or improve performance of the Northern Maine Market.  Such assessment shall include consideration of:the costs and implementation time frame associated with each such investment;the actual and projected costs of congestion;the reliability and economic effects of the reinforcement of one (1) or more interconnections;the experience of Market Participants; andsuch other information and material as the ISA deems appropriate.9.3.4 Where the Base Case indicates that:  (i) existing, emerging or potential congestion can be reduced; (ii) measures can be used to reasonably improve the ability of the NMTS to meet the Reliability Standards contained in NMMR #8; or (iii) the performance of the Northern Maine Market can be improved by a transmission investment, the ISA shall quantify the benefits of such investment to the Northern Maine Market in terms of the impact of the investment on costs in the Northern Maine Market, including congestion costs.  The ISA may also identify and assess or quantify such other benefits as it determines appropriate.  The results of this benefit quantification shall be published by the ISA.9.3.5 Where the Base Case identifies that action is or will be required to alleviate an existing or emerging transmission constraint, the ISA shall take the actions referred to in Section 9.4.1 when, in the ISA’s independent judgment, no adequate proposal exists to address the problem.9.3.6 Where the Base Case identifies a potential transmission constraint, the ISA shall identify one or more options that can alleviate the constraint and the time frame for implementation of each such option.9.3.7 For the purposes of this Section 9.3 and Section 9.4, a transmission constraint shall be considered to be emerging if it is identified by the ISA as likely to arise within one (1) to five (5) years and a transmission constraint shall be considered to be potential if it is identified by the ISA as likely to arise within six (6) to seven (7) years.9.4 Evaluation of Proposals to Alleviate Transmission Constraints OR TO reasonably IMPROVE RELIABILITYWhere the ISA has identified a need to alleviate an existing or emerging transmission constraint or reasonably improve the ability of the NMTS to meet the Reliability Standards contained in NMMR #8 and when, in the ISA’s independent judgment, no adequate proposal exists to address the problem, the ISA shall:develop, in consultation with the Market Participants as appropriate, technically feasible options for alleviating the transmission constraint or improving the ability of the NMTS to meet the Reliability Standards contained in NMMR #8; andcommence a process to satisfy that need by issuing a request for proposals to implement one or more technically feasible options for alleviating the existing or emerging constraint or to reasonably improve the ability of the NMTS to meet the Reliability Standards contained in NMMR #8 or address projected problems with reliability.  On or prior to commencing such process, the ISA shall publish notice of any technically feasible options referred to in Section 9.4.1(a).  Any request for proposals pursuant to this subpart shall be filed with the Commission for approval at least 60 days prior to the issuance of the request for proposals.  The filing shall include the terms and conditions of the request for proposals and an explanation why the ISA was unable to solicit a market response in the absence of the request for proposals.The process by which the ISA shall issue and evaluate such requests for proposals, the form and content of proposals submitted in response and the criteria to be met by bidders shall be published on the ISA Web-site.  Such published procedures shall reflect all applicable provisions of this Section 9.4 and shall include the elements referred to in Section 9.4.4 and the processes referred to in Sections 9.5.3, 9.5.4 and 9.5.5.9.4.2 Where the ISA has issued a request for proposals under Section 9.4.1, any eligible bidder may submit a proposal in response thereto.  Such proposal shall propose the implementation of one or more technically feasible options for alleviating the existing or emerging transmission constraint, or to reasonably improve the ability of the NMTS to meet the Reliability Standards contained in NMMR #8, which options need not be limited to those identified by the ISA under Section 9.4.1(a).  Without limiting the generality of the foregoing, options may include the construction of new or the modification of existing transmission facilities or generation facilities, DSM programs or a combination of such options.9.4.3 The ISA may reject any proposal submitted under Section 9.4.2 where the bidder has failed to include in the proposal an indication of its willingness to implement each option identified in the proposal in the manner described in the proposal.9.4.4 The published procedures referred to in Section 9.4.1 shall include provisions relating to the following:any consultation processes required and any pre-qualification process for potential bidders, including the criteria to be met by eligible bidders;the ability of the ISA to accept proposals from a short list of bidders, as well as the number of bidders to be included on such short list and the criteria for their inclusion;the form of the request for proposals;the information required to be made available by the ISA to potential bidders;the extent to which the content of proposals received from bidders is required to be made public by the ISA; andthe evaluation criteria to be used by the ISA in selecting the successful bidder from among eligible proposals received.9.4.5 The ISA shall examine each proposal submitted under Section 9.4.2 to initially determine whether, in the ISA’s opinion, the option contained in the proposal is technically feasible and will alleviate the transmission constraint at issue or reasonably improve the ability of the NMTS to meet the Reliability Standards contained in NMMR #8.  The ISA shall reject each proposal that fails to meet these criteria.9.4.6 The ISA shall evaluate each proposal submitted under Section 9.4.2 that has not been rejected under Section 9.4.3 or 9.4.5.9.4.7 The ISA shall, following completion of its evaluation of all proposals submitted under Section 9.4.2 that have not been rejected under Section 9.4.3 or 9.4.5, identify a preferred proposal for alleviation of the transmission constraint at issue or to reasonably improve the ability of the NMTS to meet the Reliability Standards contained in NMMR #8.  Such preferred proposal shall comprise the proposal or combination of proposals received from bidders and/or options identified by the ISA under Section 9.4.1(a) that are best designed to alleviate such transmission constraint and shall become and be referred to as the Preferred Plan.9.5 Implementation of PREFERRED PLANFollowing the identification of a Preferred Plan under Section 9.4.7, the ISA shall take the actions referred to in this Section 9.5.The ISA will report to the ISA Board of Directors on the development of the Preferred Plan.  The ISA will seek guidance with respect to contractual arrangements, if any, that the ISA may be authorized to execute in order to facilitate implementation of the Preferred Plan. Generation OptionsWhere the Preferred Plan referred to in Section 9.5.1 includes the proposed construction of new or the proposed modification of existing generation facilities to provide Energy and Eligible Installed Capacity, the bidder shall be required to:  (i) promptly submit to the affected TO, with a copy to the ISA, an interconnection application, pursuant to the TO’s OATT and NMMR #8; and (ii) provide the ISA copies of:a) all material submitted to the TO;b) the system impact study conducted by the TO; andc) a copy of the Connection Agreement with the TO.The ISA shall assist or support the bidder in obtaining any regulatory approvals required for the construction of new or the modification of existing generation facilities. Transmission OptionsWhere the Preferred Plan referred to in Section 9.5.1 includes the proposed construction of new or the modification of existing transmission facilities, the bidder, if not a TO, shall be required to promptly submit to the affected TO, with a copy to the ISA, an interconnection application, pursuant to the TO’s OATT and NMMR #8.  The ISA shall be provided with copies of all material submitted to the TO and the Connection Agreement with the TO.  All bidders, including TOs, shall comply with the requirements of NMMR #8.  In addition, all bidders, including TOs, shall provide the ISA with copies of the system impact study conducted by the TO and/or the bidder’s own system impact study.  The ISA shall assist or support the bidder in obtaining any regulatory approvals required for the construction of the new or modified transmission facilities and in respect of the recovery by the bidder of the costs of such construction from ratepayers. Demand-Side Management OptionsWhere the Preferred Plan referred to in Section 9.5.1 includes the implementation of a DSM program, the ISA shall include the impact of the bidder’s DSM program in its future planning and forecasting activities.  The ISA shall assist or support the bidder in obtaining any regulatory approvals required in relation to the recovery of the costs associated with implementation of the DSM program.DOCUMENT HISTORYApproved by the ISA Board of DirectorsNovember 16, 2005Revision 1 approved by the ISA Board of DirectorsNovember 15, 2006Revision 2 approved by the ISA Board of DirectorsApril 5, 2007Revision 3 approved by the ISA Board of DirectorsJuly 10, 2007</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>6</record_id>
      <option_code>A</option_code>
      <record_title>Settlement and Billing</record_title>
      <record_content_desc>NMMR #4</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>6000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>SETTLEMENT AND BILLINGintroductionThis Northern Maine Market Rule (NMMR) #4 –Settlement and Billing provides information on how the Northern Maine Markets will be settled and billed.  This NMMR #4 should be read in conjunction with the information contained in the other NMMRs, specifically NMMR #2 – Scheduling and Dispatch and NMMR #3 – Ancillary Services.OVERVIEW OF SETTLEMENT PROCESS for balancing energy, Operating Reserves and RegulationSettlement of Balancing Energy MarketThe Balancing Energy Market will be settled separately for the Maine Public Service Company (MPS) and Eastern Maine Electric Cooperative (EMEC) regions on an hourly basis.  The total Balancing Energy Requirement (BER) will be met by the Balancing Authority at each Interface under the terms of the NBSO transmission tariff.  However, as indicated in NMMR #2 and NMMR #3, the ISA may trade Balancing Energy with any other entity which the ISA determines can provide, on a reliable basis, comparable and competitively priced Balancing Energy services.A Balancing Energy Settlement will be calculated for each hour based on the Competitive Electricity Providers’ (CEPs) Billable Quantities (BQs) of Balancing Energy and the Balancing Energy Clearing Price (BECP) for the hour.Balancing Energy is the quantity of Energy the CEP inadvertently supplied or consumed in the hour in each region and is calculated as the difference between its actual Demand in the region and its share of the actual deliveries of the CEP’s Resources in the region (actual generation within the applicable Northern Maine region and allocated share of actual imports into the region), all adjusted for inter-CEP transactions.This mechanism is used so as to directly allocate the inadvertent flow on the Interfaces as part of the overall reconciliation process for all Balancing Energy (internal and external).  The same result for each CEP could also be achieved by reconciling internal Balancing Energy based on using each CEP’s scheduled flows on the Interfaces, with the result that the net of all CEPs’ internal Balancing Energy would equal the difference between total ISA scheduled and actual flows on the Interfaces.The BECP in each region will reflect, as appropriate, the cost of Balancing Energy purchased or the price paid for Balancing Energy sold under the terms of the NBSO transmission tariff in the hour at each Interface.Actual Demand data for each CEP will be provided by the Transmission and Distribution (T&amp;D) Utilities to the CEPs and the Independent System Administrator (ISA) on a daily basis with monthly true-ups of the load-profiled data, if any.  The Actual Demand data will include hourly Demand estimates of the load-profiled customers, if any.  Actual Resource delivery data will be based on the metered hourly Generating Unit output data provided to the Northern Maine Area Operator (NMAO, consisting of the ISA and the Transmission System Operators - TSOs).  For imports, each CEP will be credited with its pro-rata share (based on scheduled imports) of the actual imports into Northern Maine after adjusting for the impact of the actual output of exporting Generating Units, adjusted for losses within Northern Maine, and the actual imports of CEPs with separate Balancing Energy (i.e., CEPs which meet the metering and telemetering requirements of the TSOs and the Balancing Authority, have their own point-to-point transmission under the NBSO transmission tariff, and have their own Balancing Energy on one or both of the Interfaces).The costs associated with Regulation and Load Following Service (R&amp;LFS) under the NBSO transmission tariff will be recovered from all CEPs participating in the ISA based on their pro-rata share of the total electrical Demand over the time period for which the fixed costs apply, with equal amounts collected in each hour of the time period.  This will be done on a regional basis (i.e., by Maine Public Service Company (MPS) region or Eastern Maine Electric Cooperative (EMEC) region).  Transmission charges associated with R&amp;LFS will be recovered in the same manner as the Capacity costs to the extent the ISA commits to daily transmission service under the NBSO transmission tariff and incurs a daily fixed charge.  To the extent the ISA elects to take hourly transmission service, the transmission charges will be added to the R&amp;LFS Energy charges and will consequently be recovered through the hourly Balancing Energy Market.Settlement of Operating Reserves and Regulation MarketsThe Operating Reserves and Regulation Markets will be settled hourly.  The Operating Reserve products include Ten Minute Spinning Reserve (TMSR), Ten Minute Non-Spinning Reserve (TMNSR), and Thirty Minute Operating Reserve (TMOR) and Regulation is in the form of Automatic Generation Control (AGC).  The ISA will pay for the quantity of each Operating Reserve and Regulation product supplied at the prices defined in the NBSO transmission tariff.  The ISA’s total cost of acquiring the Operating Reserves and Regulation in each hour will be recovered from all CEPs participating in the ISA on a Demand ratio share basis.Any non-hourly costs (e.g., $/MW-day or $/KW-month) will be recovered from CEPs on a Demand ratio share basis over the time period for which the fixed costs apply, with equal amounts collected in each hour of the time period.SETTLEMENT OF BALANCING ENERGYSources of Balancing EnergyThe Balancing Energy Requirement in each hour will be satisfied separately for the two Northern Maine regions through the NBSO transmission tariff and purchases from any other entity that the ISA determines can provide, on a reliable basis, comparable and competitively priced services.Operating Reserve EnergyUpon occurrence of a Generating Unit contingency in Northern Maine, the Balancing Authority may be requested to activate the Operating Reserves being purchased pursuant to the NBSO transmission tariff.  The same scenario could occur with any other entity which the ISA determines can provide, on a reliable basis, comparable and competitively priced Operating Reserve services.  Any Energy delivered as the result of such Operating Reserve activation will be priced in accordance with the applicable contract and will be eligible to contribute to the determination of the BECP.Energy ImbalanceEnergy Imbalance service under the NBSO transmission tariff will flow into or out of Northern Maine whenever the actual flow at either Interface deviates from the scheduled flow.  Energy Imbalance will be priced in accordance with NBSO transmission tariff and will be eligible to contribute to the determination of the BECP.Calculation of the BECPIf the net flow of Balancing Energy is into Northern Maine on an Interface, the BECP in that region will be the total cost of the of Balancing Energy procured under the NBSO transmission tariff in the hour at the Interface divided by the net MWh of Balancing Energy which flowed on the Interface for the ISA (i.e., the total Interface flow adjusted for the flow attributed to exporting Generators and importing CEPs with separate Balancing Energy, see Section 4.2.1).  If the net flow of Balancing Energy is out of Northern Maine on an Interface, the BECP in that region will be the total price paid for the Balancing Energy under the terms of the NBSO transmission tariff in the hour at the Interface divided by the net MWh of Balancing Energy which flowed on the Interface for the ISA.In hours when no Balancing Energy purchases or sales under the NBSO transmission tariff are available to set the BECP for a region, the ISA will set the BECP for that region equal to the BECP established from the NBSO transmission tariff.Determination of Balancing Energy Billable QuantitiesBillable Quantities are determined for each Settlement Period and represent the quantity of Balancing Energy a CEP is deemed to have bought from or sold into the Balancing Energy Market.  Due to the fact that BECPs will be determined separately for each region, BQs will necessarily also be determined separately for each region.The ISA will determine a CEP’s BQs for each Settlement Period for each region based on three quantities:  (i) the CEP’s actual Demand in the applicable Northern Maine region; (ii) the CEP’s share of actual generation in the applicable Northern Maine region; and (iii) the CEP’s pro-rata share of the actual imports into the applicable Northern Maine Region after adjusting for the impact of the actual output of exporting Generating Units, adjusted for losses within Northern Maine, and the actual imports of CEPs with separate Balancing Energy.Determination of Actual DemandPursuant to Chapter 321 of the Maine Pubic Utility Commission’s (MPUC) rules, the four Northern Maine T&amp;D Utilities will be responsible for calculating the actual Demands of CEPs serving Demand within their respective territories.The actual Demand of a CEP will equal the aggregation of the actual Demands of the CEP’s customers, including losses.Determination of Actual GenerationThe actual generation share of a CEP shall be the Energy delivered during the hour to the Northern Maine Market by the Generating Unit, net of station service, and as measured by revenue quality meters approved by the interconnecting Transmission Owner (TO) and the ISA, times the CEP’s pro-rata rights to the output based on the most recent Day-Ahead or Hour-Ahead Schedule for that Generating Unit, as appropriate.Determination of Actual ImportsExporting Generators are required to provide for their own point-to-point transmission under the NBSO transmission tariff, which will require them to maintain their own Balancing Energy accounts under the NBSO transmission tariff.  Similarly, as indicated in Section 4.2.1, CEPs which meet the metering and telemetering requirements of the TSOs and the Balancing Authority and have their own point-to-point transmission under the NBSO transmission tariff will have to maintain their own Balancing Energy accounts under the NBSO transmission tariff on one or both of the Interfaces.  Consequently, exports by exporting Generators and imports by CEPs not participating in the ISA will be netted out of the applicable ISA Interface and there will be no BQ for Balancing Energy with the ISA for these entities.  This netted out actual flow on the Interface will then be allocated to the CEPs participating in the ISA based on the most recent scheduled flow on the Interface (i.e., from the Day-Ahead Schedule or the Hour-Ahead Schedule, as appropriate).  This allocation of actual ISA imports will also have to be adjusted whenever there is an intra-hour change in the interchange schedule with the Balancing Authority based on the concept of assigning the schedule change to the contract which is producing the schedule change.ISA CHARGES FOR TIE LINE INTERRUPTION SERVICETie Line Interruption Service (TLIS) is available under the Products and Services Agreement (PSA) when ISO-NE (operating entity for the New England Power Pool – NEPOOL) determines that a contracted south to north delivery can not be made on the Maine Electric Power Company (MEPCO) transmission line due to minimum tie line flow constraints.  Unless CEPs have notified the ISA not to accept TLIS on their behalf, they will be obligated to pay the ISA’s cost for providing such service.  The quantity of backup service procured and charged to the CEP will equal the portion of the CEP’s Scheduled Demand which was scheduled to be served by the interrupted import.SETTLEMENT OF OPERATING RESERVE and regulation MARKETPayments for Operating Reserves and RegulationThe ISA will acquire the necessary Operating Reserves and Regulation for the Northern Maine Market under the terms of the NBSO transmission tariff or from any other entity which the ISA determines can provide, on a reliable basis, comparable and competitively priced Operating Reserves and Regulation services.Charges for Operating Reserves and RegulationThe ISA’s total cost of acquiring Operating Reserves and Regulation in each hour will be recovered from all CEPs participating in the ISA based on each CEP’s Demand ratio share of the Northern Maine electrical Demand in the hour.  Any non-hourly costs (e.g., $/MW-day or $/KW-month) will be recovered on a Demand ratio share basis over the time period for which the fixed costs apply, with equal amounts collected in each hour of the time period.billing for instructed deviations from generating unit schedulesPayments to GeneratorsTo the extent that a TSO issues a Dispatch Instruction to a Generating Unit to change its output for reliability purposes to a value other than its Scheduled output (see Section 2.2 of NMMR #2), the Generator may be eligible for compensation.  Such compensation, if any, will be based on a showing, by the Generator to the ISA, which demonstrates that the compensation received by the Generator through the normal operation of the Northern Maine Market, in conjunction with the compensation received from the Generator’s bilateral contracts, failed to compensate the Generator to the same level as it would have been compensated if no such Dispatch Instruction had been issued.  In performing this calculation, the Generator will be expected to demonstrate and take account of any changes in its operating costs to operate at the new output level.Charges to CEPsTo the extent that payments are made to Generators under the preceding section, the ISA’s costs in making such payments will be collected from the CEPs in the region in which such Dispatch Instructions for reliability purposes were issued.  The CEPs will share these costs based on each CEP’s Demand ratio share of total Demand in the region over the period for which the costs were incurred.SETTLEMENT UNDER THE NBSO TRANSMISSION TARIFFAll products delivered under the NBSO transmission tariff will be settled in accordance with the terms thereof, with the ISA acting as agent of the T&amp;D Utilities.settlement for capacity obligationsTo the extent that the ISA incurs Capacity charges due to the failure of CEPs to provide Eligible Unforced Capacity to meet their Capacity Obligations, the ISA will bill the applicable CEPs for all such costs.  The ISA will bill deficient CEPs for the ISA’s costs incurred, and any multipliers, based on their deficiencies in meeting their Capacity Obligations under NMMR #10, Capacity Obligation.PENALTY MECHANISMBalancing Energy Deviation Penalties for CEPsCEPs will be assessed hourly penalties for significant under or over scheduling of Demand and Resources.  This penalty will be assessed to Balancing Energy Deviation Fractions (“BEDFs”), where BEDFs are:| (Balancing Energy)/(Actual Demand) | x 100Penalties will be assessed per Settlement Period per CEP per Interface in accordance with the following criteria.CEPs with BEDFs less than or equal to 10% will not be assessed any penalty.CEPs with BEDFs greater than 10% but less than or equal to 20% will be assessed a penalty of (0 * BECP * (Balancing Energy)).CEPs with BEDFs greater than 20% will be assessed a penalty of (0 * BECP * (Balancing Energy)).(No Penalties are to be assessed under Market Rule 4.9.1 at this time)Any penalties collected by the ISA will be utilized to reduce the ISA expenses charged to Market Participants.DAILY load SETTLEMENT PROCESSA multi-step process involving the ISA and the CEPs is required to produce the final daily load settlement statements for the hourly services.Overview of Daily Load Settlement ProcessPreliminary daily load settlement data is provided after each Trading Day by the ISA and includes all load settlement data for each of the hourly services.  The preliminary daily load settlement statement will be issued at the end of the 3rd business day following the Trading Day.  T&amp;D Utilities will provide load data within thirty-six (36) hours following the Trading Day.  No funds transfers will be calculated or take place at this time.  Generators (for their Generating Units) and CEPs are expected to verify the accuracy of the preliminary daily load settlement data.  Errors and data corrections are to be resolved on a daily basis.  Final daily load settlement information is used in the monthly invoice process.Preliminary Daily Load Settlement StatementEach preliminary daily load settlement statement will include a statement of the BQs of each CEP for each hour in the Trading Day.  These are the BQs that, when priced at the prices that do not become available until the invoice is received pursuant to the terms of the NBSO transmission tariff or from any other provider of Balancing Energy, result in the net bill for each CEP for Balancing Energy.Resolving Errors and Discrepancies in the Preliminary Daily Load Settlement StatementsGenerators and CEPs must file any disputes related to the preliminary daily load settlement data within four business days of statement issue.  CEPs are expected to file disputes with respect to Demand meter and load-profile data directly with either the appropriate T&amp;D Utility or the ISA, with a copy to the other party.Final Daily Load Settlement StatementThe final daily load settlement statement will reflect the agreed to revisions to the preliminary daily load settlement statement and will be used in the monthly invoice process.  The aggregate of the final daily load settlement statements for the month provides:a preliminary load settlement of the previous month for all CEPs serving load-profiled customers; anda final load settlement of the previous month for all other CEPs.MONTHLY load SETTLEMENT AND ADJUSTMENT PROCESSA multi-step process involving the ISA and CEPs with load-profiled customers is required to produce the final monthly load settlement statement (invoice).The monthly load settlement process settles the month prior to the previous month.The T&amp;D Utilities shall provide the monthly true-ups of the CEP Demands for the month prior to the previous month on the 10th business day of the month.The ISA prepares the final monthly load settlement statement to be used in the monthly invoice process.MONTHLY INVOICE PROCESSOverview of Monthly Invoice ProcessThis is the month-end billing process showing the net amounts due from or owed to CEPs.  This statement is determined from the final daily load settlement statements for the previous month, and the final monthly load settlement statement for the month before the previous month.Timing of Monthly InvoiceThe ISA shall provide to each CEP a monthly invoice based on the final load settlement statements.  The monthly invoice shall be issued by the 3rd business day after the receipt of all settlement information.PAYMENT PROCEDURESPayments will be made by electronic funds transfer.  All funds owed to the ISA will be paid by 10:00 am on the Payment Date.  Funds owed to CEPs will be paid by 4:00 pm on the Payment Date.The Payment Date will be the 20th of the month following the month being invoiced and includes any adjustments for previous months.  If the 20th is not a business day, the Payment Date will be the last business day prior to the 20th.If any Generator, T&amp;D Utility or CEP fails to pay any amount when due, there shall be added to that amount a late payment charge on the monthly unpaid balance of the percentage prescribed in 18 C.F.R. § 35.19(a).  The ISA has the discretion to waive the interest charges on late payments when the late payment issue can be resolved and payment received by the end of the month in which the payment was due.If there are insufficient funds standing to the credit of the ISA to pay all amounts in full, the ISA shall reduce payments to those CEPs owed monies for that calendar month to the extent necessary to clear its accounts by the close of banking business on the Payment Date.  Provided, however, that funds owed for services received under the terms of the NBSO transmission tariff will be paid in full by the ISA on the date such payment is due pursuant to the NBSO transmission tariff, regardless of any CEP defaults.DOCUMENT HISTORYApproved by the ISA Board of DirectorsAugust 23, 1999Revision 1 approved by the ISA Board of DirectorsDecember 14, 1999Revision 2 approved by the ISA Board of DirectorsAugust 15, 2000Revision 3 approved by the ISA Board of DirectorsNovember 28, 2000Revision 4 approved by the ISA Board of DirectorsNovember 28, 2006Revision 5 approved by the ISA Board of DirectorsApril 5, 2007Revision 6 approved by the ISA Board of DirectorsJuly 10, 2007</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>7</record_id>
      <option_code>A</option_code>
      <record_title>Monitoring and Auditing</record_title>
      <record_content_desc>NMMR #5</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>7000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>5 MONITORING AND AUDITING5.1 Scope of MONITORING and auditing activitiesThe Independent System Administrator (ISA) shall perform monitoring and auditing functions with regard to the services which are provided under the ISA Tariff (including the actions of Generators and Competitive Electricity Providers (CEPs)) and the directions that it gives to, and actions taken with respect to those directions by, the Transmission System Operators (TSOs), and all other actions by the TSOs under the Transmission Owners Transmission Tariffs.  These ISA and TSO functions include, but are not limited to, coordination of bilateral scheduling of Energy, administration of Balancing Energy services and Ancillary Services, monitoring of compliance with Capacity Obligations, administration of processes for gaining access to the transmission systems, scheduling of Tie Line Interruption Service (TLIS) under the Products and Services Agreement (PSA) with New Brunswick Power Corporation (NB Power), and dispatch of the Northern Maine system by the TSOs in accordance with the Operating Plan.5.2 isa roles and authorityThe ISA has the obligation and authority to carry out monitoring and auditing activities as identified in this Northern Maine Market Rule (NMMR) #5 – Monitoring and Auditing.  The ISA shall:a) Monitor, investigate and report on Balancing Energy services, Ancillary Services, Capacity Obligations, TLIS services, transmission access, and the operations of TSOs to ensure that the processes are open, fair, competitive, efficient, do not result in perverse incentives, and comply with the ISA Tariff and the NMMRs;b) From time to time and as agreed by the ISA Board of Directors, engage the services of external independent auditors to ensure compliance of the ISA and the TSOs with the duties and obligations as established under the ISA Tariff and the TOs Transmission Tariffs;c) Conduct an audit of TSOs to ensure that dispatching is performed in compliance with the ISA Tariff and the Operating Plan;d) Develop and implement processes to ensure that the ISA responsibilities described in this NMMR #5 are fulfilled;e) To the extent possible, ensure that the monitoring and auditing activities avoid interfering with competitive market signals;f) Develop and maintain a manual which contains the procedures for monitoring and auditing, including related documentation and reporting;g) Investigate and take remedial action consistent with NMMR #7 – Imposition of Sanctions for infractions; andh) Make recommendations to the ISA Board of Directors for such changes to the ISA Tariff and to the NMMRs as may be judged to be necessary to correct problems which are identified through monitoring and auditing.5.3 monitoring and auditing Processes5.3.1 MonitoringThe ISA shall:a) Carry out monitoring activities of Balancing Energy services, Ancillary Services, Capacity Obligations, TLIS services, transmission access, dispatch operations, and any other market administration responsibilities which are assigned to the ISA by the ISA Board of Directors on a day-by-day basis;b) Develop and publish information on a periodic basis which indicates historic prices and behaviors, which the ISA will use to evaluate the behavior of Generators and CEPs on an ongoing basis;c) Develop a standard written market monitoring report to the Board of Directors based on advice from the ISA Board of Directors and the Market Participants;d) Upon request, make report to Market Participants, and to the Federal Energy Regulatory Commission (FERC) and to those state regulatory bodies which have jurisdiction over the Market Participants;e) Impose penalties and sanctions for violations by Market Participants of the ISA Tariff, NMMRs, or ISA directions pursuant thereto in accordance with the provisions of NMMR #7;f) Request an immediate explanation or justification from any Market Participant which is responsible for:i) any deviation from normal practices which may be construed as manipulation of the market for Balancing Energy, the markets for Ancillary Services, or other ISA-administrated markets;ii)     actions that appear to be inconsistent with the ISA Tariff, NMMRs, the ISA’s directions pursuant thereto, or the TO Transmission Tariffs;iii)    actions that otherwise appear unreasonably to constrain transmission access or adversely impact the ISA-administrated markets or functions; oriv)   failure to meet Capacity Obligations.g) Initiate further investigations of the incident if the explanation under 5.3.1.f above is inadequate;h) Make such data requests of CEPs, Generators and TSOs to augment publicly available data as the ISA deems necessary in order to perform its functions and discharge its obligations under the ISA Tariff and NMMRs, including as part of an inquiry pursuant to this NMMR #5;i) Develop findings, proposed remedies, or assessments of penalties for review by the responsible entity and the ISA Board of Directors, with due consideration for commercial sensitivity and confidentiality of information with regard to Market Participants;j) Invite the responsible entity to present its views to the ISA;k) Take such action as is necessary and appropriate following the reviews above;l) Complete the above process in a timely manner with due consideration for the need for fairness and confidentiality throughout the process; and m) Provide the results of monitoring activities to the ISA Board of Directors.5.3.2 Financial AuditsFrom time to time, with the agreement of the ISA Board of Directors, the ISA shall appoint an external independent certified public accounting firm to conduct an audit of the ISA in accordance with generally accepted auditing standards.  This audit may include material issues raised by the Market Participants and approved by the ISA Board of Directors for inclusion in the audit scope.  The audit report, excluding commercially sensitive information, shall be addressed to the ISA Board of Directors, and copies will be provided, upon request, to the Market Participants.This audit shall:a) Verify that the ISA’s financial statements are in compliance with generally accepted accounting principles and fairly present, in all material respects, the financial position, results of operation and cash flows for the audit period; andb) Review the ISA management's compliance with its operations policies and procedures.  The scope of this operations audit shall include the Real-time operations by the TSOs.5.3.3 Special Audits5.3.3.1 Retention of ConsultantsIn addition, the ISA, with the agreement or at the direction of the ISA Board of Directors, shall retain qualified consultants to:a) Conduct a management review of officers, employees, substantially full-time consultants, or contractors of the ISA for compliance with the ISA Code of Conduct to ensure adherence to the highest standards of lawful and ethical conduct in their activities; andb) At such other intervals as agreed upon by the ISA Board of Directors, undertake interim audits for specific issues and concerns of Market Participant(s) which the ISA Board of Directors believes, in consultation with the Market Participant(s) which initiate a request for an interim audit, to be of significant and critical magnitude to the ISA.  Such audits shall be conducted by an independent accounting or consulting firm.  The costs of such an audit shall be borne by the requesting Market Participant(s), unless the ISA Board of Directors determines otherwise.  Interim audits shall be conducted during normal business hours, after reasonable notice has been given to the ISA, and in accordance with the guidelines to be established by the ISA Board of Directors.5.3.3.2 ISA ResponsibilitiesThe ISA shall:a) Ensure that matters identified as a result of an audit shall be reviewed with the ISA Board of Directors and, as necessary, the Market Participant(s);b) Provide to the designated auditors or consultants full and complete access to all financial books, cost statements, accounting records, and all documentation pertaining to the requirements of the specific audits being performed.  Records relating to audits will be retained until the records retention requirements of the ISA are satisfied or until the audit issues are fully resolved, whichever is the later.  The right of access to records does not require the creation of new records, reports, studies, or evaluations not already available; andc) Ensure that all proprietary information obtained through any audits will remain strictly confidential.  All auditors shall sign a confidentiality agreement prior to being accepted as auditors by the ISA.5.4 CEp and generator Obligations and rights5.4.1 CEP and Generator ObligationsCEPs and Generators shall:a) Maintain records of Energy, Balancing Energy, Ancillary Services, Eligible Installed Capacity, Eligible Unforced Capacity, and transactions concerning transmission rights, including secondary market transactions, for a period of at least three years from the trading date;b) Provide data on Energy, Balancing Energy, Ancillary Services, Eligible Installed Capacity, Eligible Unforced Capacity, and transmission rights to the ISA after being notified of an investigation pursuant to monitoring and auditing activities; andc) Comply with the ISA Tariff, NMMRs, and ISA directions pursuant thereto.5.4.2 CEP and Generator RightsCEPs and Generators shall have the right to:a) Be promptly notified by the ISA of any perceived infraction;b) Justify or explain an incident before the ISA undertakes a full investigation;c) Receive and comment on any reports by the ISA in which the CEP or Generator is the subject of an investigation and any consequent recommendations for remedial action;d) Explain its position to the ISA prior to assessment of penalties or implementation of remedial action; ande) Initiate the Alternative Dispute Resolution (ADR) process contained in Section 9 of the ISA Tariff as a result of monitoring and auditing activities.5.5 TSo obligations and rights5.5.1 TSO ResponsibilitiesTSO’s shall:a) Report any deviations from the Schedules and/or the Operating Plan to the ISA;b) Maintain records of Energy scheduling, Balancing Energy, Ancillary Services and transmission access activities for a period of at least three years from the trading date;c) Provide data on Energy, Balancing Energy, Ancillary Services and transmission access to the ISA pursuant to monitoring and auditing activities; andd) Comply with the ISA Tariff, NMMRs and any ISA directions pursuant thereto.5.5.2 TSO RightsTSO’s shall have the right to:a) Be promptly notified by the ISA of any perceived infraction;b) Justify or explain the incident before the ISA undertakes a full investigation;c) Receive and comment on any reports by the ISA and recommendations for remedial action;d) Explain its position to the ISA prior to assessment of penalties or implementation of remedial action;e) Initiate the ADR process contained in Section 9 of the ISA Tariff as a result of monitoring and auditing activities; andf) Operate and control the Northern Maine system in Real-time in accordance with the need to ensure reliability and to comply with applicable reliability criteria.5.6 ReportingThe ISA shall:a) Provide verbal reports at meetings of the ISA Board of Directors on monitoring and auditing activities since the last ISA Board of Directors meeting;b) Forward to the ISA Board of Directors, as necessary, any reports of the independent auditors, as described in Section 5.3.2; andc) Distribute, as directed by the ISA Board of Directors, reports on any special investigations that the ISA Board of Directors directs the ISA to conduct, as described in Section 5.3.3.DOCUMENT HISTORYApproved by the ISA Board of DirectorsAugust 23, 1999Revision 1 approved by the ISA Board of DirectorsDecember 14, 1999Revision 2 approved by the ISA Board of DirectorsNovember 28, 2006Revision 3 approved by the ISA Board of DirectorsApril 5, 2007Revision 4 approved by the ISA Board of DirectorsJuly 10, 2007</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>8</record_id>
      <option_code>A</option_code>
      <record_title>Outage Coordination</record_title>
      <record_content_desc>NMMR #6</record_content_desc>
      <record_version_num>0.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>8000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2010-09-30</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>6 OUTAGE COORDINATION6.1 PLANNING OF GENERATING UNIT, EXTERNAL PURCHASE AND NORTHERN MAINE TRANSMISSION SYSTEM MAINTENANCE OUTAGES6.1.1 DATA REPORTINGAll information submitted in relation to Maintenance Outages must be submitted in accordance with this Northern Maine Market Rule (NMMR) #6 – Outage Coordination.6.1.1.1 Reporting for Generating Units and External PurchasesInformation regarding Proposed Maintenance Outages for Generating Units and external purchases shall be provided to the Independent System Administrator (ISA) by the Generator or Competitive Electricity Provider (CEP) having scheduling responsibility for such Generating Unit or external purchase.6.1.1.2 Reporting for Transmission MaintenanceInformation regarding Proposed Maintenance Outages for transmission facilities constituting or impacting the Northern Maine Transmission System shall be provided to the ISA by the Transmission Owner (TO) having operation and maintenance responsibility for such facilities.6.1.1.3 Scheduling Time FramesScheduling data for Generating Units, external purchases and transmission facilities constituting or impacting the Northern Maine Transmission System shall be submitted in accordance with the following timing requirements.6.1.2 OUTAGE PLANNING AND UPDATINGBy the 1st day of each December, each Generator, CEP and TO will provide the ISA in writing (broadly interpreted) with a Proposed Maintenance Outage program for the next calendar year.  The ISA will utilize these requests to coordinate with the Transmission System Operators (TSOs) and develop a combined transmission and generation maintenance schedule for the calendar year, the transmission portion of which will be posted to the ISA Web-site.  In addition, each of these entities will provide the ISA with immediate notification of any changes in its Proposed Maintenance Outage programs.  The ISA will utilize these updates to modify the coordinated maintenance schedule and, as necessary, post changes to the ISA Web-site.  These Generator, CEP and TO updates must identify known changes to any previously Proposed, but not yet approved, or Approved Maintenance Outages and any additional Proposed Maintenance Outages anticipated over the rest of the calendar year.6.1.3 GENERATING UNIT AND EXTERNAL PURCHASE MAINTENANCE OUTAGE SCHEDULING6.1.3.1 Generating Unit and External Purchase Proposed Maintenance Outage ProgramThe following information is required for each Generating Unit or external purchase:a) the Generating Unit or external purchase name;b) the MW of Capacity that will be unavailable;c) the preferred scheduled start and finish date for each Proposed Maintenance Outage; andd) the amount of scheduling flexibility (i.e., the earliest start date and the latest finish date).The ISA will work with the Generators and CEPs to identify optimum times for Maintenance Outages to be scheduled for reliability purposes.6.1.3.2 Additional Maintenance OutagesIf conditions require, a Generating Unit or external purchase may, though its Generator or CEP and upon seventy-two (72) hours advance notice, schedule with the ISA a new Maintenance Outage on its system.  The Generating Unit or external purchase shall supply to the ISA, through its Generator or CEP, the data set out in this NMMR #6.  At the ISA’s discretion, this seventy-two (72) hour notice requirement may be relaxed.6.1.3.3 Changes to Generating Unit and External Purchase Approved Maintenance Outage ProgramEach Generating Unit or external purchase shall notify the ISA in writing, through its Generator or CEP, of any known changes to a Generating Unit or external purchase Approved Maintenance Outage scheduled to occur within the next thirty (30) days.A Generating Units or external purchase submitting notice through its Generator or CEP of a Proposed Maintenance Outage less than seven (7) days before the outage is scheduled to start or who revises the start date of a previously Approved Maintenance Outage to less than seven (7) days before the planned outage date, must obtain the approval of the ISA in accordance with this NMMR #6.  Such request must be made to the ISA by no later than 11:30 am three (3) business days prior to the starting date of the Proposed Maintenance Outage.6.1.3.4 Acceptance or Rejection of Maintenance Outage ScheduleThe ISA shall acknowledge each request submitted in accordance with the previous section within two (2) working hours of the receipt of the request.  The ISA shall approve or reject each request within a reasonable time of the receipt of the request but in any event shall notify the Generator or CEP of its decision not later than 3:30 pm on the business day after receipt of the request.6.1.3.5 Changes to Proposed Maintenance OutagesA Generating Unit or external purchase may submit changes to its Proposed Maintenance Outage program, through its Generator or CEP, at any time.6.1.3.6 Nature of Maintenance Outage InformationThe information relating to each Proposed Maintenance Outage submitted by a Generator or CEP in accordance with this NMMR #6 constitutes a request for a Maintenance Outage and is not considered an Approved Maintenance Outage until the ISA has notified the Generator or CEP of such approval pursuant to this NMMR #6.6.1.3.7 Additional Information RequestsThe ISA may request additional information or seek clarification from a Generator or CEP, with respect to its Generating Units or external purchases, of the information submitted in relation to a Generating Unit or external purchase Proposed Maintenance Outage.6.1.4 TRANSMISSION FACILITY MAINTENANCE OUTAGE SCHEDULING6.1.4.1 Transmission Facility Proposed Maintenance Outage ProgramThe following information is required for each transmission facility:a) the identification of the transmission facility, including TO and location;b) the nature of the Proposed Maintenance Outage;c) the preferred start and finish date for each Proposed Maintenance Outage;d) the time required to terminate the maintenance and restore the transmission system to normal operation;e) identification of primary and alternate telephone numbers for the operator’s single point of contact; andf) the amount of scheduling flexibility (i.e., the earliest start date and the latest finish date).6.1.4.2 Additional Maintenance OutagesIf conditions require, a TO may, upon seventy-two (72) hours advance notice, schedule with the ISA a new Maintenance Outage on its system.  The TO shall supply to the ISA the data set out in this NMMR #6.  At the ISA’s discretion, this seventy-two (72) hour notice requirement may be relaxed.6.1.4.3 Changes to Transmission Facility Approved Maintenance Outage ProgramEach TO shall notify the ISA in writing of any known changes to a transmission facility Approved Maintenance Outage scheduled to occur within the next thirty (30) days.TOs submitting notice of a Proposed Maintenance Outage less than seven (7) days before the outage is scheduled to start or who revise the start date of a previously Approved Maintenance Outage to less than seven (7) days before the planned outage date, must obtain the approval of the ISA in accordance with this NMMR #6.  Such request must be made to the ISA by no later than 11:30 am three (3) business days prior to the starting date of the Proposed Maintenance Outage.6.1.4.4 Acceptance or Rejection of Maintenance Outage ScheduleThe ISA shall acknowledge each request submitted in accordance with the previous section within two (2) working hours of the receipt of the request.  The ISA shall approve or reject each request within a reasonable time of the receipt of the request but in any event shall notify the TO of its decision not later than 3:30 pm on the business day after receipt of the request.6.1.4.5 Changes to Proposed Maintenance OutagesA TO may submit changes to its Proposed Maintenance Outage information at any time.6.1.4.6 Nature of Maintenance Outage InformationThe information relating to each Proposed Maintenance Outage submitted by a TO in accordance with this NMMR #6 constitutes a request for a Maintenance Outage and is not considered an Approved Maintenance Outage until the ISA has notified the TO of such approval pursuant to this NMMR #6.6.1.4.7 Additional Information RequestsThe ISA may request additional information or seek clarification from TOs of the information submitted in relation to a Proposed Maintenance Outage.6.1.4.8 Maritime Balancing AreaThe ISA will coordinate, in conjunction with the TOs, the exchange of proposed Northern Maine Transmission System Maintenance Outages, as appropriate, with the Balancing Authority for the Maritime the Balancing Area.6.1.5 ANALYSIS OF GENERATING UNIT AND EXTERNAL PURCHASE ADEQUACY6.1.5.1 Calculation of Aggregate Generating CapacityTwice a year the ISA will post to the ISA Web-site the North American Electric Reliability Council (NERC) required 18-month Winter and Summer Assessments (known as the C 13 report).  In addition, every week the ISA will forward to the regional Reliability Coordinator the Northeast Power Coordinating Council (NPCC) required weekly updates of Generating Unit and external import capability for the following week (known as the C 14 report).  The C 13 and C 14 reports, or successors thereto, are described in NPCC Document C 13, Operational Planning Criteria.  In preparing these reports, the ISA will utilize information received from CEPs and Generators on the status of the Eligible Installed Capacity from which CEPs plan to use the associated Eligible Unforced Capacity to meet their future Capacity Obligations (see NMMR #10, Capacity Obligations).6.1.6 ANALYSIS OF NORTHERN MAINE TRANSMISSION SYSTEM OUTAGE PLANS6.1.6.1 Review of Proposed Maintenance OutagesThe ISA will review the Proposed Maintenance Outages submitted under this NMMR #6 to determine if any one or a combination of Proposed Maintenance Outage requests relating to Northern Maine transmission facilities may cause the ISA to violate any applicable reliability criteria, such as those of the Northeast Power Coordinating Council (NPCC) and the North American Electric Reliability Council (NERC) and the Reliability Standards contained in NMMR #8, Connections, Retirements and Demand-Side Management Programs.  This review will take consideration of factors such as, but not limited to, the following:a) forecast peak Demand conditions;b) other Proposed Maintenance Outages, previously Approved Maintenance Outages, and anticipated Generating Unit and external purchase Proposed or Approved Maintenance Outages;c) potential to cause Congestion; andd) impacts on the transfer capability of the ties to NB Power.6.1.6.2 Transmission ReportThe ISA will publish, on the ISA Web-site, a summary of Proposed and Approved Maintenance Outages on the Northern Maine Transmission System.6.2 SCHEDULING AND APPROVAL OF PROPOSED MAINTENANCE OUTAGES6.2.1 PROPOSED MAINTENANCE OUTAGES APPROVAL Unless, in the ISA’s determination, any of the Proposed Maintenance Outages would cause the ISA to violate any applicable reliability criteria, the ISA will approve the Proposed Maintenance Outages.  Once approved, Maintenance Outages will not be changed by the ISA except under the conditions described below in the section on withholding Final Approval.  In situations where a Proposed Maintenance Outage, in conjunction with previously Approved Maintenance Outages, would cause a violation of any applicable reliability criteria, including the Reliability Standards contained in NMMR #8, the ISA will notify the relevant Generator, CEP or TO.  The Generator, CEP or TO will revise the Proposed Maintenance Outage and inform the ISA of the changes pursuant to this NMMR #6.6.2.2 SUGGESTED AMENDMENTS BY THE ISAThe ISA may provide each Generator, CEP or TO with any suggested amendments to those Proposed Maintenance Outage requests rejected by the ISA.6.2.3 DELAYThe ISA may delay its approval of a Proposed Maintenance Outage if sufficient or complete information is not received by the ISA within the time frames set forth in this NMMR #6.6.2.4 REJECTION NOTICEThe ISA shall, in a rejection notice, identify the ISA’s reliability and security concerns which prompt the rejection and suggest possible remedies or schedule revisions which might mitigate any ISA concerns.  Approval may only be withheld by the ISA for reasons of system reliability or security, as described in more detail later.  When multiple Proposed Maintenance Outages (i.e., not including previous Approved Maintenance Outages) are causing a reliability or security concern, the ISA will:a) communicate bilaterally with each Generator, CEP and/or TO to see if they will adjust their Proposed Maintenance Outage schedules;b) determine if the multiple Generators, CEPs and/or TOs want to negotiate bilaterally; orc) chose a Proposed Maintenance Outage(s) at random to deny the Proposed Maintenance Outage(s), taking due consideration to spread the random selections on an equitable basis based on criteria established by the ISA Board of Directors.6.2.5 FINAL APPROVAL MANDATORYThe Generator, CEP or TO shall not initiate an Approved Maintenance Outage without receiving Final Approval as prescribed in this NMMR #6.6.2.6 FINAL ISA APPROVALOn the day when an Approved Maintenance Outage is scheduled to commence, the Generator, CEP or TO shall contact the ISA and/or the applicable Transmission System Operator (TSO), the ISA and the TSOs together constituting the Northern Maine Area Operator (NMAO), for Final Approval of the requested outage, including the starting time and return time.  No such Approved Maintenance Outage shall commence without such Final Approval being obtained from the NMAO, whose decision shall be final.6.2.7 WITHHOLDING OF FINAL APPROVAL AND RESCHEDULING OF APPROVED MAINTENANCE OUTAGESThe NMAO shall have the authority to withhold a Final Approval for an Approved Maintenance Outage for reasons of system reliability, including when such Approved Maintenance Outage will result in the ISA’s failure to meet the Reliability Standards for Northern Maine (see NMMR #8) without additional Capacity purchases.  This means that the NMAO forecasts an inability to meet any applicable reliability criteria and all other options except Capacity purchases by the ISA have been exercised.  The NMAO will inform the relevant Generator, CEP or TO as soon as it identifies situations which may lead to the cancellation of an Approved Maintenance Outage.  The NMAO shall immediately notify the relevant Generator, CEP or TO of its intention to withhold the Final Approval.  The Maintenance Outage will then be rescheduled pursuant to this NMMR #6.6.2.8 PRIORITY OF APPROVED MAINTENANCE OUTAGES Approved Maintenance Outages which are listed in the reports published by the ISA will be given a priority over the scheduling and approval of Proposed Maintenance Outage requests which have not been listed.6.3 MANAGEMENT OF FORCED OUTAGES OR IMMEDIATE NATURE MAINTENANCE6.3.1 IMMEDIATE FORCED OUTAGEA Generator, CEP or TO which identifies a situation likely to result in a Forced Outage within the next twenty-four (24) hours unless immediate corrective action is taken, where such action requires the removing from service or restricting an operating Generating Unit or external purchase or removing a transmission facility from service, shall communicate directly with the NMAO as set forth in the emergency procedures of NMMR #2, Scheduling and Dispatch.6.3.2 IMMINENT FORCED OUTAGEA Generator, CEP or TO which identifies a situation likely to result in a Forced Outage but of a nature not requiring a removal from service until some time more than twenty-four (24) hours in the future will be subject to the provisions of this NMMR #6 with respect to any necessary outage except that the requirements imposing time limits for notification will be waived and the request will be expedited by the ISA provided notice is given as soon as possible.6.4 COMMUNICATION OF SCHEDULED MAINTENANCE REQUESTS6.4.1 SINGLE POINT OF CONTACTAll communications concerning a Proposed Maintenance Outage request or a request to confirm or change an Approved Maintenance Outage shall be between the NMAO and the designated single point of contact for each Generator, CEP or TO.  The Generator, CEP or TO shall provide in their initial request the identification of the single point of contact, along with primary and alternate means of communication.  This identification will be confirmed in all communications with the NMAO in relation to Proposed or Approved Maintenance Outage requests, including any request for confirmation, change or Final Approval of an Proposed or Approved Maintenance Outage made to the NMAO.6.4.2 METHOD OF COMMUNICATIONSThe method of communication from the Generator, CEP or TO to the NMAO can be in the form of the following (items b) and c) will be acceptable where information is to be submitted “in writing”):a) voice;b) fax; andc) electronic (E-mail, FTP file, etc.).6.4.3 CONFIRMATIONWhen fax or electronic communication is utilized, confirmation from the NMAO must be received by the Generator, CEP or TO to validate the receipt of the request pursuant to this NMMR #6.6.4.4 COMMUNICATION OF APPROVAL OR REJECTIONThe ISA shall use the same methods in communicating the approval or rejection of a Proposed Maintenance Outage request or approval of a request to change an Approved Maintenance Outage to the relevant Generator, CEP or TO.6.5 OUTAGE COORDINATION FOR NEW FACILITIES6.5.1 COORDINATION BY THE ISAThe procedure to energize and place in service any new, modified or relocated piece of equipment, connected to the Northern Maine Transmission System, the connection of which has not been disapproved by the ISA in accordance with the provisions of NMMR #8, must be set out by the Generator, CEP, TO or Connected Entity and coordinated by the ISA.6.5.2 TYPES OF WORK REQUIRING COORDINATIONThe types of work which the ISA will coordinate under this NMMR #6 includes any new addition, replacement or modification to the Northern Maine Transmission System that has not been disapproved by the ISA in accordance with the provisions of NMMR #8, including:a) transmission lines forming part of the Northern Maine Transmission System;b) equipment including circuit breakers, transformers, disconnects, reactive devices, wave traps, forming part of the Northern Maine Transmission System;c) Generating Unit interconnections; and d) protection and control schemes, including SCADA, EMS, or AGC.6.5.3 UNCOMPLICATED WORKWhen line rearrangements and/or station equipment work is uncomplicated and easily understood, the ISA may determine that the work can be accomplished using Maintenance Outages approved in accordance with this NMMR #6.  The ISA will make this determination in coordination with the respective requesting Generator, CEP, TO or Connected Entity.6.5.4 SPECIAL PROCEDURES FOR MORE COMPLEX WORK6.5.4.1 Responsibility for PreparationIn cases to which this NMMR #6 does not apply, it is the responsibility of the requesting Generator, CEP, TO or Connected Entity to enable the ISA to approve Proposed Maintenance Outages in a manner that enables the necessary work to proceed.  The ISA must approve the procedure.6.5.4.2 Information to be Provided to the ISAIn addition to the requirements of NMMR #8, the ISA must be informed a minimum of four (4) weeks prior to the start of the procedure.  The information referred to in this NMMR #6, Appendix 6 A, shall be provided for modified facilities.6.5.4.3 Approval of the ProcedureUpon receipt of the information referred to in this NMMR #6, the ISA will review the information and notify the Generator, CEP, TO or Connected Entity of any required modifications.  The ISA may, at its discretion, require changes to and more detail to be provided for the procedure.  The requesting Generator, CEP, TO or Connected Entity will consult with other entities likely to be affected and will revise the procedure, following any necessary or appropriate discussions with the ISA to reflect the requirements of the ISA.  Following the ISA approval, the Generator, CEP, TO, Connected Entity, and the other entities likely to be affected will be so informed.6.5.4.4 Changes to ProcedureOnce the Proposed Maintenance Outage is approved by the ISA, any modifications to the procedure will require the requesting Generator, CEP, TO or Connected Entity to notify the ISA with as much lead time as possible of the recommended changes.  The modified procedure will then have to be approved by the ISA and the provisions of this NMMR #6 will apply.6.5.4.5 Approval of Work Requiring CoordinationNo work can begin pursuant to any procedure unless approved by the ISA and only in accordance with this NMMR #6.6.6 RECORDSThe ISA will maintain a confidential record of each Approved Maintenance Outage as it is implemented.DOCUMENT HISTORYApproved by the ISA Board of Directors August 23, 1999Revision 1 approved by the ISA Board of Directors November 16, 2005Revision 2 approved by the ISA Board of Directors November 28, 2006Revision 3 approved by the ISA Board of Directors April 5, 2007Revision 4 approved by the ISA Board of Directors July 10, 2007 APPENDIX 6-APROGRAM PREPARATION OUTLINE FORMODIFIED FACILITIESThe following information must be included in each request for an outage under NMMR #6.1 Entity performing work.2 Location of work.3 Identification of existing facilities involved or modified and new facilities (if any) being added or existing facilities being permanently removed from service.4 Outages required (clearly identify each outage if multiple outages are required), including:4.1 sequence of outage; and4.2 estimate of outage duration.5 Clearances required (including identification of all switching devices to be tagged), including:5.1 line;5.2 Generating Unit; and5.3 equipment.6 General statement of work to be completed with intermediate progress dates/events identified, including:6.1 transmission line work;6.2 Generating Unit work;6.3 SCADA modification work; and6.4 protective scheme work.7 Procedure for reporting work accomplished, including:7.1 to the ISA;7.2 to the TO;7.3 to the Generator or CEP for the Generating Unit; and7.4 to other Connected Entities.8 General description of the method to be used to energize and test new/rebuilt Generating Units, line(s) and station equipment.9 General description of the procedure to be used for phasing.10 In service testing, including:10.1 procedure to be performed; and10.2 notice of testing completion.11 Statement of completion, including:11.1 statement to be made at the completion of each section of program; and11.2 statement to be made at completion of total project.12 Drawings to be attached, including:12.1 existing status;12.2 for each intermediate stage; and12.3 proposed completion of job</record_plain_text>
      <record_change_type>NEW</record_change_type>
      <filing_id>111910</filing_id>
      <filing_title>Baseline Market Rules Refiling</filing_title>
      <filing_type>370</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2010-11-18</current_effective_date>
      <ferc_order_date>2011-01-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>12</record_id>
      <option_code>A</option_code>
      <record_title>Capacity Obligations</record_title>
      <record_content_desc>NMMR &amp;#35;10</record_content_desc>
      <record_version_num>1.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>12000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2016-11-01</proposed_effective_date>
      <priority_order>510</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>10	CAPACITY OBLIGATIONS
This Northern Maine Market Rule (NMMR) #10, Capacity Obligations, establishes Capacity Obligations for Competitive Electricity Providers (CEPs) and any other load serving entities within the ISA market area.  Unless otherwise indicated, references in this NMMR #10 to the obligations of a CEP include the obligations of any other load serving entities in the ISA market area.  The Capacity Obligations set forth herein recognize that the ISA:  i) operates as a sub area of the Maritimes Area; and ii) endeavor to ensure that the ISA sub area bears an equitable responsibility for the overall system reliability of the Maritimes Area.  CEPs shall be required to meet the Capacity Obligations pursuant to this section.  No other market rule provisions impose additional or reduced Capacity Obligations.
10.1	Based upon the most recent 18-month forecast and assessment produced under NMMR #6, Outage Coordination, Section 6.1.5.1 that is available six months prior to the commencement of a given Capability Period, the ISA will determine the Capacity Obligations. 
The Capacity Obligations shall be the obligations determined pursuant to Section 10.3, and all subparts thereto, of this NMMR #10.
In determining the Capacity Obligations, the ISA shall give effect to the following:  
a)	The Capacity Obligations met by Eligible Unforced Capacity shall be calculated to include the actual commitment of capacity from each Resource required to satisfy all applicable requirements for capacity established by this NMMR.
b)	The commitment of capacity referred to in Section 10.1(a) shall include the capacity required to allow for the provision of required Ancillary Services in accordance with NMMR #3, Ancillary Services, Section 3.2.
c)	The commitment of capacity referred to in Section 10.1(a) shall take into account established operating characteristics and planned outages.
d)	A CEP may serve load that it designates to the ISA as interruptible load with resources not backed by Capacity.
10.2	The ISA shall determine, for each applicable Resource, the Eligible Installed Capacity and the Eligible Unforced Capacity for that Resource for each Capability Period.
a)	The Eligible Installed Capacity of a Resource whose capacity is expected to be totally unavailable more than 30% of the time in a Capability Period, or at any time in the Capability Period when the Outage cannot be approved by the ISA under NMMR #6 at least four months before the start of the Capability Period, shall, subject to Section 10.2(c), be zero for that Capability Period;
b)	The Eligible Installed Capacity of a Resource whose capacity is expected to be available but de-rated more than 30% of the time in a Capability Period, or at any time in the Capability Period when the de-rating cannot be approved as an Outage by the ISA under NMMR #6 at least four months before the start of the Capability Period, shall, subject to Section 10.2(c), be determined on the basis of the Resource's Eligible Unforced Capacity for that Capacity Period;
c)	Notwithstanding Sections 10.2(a) and 10.2(b), a CEP may elect to combine two (2) Resources, each of which is expected to be unavailable or de-rated for more than 30% of the time in a Capability Period, and the ISA may accept the combination of these two Resources as a single Capacity Resource, in which case the Eligible Installed Capacity of such combined Resources shall be equal to that of the Resource with the lowest Eligible Installed Capacity;
d)	Eligible Installed Capacity may be determined for a Resource located outside of Northern Maine Transmission System (NMTS) provided that the Market Participant for that Resource has confirmed and demonstrated to the satisfaction of the ISA that:
i.	capacity can be provided by the Resource on a firm (non-recallable) basis when scheduled by the CEP or ISA;
ii.	in the case of a Resource located outside of the New Brunswick Balancing Authority Area, the deliverability of capacity from the Resource associated with Energy delivered from the Resource is assured by acceptable firm reservations of Transmission capacity or other acceptable means, provided that a Market Participant is not obligated to acquire firm transmission service for capacity owned or controlled by the Market Participant from which no Energy is to be generated and delivered to the Northern Maine Market; and  
iii.	the Resource is de-listed and not counted as a Capacity Resource in the market in which it is located up to the amount of Capacity committed to the Northern Maine Market;
e)	Eligible Unforced Capacity is defined in NMMR #1, Definitions, Section 1.1.44.
10.3	The ISA shall, at least six months prior to the start of each Capability Period, post to the ISA Website the Northern Maine Market’s projected peak load and the week of the projected peak load for the Northern Maine region for such Capability Period.  The projected peak plus projected operating reserve requirements determined in accordance with NMMR #3 shall establish the aggregate Capacity Obligation for the Northern Maine Market and will be the ISA’s basis for determining each CEP’s Capacity Obligation for each Capability Period under Section 10.1.
10.3.1	The ISA shall allocate to each CEP each month a portion of the total ISA Capacity Obligation established in Section 10.3 based upon the CEP’s coincident peak (i.e., the CEP’s load at the time of the ISA peak load for the month) for each month of the Capability Period in which load is served by the CEP.  These quantities are the Capacity Obligation for the CEP for that month of the Capability Period and are based on projected load served.  A CEP initiating service during a Capability Period will be required to meet its obligation for each of the remaining months of the Capability Period in which the CEP has a load serving obligation, all as described more fully in Section 10.3.3.
10.3.2	At least four months prior to the start of each Capability Period, the CEP shall provide to the ISA evidence satisfactory to the ISA that it has secured commitments of Eligible Unforced Capacity equal to or in excess of its Capacity Obligation.  The CEP shall identify to the ISA the Generating Units and other Resources thus committed.  The CEP may subsequently substitute other secured commitments of Eligible Unforced Capacity which shall be reviewed by the ISA consistent with the provisions in Section 10.3.4.
10.3.3	Load serving obligations for the Capability Period acquired for less than the entire Capability Period described in Section 10.3.2 shall be administered in the following manner:
a)	A CEP that acquires obligations to serve load for the Capability Period any time after the expiration of the four-month period described in Section 10.3.2, shall:  i) be required, consistent with Section 10.3.1, to meet a Capacity Obligation for each month in which its newly acquired load is served by the acquiring CEP determined by the CEP’s coincident peak load for the month; and ii) provide evidence satisfactory to the ISA, prior to serving the new load, that it has secured commitments of Eligible Unforced Capacity equal to or in excess of its updated projected peak load plus its operating reserves obligation for the Capability Period reflecting the new load serving obligation.  The CEP shall identify to the ISA the Generating Units and other Resources thus committed.
b)	A CEP that acquires obligations to serve load for the Capability Period any time before the expiration of the four-month period described in Section 10.3.2 for service during a period less than the full Capability Period, shall meet the requirements of Section 10.3.3(a) for each month its newly acquired load is served by that CEP.
c)	A CEP that acquires the obligation to serve additional load any time after the expiration of the four-month period described in Section 10.3.2, and such load obligations are incremental to its original Capacity Obligation dealt with in Section 10.3.2, shall be subject to the same requirements for the incremental load obligations as described above in Sections 10.3.3(a)(i) and (ii) for incremental CEP load.
d)	A CEP obligated to serve load during a Capability Period that has its load serving obligation reduced at any time before the expiration of the four-month period described in Section 10.3.2 or during the Capability Period shall have its Capacity Obligation determined under this NMMR #10 reduced to an amount based on its reduced coincident load in the future months.
e)	A CEP that is a supplier of standard offer service and the standard offer service period begins or ends during a Capability Period, shall be subject to the requirements of Section 10.3.3(a) for each month or part thereof during which it is the default supplier or to the requirements of Section 10.3.3(d) for each month or part thereof during which it was not the default provider.
10.3.4	The ISA shall, at least three months prior to the start of each Capability Period, review the evidence and information submitted under Section 10.3.2, together with any additional relevant information available to it at that time, and:
a)	confirm with each Resource whether it accepts the CEP’s commitments of Capacity secured from the Resource;
b)	determine whether the Capacity and other Resources designated by a CEP to meet its Capacity Obligation meet the requirements of this NMMR #10;
c)	confirm with the CEP whether or not the Capacity and other Resources designated by a CEP to meet is Capacity Obligation are accepted by the ISA; and 
d)	where the ISA does not accept a commitment of Capacity secured by a CEP referred to in Section 10.3.2, advise the CEP of the reasons and factors giving rise to the non-acceptance. Deficiencies shall be determined based on the inability of a Capacity Resource to meet the requirements of this NMMR.
10.3.5	A CEP referred to in Section 10.3.1 to which a deficiency has been identified under Section 10.3.4 or by other means shall remedy the deficiency to the satisfaction of the ISA at least two months prior to the start of the Capability Period.  In the event the deficiency is not remedied, the ISA will, to the extent necessary, purchase the necessary Capacity to meet the Capacity Obligation of this Market Rule and will bill the deficient CEP for the costs incurred at up to twice actual costs.  Intentional or repeated deficiencies may also expose the CEP to sanctions under NMMR #7, Imposition of Sanctions.
10.3.6	Each CEP shall ensure that each Capacity Resource that it designates to meet the Capacity Obligation complies with all applicable requirements of the NMMRs imposed in respect of Capacity Resources, including the Outage Coordination provisions of NMMR #6, during the applicable Capability Period.
10.3.7	The ISA will coordinate the scheduled outages of in-region Generating Units with the Reliability Coordinator with the objective of ensuring that the Capacity Resources within and available to the Balancing Area are scheduled efficiently for the Balancing Area as a whole.
10.3.8	Subject to NMMR #5, Monitoring and Auditing, a CEP meeting the above Capacity Obligation requirements will be deemed to have met its Capacity Obligation for the Capability Period.  In the event of Forced and/or Scheduled Outages and the outages do not cause a deficiency for the Balancing Area, Firm Energy purchases will be accepted as part of the CEP’s Balanced Schedule during the period of the outages.  If the outages cause a deficiency for the Balancing Area, the CEP will be required to meet the any control action listed in Appendix 10-A required by the ISA.

DOCUMENT HISTORY
Approved by the ISA Board of Directors	July 10, 2007	
Revision 1 approved by the ISA Board of Directors	October 26, 2016	

Appendix 10A - Control Actions
Order and Description of Control Actions
Where the ISA identifies an actual or forecast shortage in the supply of energy or the provision of Ancillary Services it may take one or more of the following Control Actions.  These Control Actions are set out in order of priority recognizing that such order of priority is for guidance, and may be over-ridden by the ISA’s judgment in the exercise of its responsibilities to meet its Reliability Standards:

Priority	Description	
1	Issue public or Market Participant-specific warning notices, if applicable	
2	Utilize all output from Capacity Resources that are scheduled to be operating	
3	Mobilize additional available Capacity Resources	
4	Interrupt interruptible loads	
5	Reject firm export schedules from in-region Capacity Resources	
6	1.1.1.1.1.1.1.1.1	Cancel Planned Outages of Capacity Resources, and recall Capacity Resources on Planned Outages in progress	
7	Declare an emergency operating state	
8	Discontinue any testing or commissioning that reduces the net capability of the Northern Maine Transmission System	
9	Disregard 30-minute Operating Reserve  requirement	
10	Declare all export schedules from in-region Capacity Resources to be fully recallable; classify such export schedules as 10-minute non-spinning Operating Reserve; and recall such export schedules as activation of Operating Reserve if necessary	
11	Recall all exports from in-region Capacity Resources	
12	Purchase emergency Energy 	
13	Disregard 10-minute non-spinning Operating Reserve requirement	
14	Curtail firm exports, other than from Capacity Resources, in accordance with Interconnection Agreements	
15	Curtail firm load as necessary to preserve ability to withstand worst single contingency</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>111911</filing_id>
      <filing_title>Normal Filing NMMR &amp;#35;10</filing_title>
      <filing_type>10</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2016-11-01</current_effective_date>
      <ferc_order_date>2017-07-12</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>