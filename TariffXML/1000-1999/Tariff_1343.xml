<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Document xmlns="http://ferc.gov/etariffExport.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ferc_filing_data>
    <schema_version>2</schema_version>
    <company_id>C001436</company_id>
    <lead_applicant_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
    <tariff_id>14</tariff_id>
    <tariff_title>FERC Electric Tariff, Volume No. 6</tariff_title>
    <tariff_export_date>2025-09-16T18:53Z</tariff_export_date>
    <export_schema_version>2</export_schema_version>
    <record_data>
      <record_id>1</record_id>
      <option_code>A</option_code>
      <record_title>Title Page</record_title>
      <record_content_desc>WestConnect Pricing Exp.</record_content_desc>
      <record_version_num>2.0.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>1000000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2011-07-01</proposed_effective_date>
      <priority_order>500</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data></record_binary_data>
      <record_plain_text>ARIZONA PUBLIC SERVICE COMPANY      FERC Electric Tariff, Volume No. 6    Second WestConnect Point-To-Point     Regional Transmission Service Experiment Tariff</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>56</filing_id>
      <filing_title>Amendment to Second WestConnect Participation Agreement Filing</filing_title>
      <filing_type>130</filing_type>
      <associated_filing_id>52</associated_filing_id>
      <associated_record_id>1</associated_record_id>
      <associated_option_code>A</associated_option_code>
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2011-07-01</current_effective_date>
      <ferc_order_date>2011-06-30</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
    <record_data>
      <record_id>2</record_id>
      <option_code>A</option_code>
      <record_title>WestConnect Regional Point-To-Point Pricing Tariff</record_title>
      <record_content_desc>Regional Transmission Ser</record_content_desc>
      <record_version_num>3.1.0</record_version_num>
      <record_narrative_name xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <collation_value>1000000000</collation_value>
      <record_parent_id>0</record_parent_id>
      <proposed_effective_date>2013-07-01</proposed_effective_date>
      <priority_order>510</priority_order>
      <record_content_type_code>1</record_content_type_code>
      <record_binary_data>e1xydGYxXGFkZWZsYW5nMTAyNVxhbnNpXGFuc2ljcGcxMjUyXHVjMVxhZGVmZjBcZGVmZjBcc3RzaGZkYmNoMFxzdHNoZmxvY2gwXHN0c2hmaGljaDBcc3RzaGZiaTBcZGVmbGFuZzEwMzNcZGVmbGFuZ2ZlMTAzM1x0aGVtZWxhbmcxMDMzXHRoZW1lbGFuZ2ZlMFx0aGVtZWxhbmdjczB7XGZvbnR0Ymx7XGYwXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQwXGZwcnEye1wqXHBhbm9zZSAwMjAyMDYwMzA1MDQwNTAyMDMwNH1UaW1lcyBOZXcgUm9tYW47fXtcZjFcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDBcZnBycTJ7XCpccGFub3NlIDAyMGIwNjA0MDIwMjAyMDIwMjA0fUFyaWFsO30NCntcZjJcZmJpZGkgXGZtb2Rlcm5cZmNoYXJzZXQwXGZwcnExe1wqXHBhbm9zZSAwMjA3MDMwOTAyMDIwNTAyMDQwNH1Db3VyaWVyIE5ldzt9e1xmM1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MlxmcHJxMntcKlxwYW5vc2UgMDUwNTAxMDIwMTA3MDYwMjA1MDd9U3ltYm9sO317XGYxMFxmYmlkaSBcZm5pbFxmY2hhcnNldDJcZnBycTJ7XCpccGFub3NlIDA1MDAwMDAwMDAwMDAwMDAwMDAwfVdpbmdkaW5nczt9DQp7XGYxMVxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDEyOFxmcHJxMXtcKlxwYW5vc2UgMDIwMjA2MDkwNDAyMDUwODAzMDR9TVMgTWluY2hve1wqXGZhbHQgXCc4MlwnNmNcJzgyXCc3MiBcJzk2XCdiZVwnOTJcJ2E5fTt9e1xmMTNcZmJpZGkgXGZuaWxcZmNoYXJzZXQxMzRcZnBycTJ7XCpccGFub3NlIDAyMDEwNjAwMDMwMTAxMDEwMTAxfVNpbVN1bntcKlxmYWx0IFwnY2JcJ2NlXCdjY1wnZTV9O30NCntcZjM0XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQwXGZwcnEye1wqXHBhbm9zZSAwMjA0MDUwMzA1MDQwNjAzMDIwNH1DYW1icmlhIE1hdGg7fXtcZjM3XGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQwXGZwcnEye1wqXHBhbm9zZSAwMjBmMDUwMjAyMDIwNDAzMDIwNH1DYWxpYnJpO317XGYzOFxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MFxmcHJxMntcKlxwYW5vc2UgMDIwYjA2MDQwMzA1MDQwNDAyMDR9VGFob21hO30NCntcZjM5XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQwXGZwcnEye1wqXHBhbm9zZSAwMjA0MDYwNDA1MDUwNTAyMDMwNH1DZW50dXJ5IFNjaG9vbGJvb2s7fXtcZjQwXGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MFxmcHJxMXtcKlxwYW5vc2UgMDIwYjA2MDkwMjAyMDQwMzAyMDR9Q29uc29sYXM7fXtcZjQxXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQwXGZwcnEye1wqXHBhbm9zZSAwMjAyMDYwMzA1MDQwNTAyMDMwNH1UaW1lczt9DQp7XGY0MlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MFxmcHJxMHtcKlxwYW5vc2UgMDAwMDAwMDAwMDAwMDAwMDAwMDB9KG5vcm1hbCB0ZXh0KXtcKlxmYWx0IFRpbWVzIE5ldyBSb21hbn07fXtcZjE3NFxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDEyOFxmcHJxMXtcKlxwYW5vc2UgMDIwMjA2MDkwNDAyMDUwODAzMDR9QE1TIE1pbmNobzt9DQp7XGYyMDhcZmJpZGkgXGZuaWxcZmNoYXJzZXQxMzRcZnBycTJ7XCpccGFub3NlIDAwMDAwMDAwMDAwMDAwMDAwMDAwfUBTaW1TdW47fXtcZmxvbWFqb3JcZjMxNTAwXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQwXGZwcnEye1wqXHBhbm9zZSAwMjAyMDYwMzA1MDQwNTAyMDMwNH1UaW1lcyBOZXcgUm9tYW47fQ0Ke1xmZGJtYWpvclxmMzE1MDFcZmJpZGkgXGZyb21hblxmY2hhcnNldDBcZnBycTJ7XCpccGFub3NlIDAyMDIwNjAzMDUwNDA1MDIwMzA0fVRpbWVzIE5ldyBSb21hbjt9e1xmaGltYWpvclxmMzE1MDJcZmJpZGkgXGZyb21hblxmY2hhcnNldDBcZnBycTJ7XCpccGFub3NlIDAyMDQwNTAzMDUwNDA2MDMwMjA0fUNhbWJyaWE7fQ0Ke1xmYmltYWpvclxmMzE1MDNcZmJpZGkgXGZyb21hblxmY2hhcnNldDBcZnBycTJ7XCpccGFub3NlIDAyMDIwNjAzMDUwNDA1MDIwMzA0fVRpbWVzIE5ldyBSb21hbjt9e1xmbG9taW5vclxmMzE1MDRcZmJpZGkgXGZyb21hblxmY2hhcnNldDBcZnBycTJ7XCpccGFub3NlIDAyMDIwNjAzMDUwNDA1MDIwMzA0fVRpbWVzIE5ldyBSb21hbjt9DQp7XGZkYm1pbm9yXGYzMTUwNVxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MFxmcHJxMntcKlxwYW5vc2UgMDIwMjA2MDMwNTA0MDUwMjAzMDR9VGltZXMgTmV3IFJvbWFuO317XGZoaW1pbm9yXGYzMTUwNlxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MFxmcHJxMntcKlxwYW5vc2UgMDIwZjA1MDIwMjAyMDQwMzAyMDR9Q2FsaWJyaTt9DQp7XGZiaW1pbm9yXGYzMTUwN1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MFxmcHJxMntcKlxwYW5vc2UgMDIwMjA2MDMwNTA0MDUwMjAzMDR9VGltZXMgTmV3IFJvbWFuO317XGYyMDlcZmJpZGkgXGZyb21hblxmY2hhcnNldDIzOFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQ0U7fXtcZjIxMFxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MjA0XGZwcnEyIFRpbWVzIE5ldyBSb21hbiBDeXI7fQ0Ke1xmMjEyXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNjFcZnBycTIgVGltZXMgTmV3IFJvbWFuIEdyZWVrO317XGYyMTNcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gVHVyO317XGYyMTRcZmJpZGkgXGZyb21hblxmY2hhcnNldDE3N1xmcHJxMiBUaW1lcyBOZXcgUm9tYW4gKEhlYnJldyk7fXtcZjIxNVxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc4XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoQXJhYmljKTt9DQp7XGYyMTZcZmJpZGkgXGZyb21hblxmY2hhcnNldDE4NlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQmFsdGljO317XGYyMTdcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2M1xmcHJxMiBUaW1lcyBOZXcgUm9tYW4gKFZpZXRuYW1lc2UpO317XGYyMTlcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDIzOFxmcHJxMiBBcmlhbCBDRTt9e1xmMjIwXGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQyMDRcZnBycTIgQXJpYWwgQ3lyO30NCntcZjIyMlxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MTYxXGZwcnEyIEFyaWFsIEdyZWVrO317XGYyMjNcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDE2MlxmcHJxMiBBcmlhbCBUdXI7fXtcZjIyNFxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MTc3XGZwcnEyIEFyaWFsIChIZWJyZXcpO317XGYyMjVcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDE3OFxmcHJxMiBBcmlhbCAoQXJhYmljKTt9DQp7XGYyMjZcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDE4NlxmcHJxMiBBcmlhbCBCYWx0aWM7fXtcZjIyN1xmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MTYzXGZwcnEyIEFyaWFsIChWaWV0bmFtZXNlKTt9e1xmMjI5XGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MjM4XGZwcnExIENvdXJpZXIgTmV3IENFO317XGYyMzBcZmJpZGkgXGZtb2Rlcm5cZmNoYXJzZXQyMDRcZnBycTEgQ291cmllciBOZXcgQ3lyO30NCntcZjIzMlxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDE2MVxmcHJxMSBDb3VyaWVyIE5ldyBHcmVlazt9e1xmMjMzXGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MTYyXGZwcnExIENvdXJpZXIgTmV3IFR1cjt9e1xmMjM0XGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MTc3XGZwcnExIENvdXJpZXIgTmV3IChIZWJyZXcpO317XGYyMzVcZmJpZGkgXGZtb2Rlcm5cZmNoYXJzZXQxNzhcZnBycTEgQ291cmllciBOZXcgKEFyYWJpYyk7fQ0Ke1xmMjM2XGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MTg2XGZwcnExIENvdXJpZXIgTmV3IEJhbHRpYzt9e1xmMjM3XGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MTYzXGZwcnExIENvdXJpZXIgTmV3IChWaWV0bmFtZXNlKTt9e1xmMzIxXGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MFxmcHJxMSBNUyBNaW5jaG8gV2VzdGVybntcKlxmYWx0IFwnODJcJzZjXCc4MlwnNzIgXCc5NlwnYmVcJzkyXCdhOX07fQ0Ke1xmMzE5XGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MjM4XGZwcnExIE1TIE1pbmNobyBDRXtcKlxmYWx0IFwnODJcJzZjXCc4MlwnNzIgXCc5NlwnYmVcJzkyXCdhOX07fXtcZjMyMFxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDIwNFxmcHJxMSBNUyBNaW5jaG8gQ3lye1wqXGZhbHQgXCc4MlwnNmNcJzgyXCc3MiBcJzk2XCdiZVwnOTJcJ2E5fTt9DQp7XGYzMjJcZmJpZGkgXGZtb2Rlcm5cZmNoYXJzZXQxNjFcZnBycTEgTVMgTWluY2hvIEdyZWVre1wqXGZhbHQgXCc4MlwnNmNcJzgyXCc3MiBcJzk2XCdiZVwnOTJcJ2E5fTt9e1xmMzIzXGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MTYyXGZwcnExIE1TIE1pbmNobyBUdXJ7XCpcZmFsdCBcJzgyXCc2Y1wnODJcJzcyIFwnOTZcJ2JlXCc5MlwnYTl9O30NCntcZjMyNlxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDE4NlxmcHJxMSBNUyBNaW5jaG8gQmFsdGlje1wqXGZhbHQgXCc4MlwnNmNcJzgyXCc3MiBcJzk2XCdiZVwnOTJcJ2E5fTt9e1xmNTQ5XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMzhcZnBycTIgQ2FtYnJpYSBNYXRoIENFO317XGY1NTBcZmJpZGkgXGZyb21hblxmY2hhcnNldDIwNFxmcHJxMiBDYW1icmlhIE1hdGggQ3lyO30NCntcZjU1MlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYxXGZwcnEyIENhbWJyaWEgTWF0aCBHcmVlazt9e1xmNTUzXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNjJcZnBycTIgQ2FtYnJpYSBNYXRoIFR1cjt9e1xmNTU2XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxODZcZnBycTIgQ2FtYnJpYSBNYXRoIEJhbHRpYzt9e1xmNTc5XGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQyMzhcZnBycTIgQ2FsaWJyaSBDRTt9DQp7XGY1ODBcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDIwNFxmcHJxMiBDYWxpYnJpIEN5cjt9e1xmNTgyXGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQxNjFcZnBycTIgQ2FsaWJyaSBHcmVlazt9e1xmNTgzXGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQxNjJcZnBycTIgQ2FsaWJyaSBUdXI7fXtcZjU4NlxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MTg2XGZwcnEyIENhbGlicmkgQmFsdGljO30NCntcZjU4OVxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MjM4XGZwcnEyIFRhaG9tYSBDRTt9e1xmNTkwXGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQyMDRcZnBycTIgVGFob21hIEN5cjt9e1xmNTkyXGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQxNjFcZnBycTIgVGFob21hIEdyZWVrO317XGY1OTNcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDE2MlxmcHJxMiBUYWhvbWEgVHVyO30NCntcZjU5NFxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MTc3XGZwcnEyIFRhaG9tYSAoSGVicmV3KTt9e1xmNTk1XGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQxNzhcZnBycTIgVGFob21hIChBcmFiaWMpO317XGY1OTZcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDE4NlxmcHJxMiBUYWhvbWEgQmFsdGljO317XGY1OTdcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDE2M1xmcHJxMiBUYWhvbWEgKFZpZXRuYW1lc2UpO30NCntcZjU5OFxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MjIyXGZwcnEyIFRhaG9tYSAoVGhhaSk7fXtcZjU5OVxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MjM4XGZwcnEyIENlbnR1cnkgU2Nob29sYm9vayBDRTt9e1xmNjAwXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMDRcZnBycTIgQ2VudHVyeSBTY2hvb2xib29rIEN5cjt9e1xmNjAyXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNjFcZnBycTIgQ2VudHVyeSBTY2hvb2xib29rIEdyZWVrO30NCntcZjYwM1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYyXGZwcnEyIENlbnR1cnkgU2Nob29sYm9vayBUdXI7fXtcZjYwNlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTg2XGZwcnEyIENlbnR1cnkgU2Nob29sYm9vayBCYWx0aWM7fXtcZjYwOVxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDIzOFxmcHJxMSBDb25zb2xhcyBDRTt9e1xmNjEwXGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MjA0XGZwcnExIENvbnNvbGFzIEN5cjt9DQp7XGY2MTJcZmJpZGkgXGZtb2Rlcm5cZmNoYXJzZXQxNjFcZnBycTEgQ29uc29sYXMgR3JlZWs7fXtcZjYxM1xmYmlkaSBcZm1vZGVyblxmY2hhcnNldDE2MlxmcHJxMSBDb25zb2xhcyBUdXI7fXtcZjYxNlxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDE4NlxmcHJxMSBDb25zb2xhcyBCYWx0aWM7fXtcZjYxOVxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MjM4XGZwcnEyIFRpbWVzIENFO30NCntcZjYyMFxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MjA0XGZwcnEyIFRpbWVzIEN5cjt9e1xmNjIyXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNjFcZnBycTIgVGltZXMgR3JlZWs7fXtcZjYyM1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYyXGZwcnEyIFRpbWVzIFR1cjt9e1xmNjI0XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNzdcZnBycTIgVGltZXMgKEhlYnJldyk7fQ0Ke1xmNjI1XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNzhcZnBycTIgVGltZXMgKEFyYWJpYyk7fXtcZjYyNlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTg2XGZwcnEyIFRpbWVzIEJhbHRpYzt9e1xmNjI3XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNjNcZnBycTIgVGltZXMgKFZpZXRuYW1lc2UpO317XGYxOTUxXGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MFxmcHJxMSBATVMgTWluY2hvIFdlc3Rlcm47fQ0Ke1xmMTk0OVxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDIzOFxmcHJxMSBATVMgTWluY2hvIENFO317XGYxOTUwXGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MjA0XGZwcnExIEBNUyBNaW5jaG8gQ3lyO317XGYxOTUyXGZiaWRpIFxmbW9kZXJuXGZjaGFyc2V0MTYxXGZwcnExIEBNUyBNaW5jaG8gR3JlZWs7fXtcZjE5NTNcZmJpZGkgXGZtb2Rlcm5cZmNoYXJzZXQxNjJcZnBycTEgQE1TIE1pbmNobyBUdXI7fQ0Ke1xmMTk1NlxmYmlkaSBcZm1vZGVyblxmY2hhcnNldDE4NlxmcHJxMSBATVMgTWluY2hvIEJhbHRpYzt9e1xmbG9tYWpvclxmMzE1MDhcZmJpZGkgXGZyb21hblxmY2hhcnNldDIzOFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQ0U7fXtcZmxvbWFqb3JcZjMxNTA5XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMDRcZnBycTIgVGltZXMgTmV3IFJvbWFuIEN5cjt9DQp7XGZsb21ham9yXGYzMTUxMVxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYxXGZwcnEyIFRpbWVzIE5ldyBSb21hbiBHcmVlazt9e1xmbG9tYWpvclxmMzE1MTJcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gVHVyO317XGZsb21ham9yXGYzMTUxM1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc3XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoSGVicmV3KTt9DQp7XGZsb21ham9yXGYzMTUxNFxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc4XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoQXJhYmljKTt9e1xmbG9tYWpvclxmMzE1MTVcZmJpZGkgXGZyb21hblxmY2hhcnNldDE4NlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQmFsdGljO317XGZsb21ham9yXGYzMTUxNlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYzXGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoVmlldG5hbWVzZSk7fQ0Ke1xmZGJtYWpvclxmMzE1MThcZmJpZGkgXGZyb21hblxmY2hhcnNldDIzOFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQ0U7fXtcZmRibWFqb3JcZjMxNTE5XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMDRcZnBycTIgVGltZXMgTmV3IFJvbWFuIEN5cjt9e1xmZGJtYWpvclxmMzE1MjFcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MVxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gR3JlZWs7fQ0Ke1xmZGJtYWpvclxmMzE1MjJcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gVHVyO317XGZkYm1ham9yXGYzMTUyM1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc3XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoSGVicmV3KTt9e1xmZGJtYWpvclxmMzE1MjRcZmJpZGkgXGZyb21hblxmY2hhcnNldDE3OFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gKEFyYWJpYyk7fQ0Ke1xmZGJtYWpvclxmMzE1MjVcZmJpZGkgXGZyb21hblxmY2hhcnNldDE4NlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQmFsdGljO317XGZkYm1ham9yXGYzMTUyNlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYzXGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoVmlldG5hbWVzZSk7fXtcZmhpbWFqb3JcZjMxNTI4XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMzhcZnBycTIgQ2FtYnJpYSBDRTt9DQp7XGZoaW1ham9yXGYzMTUyOVxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MjA0XGZwcnEyIENhbWJyaWEgQ3lyO317XGZoaW1ham9yXGYzMTUzMVxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYxXGZwcnEyIENhbWJyaWEgR3JlZWs7fXtcZmhpbWFqb3JcZjMxNTMyXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNjJcZnBycTIgQ2FtYnJpYSBUdXI7fQ0Ke1xmaGltYWpvclxmMzE1MzVcZmJpZGkgXGZyb21hblxmY2hhcnNldDE4NlxmcHJxMiBDYW1icmlhIEJhbHRpYzt9e1xmYmltYWpvclxmMzE1MzhcZmJpZGkgXGZyb21hblxmY2hhcnNldDIzOFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQ0U7fXtcZmJpbWFqb3JcZjMxNTM5XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMDRcZnBycTIgVGltZXMgTmV3IFJvbWFuIEN5cjt9DQp7XGZiaW1ham9yXGYzMTU0MVxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYxXGZwcnEyIFRpbWVzIE5ldyBSb21hbiBHcmVlazt9e1xmYmltYWpvclxmMzE1NDJcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gVHVyO317XGZiaW1ham9yXGYzMTU0M1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc3XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoSGVicmV3KTt9DQp7XGZiaW1ham9yXGYzMTU0NFxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc4XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoQXJhYmljKTt9e1xmYmltYWpvclxmMzE1NDVcZmJpZGkgXGZyb21hblxmY2hhcnNldDE4NlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQmFsdGljO317XGZiaW1ham9yXGYzMTU0NlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYzXGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoVmlldG5hbWVzZSk7fQ0Ke1xmbG9taW5vclxmMzE1NDhcZmJpZGkgXGZyb21hblxmY2hhcnNldDIzOFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQ0U7fXtcZmxvbWlub3JcZjMxNTQ5XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMDRcZnBycTIgVGltZXMgTmV3IFJvbWFuIEN5cjt9e1xmbG9taW5vclxmMzE1NTFcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MVxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gR3JlZWs7fQ0Ke1xmbG9taW5vclxmMzE1NTJcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gVHVyO317XGZsb21pbm9yXGYzMTU1M1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc3XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoSGVicmV3KTt9e1xmbG9taW5vclxmMzE1NTRcZmJpZGkgXGZyb21hblxmY2hhcnNldDE3OFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gKEFyYWJpYyk7fQ0Ke1xmbG9taW5vclxmMzE1NTVcZmJpZGkgXGZyb21hblxmY2hhcnNldDE4NlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQmFsdGljO317XGZsb21pbm9yXGYzMTU1NlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYzXGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoVmlldG5hbWVzZSk7fXtcZmRibWlub3JcZjMxNTU4XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMzhcZnBycTIgVGltZXMgTmV3IFJvbWFuIENFO30NCntcZmRibWlub3JcZjMxNTU5XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMDRcZnBycTIgVGltZXMgTmV3IFJvbWFuIEN5cjt9e1xmZGJtaW5vclxmMzE1NjFcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MVxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gR3JlZWs7fXtcZmRibWlub3JcZjMxNTYyXGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxNjJcZnBycTIgVGltZXMgTmV3IFJvbWFuIFR1cjt9DQp7XGZkYm1pbm9yXGYzMTU2M1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc3XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoSGVicmV3KTt9e1xmZGJtaW5vclxmMzE1NjRcZmJpZGkgXGZyb21hblxmY2hhcnNldDE3OFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gKEFyYWJpYyk7fXtcZmRibWlub3JcZjMxNTY1XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQxODZcZnBycTIgVGltZXMgTmV3IFJvbWFuIEJhbHRpYzt9DQp7XGZkYm1pbm9yXGYzMTU2NlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYzXGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoVmlldG5hbWVzZSk7fXtcZmhpbWlub3JcZjMxNTY4XGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQyMzhcZnBycTIgQ2FsaWJyaSBDRTt9e1xmaGltaW5vclxmMzE1NjlcZmJpZGkgXGZzd2lzc1xmY2hhcnNldDIwNFxmcHJxMiBDYWxpYnJpIEN5cjt9DQp7XGZoaW1pbm9yXGYzMTU3MVxmYmlkaSBcZnN3aXNzXGZjaGFyc2V0MTYxXGZwcnEyIENhbGlicmkgR3JlZWs7fXtcZmhpbWlub3JcZjMxNTcyXGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQxNjJcZnBycTIgQ2FsaWJyaSBUdXI7fXtcZmhpbWlub3JcZjMxNTc1XGZiaWRpIFxmc3dpc3NcZmNoYXJzZXQxODZcZnBycTIgQ2FsaWJyaSBCYWx0aWM7fQ0Ke1xmYmltaW5vclxmMzE1NzhcZmJpZGkgXGZyb21hblxmY2hhcnNldDIzOFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQ0U7fXtcZmJpbWlub3JcZjMxNTc5XGZiaWRpIFxmcm9tYW5cZmNoYXJzZXQyMDRcZnBycTIgVGltZXMgTmV3IFJvbWFuIEN5cjt9e1xmYmltaW5vclxmMzE1ODFcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MVxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gR3JlZWs7fQ0Ke1xmYmltaW5vclxmMzE1ODJcZmJpZGkgXGZyb21hblxmY2hhcnNldDE2MlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gVHVyO317XGZiaW1pbm9yXGYzMTU4M1xmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTc3XGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoSGVicmV3KTt9e1xmYmltaW5vclxmMzE1ODRcZmJpZGkgXGZyb21hblxmY2hhcnNldDE3OFxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gKEFyYWJpYyk7fQ0Ke1xmYmltaW5vclxmMzE1ODVcZmJpZGkgXGZyb21hblxmY2hhcnNldDE4NlxmcHJxMiBUaW1lcyBOZXcgUm9tYW4gQmFsdGljO317XGZiaW1pbm9yXGYzMTU4NlxmYmlkaSBcZnJvbWFuXGZjaGFyc2V0MTYzXGZwcnEyIFRpbWVzIE5ldyBSb21hbiAoVmlldG5hbWVzZSk7fX17XGNvbG9ydGJsO1xyZWQwXGdyZWVuMFxibHVlMDtccmVkMFxncmVlbjBcYmx1ZTI1NTtccmVkMFxncmVlbjI1NVxibHVlMjU1O1xyZWQwXGdyZWVuMjU1XGJsdWUwOw0KXHJlZDI1NVxncmVlbjBcYmx1ZTI1NTtccmVkMjU1XGdyZWVuMFxibHVlMDtccmVkMjU1XGdyZWVuMjU1XGJsdWUwO1xyZWQyNTVcZ3JlZW4yNTVcYmx1ZTI1NTtccmVkMFxncmVlbjBcYmx1ZTEyODtccmVkMFxncmVlbjEyOFxibHVlMTI4O1xyZWQwXGdyZWVuMTI4XGJsdWUwO1xyZWQxMjhcZ3JlZW4wXGJsdWUxMjg7XHJlZDEyOFxncmVlbjBcYmx1ZTA7XHJlZDEyOFxncmVlbjEyOFxibHVlMDtccmVkMTI4XGdyZWVuMTI4XGJsdWUxMjg7DQpccmVkMTkyXGdyZWVuMTkyXGJsdWUxOTI7XHJlZDBcZ3JlZW4xOTJcYmx1ZTA7fXtcKlxkZWZjaHAgfXtcKlxkZWZwYXAgXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCB9XG5vcWZwcm9tb3RlIHtcc3R5bGVzaGVldHsNClxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNuZXh0MCBcc3Fmb3JtYXQgXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIE5vcm1hbDt9ew0KXHMxXHFjIFxsaTBccmkwXHNhMjQwXGtlZXBca2VlcG5cd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxMlxvdXRsaW5lbGV2ZWwwXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNca2VybmluZzMyXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0KXHNiYXNlZG9uMCBcc25leHQwIFxzcWZvcm1hdCBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgaGVhZGluZyAxO317XHMyXHFsIFxmaTcyMFxsaTE4MFxyaTBcc2w0ODBcc2xtdWx0MVxrZWVwXGtlZXBuXHdpZGN0bHBhclx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczEyXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4xODBcaXRhcDAgXHJ0bGNoXGZjczEgDQpcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIFxzYmFzZWRvbjAgXHNuZXh0MCBcc2xpbms2OSBcc3Fmb3JtYXQgXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIGhlYWRpbmcgMjt9ew0KXHMzXHFsIFxmaS03MjBcbGk3MjBccmkwXHNhMjQwXGtlZXBca2VlcG5cd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxMlxpbHZsMlxvdXRsaW5lbGV2ZWwyXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxiXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyANClxzYmFzZWRvbjAgXHNuZXh0MCBcc3Fmb3JtYXQgXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIGhlYWRpbmcgMzt9e1xzNFxxbCBcZmktNzIwXGxpMTQ0MFxyaTBcc2EyNDBca2VlcFxrZWVwblx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczEyXGlsdmwzXG91dGxpbmVsZXZlbDNcYWRqdXN0cmlnaHRccmluMFxsaW4xNDQwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IA0KXGx0cmNoXGZjczAgXGJcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MCBcc3Fmb3JtYXQgXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIGhlYWRpbmcgNDt9ew0KXHM1XHFsIFxmaS03MjBcbGkyMTYwXHJpMFxzYTI0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczEyXGlsdmw0XG91dGxpbmVsZXZlbDRcYWRqdXN0cmlnaHRccmluMFxsaW4yMTYwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgDQpcc2Jhc2Vkb24wIFxzbmV4dDAgXHNxZm9ybWF0IFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBoZWFkaW5nIDU7fXtcczZccWwgXGZpLTQzMlxsaTExNTJccmkwXHNiMjQwXHNhNjBcc2w0ODBcc2xtdWx0MVx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczEyXGlsdmw1XG91dGxpbmVsZXZlbDVcYWRqdXN0cmlnaHRccmluMFxsaW4xMTUyXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IA0KXGx0cmNoXGZjczAgXGJcZnMyMlxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MCBcc3Fmb3JtYXQgXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIGhlYWRpbmcgNixoNjt9e1xzN1xxbCBcZmktMjg4XGxpMTI5NlxyaTBcc2IyNDBcc2E2MFxzbDQ4MFxzbG11bHQxDQpcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxMlxpbHZsNlxvdXRsaW5lbGV2ZWw2XGFkanVzdHJpZ2h0XHJpbjBcbGluMTI5NlxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0KXHNiYXNlZG9uMCBcc25leHQwIFxzcWZvcm1hdCBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgaGVhZGluZyA3O317XHM4XHFsIFxmaS00MzJcbGkxNDQwXHJpMFxzYjI0MFxzYTYwXHNsNDgwXHNsbXVsdDFcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxMlxpbHZsN1xvdXRsaW5lbGV2ZWw3XGFkanVzdHJpZ2h0XHJpbjBcbGluMTQ0MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSANClxsdHJjaFxmY3MwIFxpXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDAgXHNxZm9ybWF0IFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBoZWFkaW5nIDg7fXsNClxzOVxxbCBcZmktNzIwXGxpMjE2MFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxMlxpbHZsOFxvdXRsaW5lbGV2ZWw4XGFkanVzdHJpZ2h0XHJpbjBcbGluMjE2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0KXHNiYXNlZG9uMCBcc25leHQwIFxzcWZvcm1hdCBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgaGVhZGluZyA5O317XCpcY3MxMCBcYWRkaXRpdmUgXHN1bmhpZGV1c2VkIFxzcHJpb3JpdHkxIERlZmF1bHQgUGFyYWdyYXBoIEZvbnQ7fXtcKg0KXHRzMTFcdHNyb3dkXHRyZnRzV2lkdGhCM1x0cnBhZGRsMTA4XHRycGFkZHIxMDhcdHJwYWRkZmwzXHRycGFkZGZ0M1x0cnBhZGRmYjNcdHJwYWRkZnIzXHRyY2JwYXQxXHRyY2ZwYXQxXHRibGluZDBcdGJsaW5kdHlwZTNcdHNjZWxsd2lkdGhmdHMwXHRzdmVydGFsdFx0c2JyZHJ0XHRzYnJkcmxcdHNicmRyYlx0c2JyZHJyXHRzYnJkcmRnbFx0c2JyZHJkZ3JcdHNicmRyaFx0c2JyZHJ2IA0KXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyMFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzbmV4dDExIFxzc2VtaWhpZGRlbiBcc3VuaGlkZXVzZWQgTm9ybWFsIFRhYmxlO317DQpcczE1XHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyMFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyANClxzYmFzZWRvbjAgXHNuZXh0MTUgXHNzZW1paGlkZGVuIFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBmb290bm90ZSB0ZXh0O317XCpcY3MxNiBcYWRkaXRpdmUgXHN1cGVyIFxzc2VtaWhpZGRlbiBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgZm9vdG5vdGUgcmVmZXJlbmNlO317XHMxN1xxbCBcbGkwXHJpMFx3aWRjdGxwYXINClx0cWNcdHg0MzIwXHRxclx0eDg2NDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGNncmlkIFxzYmFzZWRvbjAgXHNuZXh0MTcgXHNsaW5rNDMgXHN0eXJzaWQ4MzQwMDUxIGZvb3Rlcjt9e1wqXGNzMTggXGFkZGl0aXZlIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcc2Jhc2Vkb24xMCBcc3NlbWloaWRkZW4gXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIHBhZ2UgbnVtYmVyO317XCpcY3MxOSBcYWRkaXRpdmUgXHVsZGJcZXhwbmQwXGV4cG5kdHcwXGNmMiBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgRGVsdGFWaWV3IEluc2VydGlvbjt9e1wqXGNzMjAgXGFkZGl0aXZlIFx1bGRiXGV4cG5kMFxleHBuZHR3MFxjZjE3IFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSANCkRlbHRhVmlldyBNb3ZlIERlc3RpbmF0aW9uO317XHMyMVxxbCBcbGkxNDQwXHJpMTQ0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4xNDQwXGxpbjE0NDBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGYzOVxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgDQpcc2Jhc2Vkb24wIFxzbmV4dDIxIFxzc2VtaWhpZGRlbiBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgQmxvY2sgVGV4dDt9e1xzMjJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHRxY1x0eDQzMjBcdHFyXHR4ODY0MFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcY2dyaWQgDQpcc2Jhc2Vkb24wIFxzbmV4dDIyIFxzbGluazQ4IFxzdHlyc2lkODM0MDA1MSBoZWFkZXI7fXtcczIzXHFqIFxmaTcyMFxsaTBccmk3MjBcc2IyNDBcc2w0ODBcc2xtdWx0MVx3aWRjdGxwYXJcdHg4NjQwXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW43MjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0KXHNiYXNlZG9uMjQgXHNuZXh0MjMgXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIExlZ2FsIEZvcm1hdDt9e1xzMjRccWwgXGxpMzYwXHJpMFxzYTEyMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjM2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MjQgXHNzZW1paGlkZGVuIFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBMaXN0IENvbnRpbnVlO317XHMyNVxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgDQpcYWYzOFxhZnMxNlxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGYzOFxmczE2XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MjUgXHNzZW1paGlkZGVuIFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBCYWxsb29uIFRleHQ7fXtcczI2XHFqIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIA0KXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDI2IFxzc2VtaWhpZGRlbiBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgTGlzdCBCdWxsZXQ7fXtcKlxjczI3IFxhZGRpdGl2ZSBcZnMxNiBcc3NlbWloaWRkZW4gXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIGFubm90YXRpb24gcmVmZXJlbmNlO317DQpcczI4XHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyMFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyANClxzYmFzZWRvbjAgXHNuZXh0MjggXHNzZW1paGlkZGVuIFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBhbm5vdGF0aW9uIHRleHQ7fXtcczI5XHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWJcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxiXGZzMjBcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMjggXHNuZXh0MjggXHNzZW1paGlkZGVuIFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBhbm5vdGF0aW9uIHN1YmplY3Q7fXtcKlxjczMwIFxhZGRpdGl2ZSBcYlxmczI0XGtlcm5pbmczMiBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgQ2hhcjg7fXtcKlxjczMxIFxhZGRpdGl2ZSBcYlxmczI0IA0KXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIENoYXI3O317XCpcY3MzMiBcYWRkaXRpdmUgXGJcZnMyNCBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgQ2hhcjY7fXtcKlxjczMzIFxhZGRpdGl2ZSBcYlxmczI0IFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBDaGFyNTt9e1wqXGNzMzQgXGFkZGl0aXZlIFxmczI0IFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBDaGFyNDt9e1wqXGNzMzUgXGFkZGl0aXZlIFxiXGZzMjIgDQpcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgaDYgQ2hhcjt9e1wqXGNzMzYgXGFkZGl0aXZlIFxmczI0IFxzcHJpb3JpdHkwIFxzdHlyc2lkODM0MDA1MSBDaGFyMzt9e1wqXGNzMzcgXGFkZGl0aXZlIFxpXGZzMjQgXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIENoYXIyO317XCpcY3MzOCBcYWRkaXRpdmUgXGZzMjQgXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIENoYXIxO317DQpcczM5XHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc25leHQzOSBcc2hpZGRlbiBcc3NlbWloaWRkZW4gXHNwcmlvcml0eTAgXHN0eXJzaWQ4MzQwMDUxIA0KUmV2aXNpb247fXtcKlxjczQwIFxhZGRpdGl2ZSBcY2YxIFxzc2VtaWhpZGRlbiBcc3ByaW9yaXR5MCBcc3R5cnNpZDgzNDAwNTEgQ2hhcjt9e1xzNDFccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjFcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGZzMjFcbG9jaFxmNDBcaGljaFxhZjQwXGRiY2hcYWYzN1xjZ3JpZCBcc2Jhc2Vkb24wIFxzbmV4dDQxIFxzbGluazQyIFxzdW5oaWRldXNlZCBcc3R5cnNpZDgzNDAwNTEgUGxhaW4gVGV4dDt9e1wqXGNzNDIgXGFkZGl0aXZlIFxmczIxXGxvY2hcZjQwXGhpY2hcYWY0MFxkYmNoXGFmMzcgXHNsaW5rNDEgXHNsb2NrZWQgXHN0eXJzaWQxMTgxOTg3MiBQbGFpbiBUZXh0IENoYXI7fXtcKlxjczQzIFxhZGRpdGl2ZSBcZnMyNFxjZjEgDQpcc2xpbmsxNyBcc2xvY2tlZCBcc3R5cnNpZDcxNDQwMzkgRm9vdGVyIENoYXI7fXtcczQ0XHFqIFxsaTBccmkwXHNsMzYwXHNsbXVsdDFcd2lkY3RscGFyXHR4LTE0NDBcdHgtNzIwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9caWx2bDEyXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZ3JpZCANClxzYmFzZWRvbjAgXHNuZXh0NDQgXHNsaW5rNDUgXHNzZW1paGlkZGVuIFxzcHJpb3JpdHkwIFxzdHlyc2lkMTA2OTQ1MCBCb2R5IFRleHQ7fXtcKlxjczQ1IFxhZGRpdGl2ZSBcZnMyNCBcc2xpbms0NCBcc2xvY2tlZCBcc3NlbWloaWRkZW4gXHNwcmlvcml0eTAgXHN0eXJzaWQxMDY5NDUwIEJvZHkgVGV4dCBDaGFyO317XHM0NlxxaiBcZmk3MjBcbGk3MjBccmkwXHNsNDgwXHNsbXVsdDFcd2lkY3RscGFyDQpcdHgtMTQ0MFx0eC03MjBcdHgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW43MjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2dyaWQgXHNiYXNlZG9uMCBcc25leHQ0NiBcc2xpbms0NyBcc3NlbWloaWRkZW4gXHNwcmlvcml0eTAgXHN0eXJzaWQxMDY5NDUwIEJvZHkgVGV4dCBJbmRlbnQ7fXtcKlxjczQ3IA0KXGFkZGl0aXZlIFxmczI0IFxzbGluazQ2IFxzbG9ja2VkIFxzc2VtaWhpZGRlbiBcc3ByaW9yaXR5MCBcc3R5cnNpZDEwNjk0NTAgQm9keSBUZXh0IEluZGVudCBDaGFyO317XCpcY3M0OCBcYWRkaXRpdmUgXGZzMjRcY2YxIFxzbGluazIyIFxzbG9ja2VkIFxzdHlyc2lkMTA2OTQ1MCBIZWFkZXIgQ2hhcjt9e1wqXGNzNDkgXGFkZGl0aXZlIFxzdHJpa2VcZXhwbmQwXGV4cG5kdHcwXGNmNiBcc3ByaW9yaXR5MCBcc3R5cnNpZDEwNjk0NTAgDQpEZWx0YVZpZXcgRGVsZXRpb247fXtcczUwXHFsIFxsaTBccmkwXHNhMjQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0KXHNiYXNlZG9uMCBcc25leHQ1MCBcc3ByaW9yaXR5MCBcc3R5cnNpZDEwNjk0NTAgNC1MZXZlbCBMZWdhbDI7fXtcczUxXHFjIFxsaTBccmkwXHNhMjQwXGtlZXBuXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGxzMTdcb3V0bGluZWxldmVsMFxhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFiXGFmMVxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcYlxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxmNDFcaGljaFxhZjQxXGRiY2hcYWYxMVxjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24wIFxzbmV4dDAgXHNwcmlvcml0eTAgXHN0eXJzaWQxMDY5NDUwIFZFIE51bWJlcmVkIDEsTjE7fXsNClxzNTJccWogXGZpNzIwXGxpMFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxN1xpbHZsMVxvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYxXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxiXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGY0MVxoaWNoXGFmNDFcZGJjaFxhZjExXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MCBcc3ByaW9yaXR5MCBcc3R5cnNpZDEwNjk0NTAgVkUgTnVtYmVyZWQgMixOMjt9ew0KXHM1M1xxaiBcZmktNzIwXGxpMjE2MFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxN1xpbHZsMlxvdXRsaW5lbGV2ZWwyXGFkanVzdHJpZ2h0XHJpbjBcbGluMjE2MFxpdGFwMCBccnRsY2hcZmNzMSBcYWJcYWYxXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0KXHNiYXNlZG9uMCBcc25leHQwIFxzcHJpb3JpdHkwIFxzdHlyc2lkMTA2OTQ1MCBWRSBOdW1iZXJlZCAzLE4zO317XHM1NFxxaiBcZmkyMTYwXGxpMTQ0MFxyaTBcc2EyNDBcd2lkY3RscGFyXGpjbGlzdHRhYlx0eDE0NDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczE3XGlsdmwzXG91dGxpbmVsZXZlbDNcYWRqdXN0cmlnaHRccmluMFxsaW4xNDQwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjFcYWZzMjRcYWxhbmcxMDI1IA0KXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xsb2NoXGY0MVxoaWNoXGFmNDFcZGJjaFxhZjExXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0MCBcc3ByaW9yaXR5MCBcc3R5cnNpZDEwNjk0NTAgVkUgTnVtYmVyZWQgNCxONDt9ew0KXHM1NVxxaiBcZmktNTQwXGxpMjcwMFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxN1xpbHZsNFxvdXRsaW5lbGV2ZWw0XGFkanVzdHJpZ2h0XHJpbjBcbGluMjcwMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYxXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcbG9jaFxmMFxoaWNoXGFmMFxkYmNoXGFmMTFcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQwIFxzcHJpb3JpdHkwIFxzdHlyc2lkMTA2OTQ1MCBWRSBOdW1iZXJlZCA1LE41O317XHM1NlxxaiBcZmkzNjAwXGxpMTQ0MFxyaTBcc2EyNDBcd2lkY3RscGFyDQpcamNsaXN0dGFiXHR4MTQ0MFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGxzMTdcaWx2bDVcb3V0bGluZWxldmVsNVxhZGp1c3RyaWdodFxyaW4wXGxpbjE0NDBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMVxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyANClxzYmFzZWRvbjAgXHNuZXh0MCBcc3ByaW9yaXR5MCBcc3R5cnNpZDEwNjk0NTAgVkUgTnVtYmVyZWQgNixONjt9e1xzNTdccWogXGZpNDMyMFxsaTE0NDBccmkwXHNhMjQwXHdpZGN0bHBhclxqY2xpc3R0YWJcdHgxNDQwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxN1xpbHZsNlxvdXRsaW5lbGV2ZWw2XGFkanVzdHJpZ2h0XHJpbjBcbGluMTQ0MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYxXGFmczI0XGFsYW5nMTAyNSANClxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQwIFxzcHJpb3JpdHkwIFxzdHlyc2lkMTA2OTQ1MCBWRSBOdW1iZXJlZCA3LE43O317XHM1OFxxaiBcZmk1MDQwXGxpMTQ0MFxyaTBcc2EyNDBcd2lkY3RscGFyDQpcamNsaXN0dGFiXHR4MTQ0MFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGxzMTdcaWx2bDdcb3V0bGluZWxldmVsN1xhZGp1c3RyaWdodFxyaW4wXGxpbjE0NDBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMVxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyANClxzYmFzZWRvbjAgXHNuZXh0MCBcc3ByaW9yaXR5MCBcc3R5cnNpZDEwNjk0NTAgVkUgTnVtYmVyZWQgOCxOODt9e1xzNTlccWogXGZpNTc2MFxsaTE0NDBccmkwXHNhMjQwXHdpZGN0bHBhclxqY2xpc3R0YWJcdHgxNDQwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMxN1xpbHZsOFxvdXRsaW5lbGV2ZWw4XGFkanVzdHJpZ2h0XHJpbjBcbGluMTQ0MFxpdGFwMCBccnRsY2hcZmNzMSBcYWYxXGFmczI0XGFsYW5nMTAyNSANClxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgXHNiYXNlZG9uMCBcc25leHQwIFxzcHJpb3JpdHkwIFxzdHlyc2lkMTA2OTQ1MCBWRSBOdW1iZXJlZCA5LE45O317XHM2MFxxaiBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgDQpcYWYxXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0NjAgXHNwcmlvcml0eTAgXHN0eXJzaWQxMDY5NDUwIFZFIEJvZHkgVGV4dCBObyBTcGFjZSxCVE5TO317XCpcY3M2MSBcYWRkaXRpdmUgXHVsXGNmMiBcc3NlbWloaWRkZW4gXHNwcmlvcml0eTAgXHN0eXJzaWQzMDE4NzI0IEh5cGVybGluazt9ew0KXHM2MlxxaiBcZmk3MjBcbGk3MjBccmkwXHNsNDgwXHNsbXVsdDFcd2lkY3RscGFyXHRxY1x0eDQ2ODBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjcyMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0KXHNiYXNlZG9uMCBcc25leHQ2MiBcc3ByaW9yaXR5MCBcc3R5cnNpZDMwMTg3MjQgVGV4dDt9e1xzNjNccWwgXGxpMTE1MlxyaTBcc2w0ODBcc2xtdWx0MVxub3dpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4xMTUyXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI2XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgDQpcc2Jhc2Vkb24wIFxzbmV4dDYzIFxzcHJpb3JpdHkwIFxzdHlyc2lkMzAxODcyNCBPQVRUIFN1YlNlY3Rpb24gVGV4dDt9e1xzNjRccWwgXGZpLTE4MFxsaTU0MFxyaTBcbm93aWRjdGxwYXJcamNsaXN0dGFiXHR4NTQwXHdyYXBkZWZhdWx0XGZhYXV0b1xsczI0XHJpbjBcbGluNTQwXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjZcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGJcZnMyNlx1bFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0NjQgXHNwcmlvcml0eTAgXHN0eXJzaWQzMDE4NzI0IE9BVFQgU3R5bGUgMTt9e1xzNjVccWwgXGZpLTQzMlxsaTExNTJccmkwXHNhMTIwXG5vd2lkY3RscGFyXGpjbGlzdHRhYlx0eDExNTJcd3JhcGRlZmF1bHRcZmFhdXRvXGxzMjRcaWx2bDFccmluMFxsaW4xMTUyXGl0YXAwIFxydGxjaFxmY3MxIA0KXGFmMFxhZnMyNlxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNlxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0NjUgXHNwcmlvcml0eTAgXHN0eXJzaWQzMDE4NzI0IE9BVFQgU3R5bGUgMjt9e1xzNjZccWwgXGZpLTQzMlxsaTE1ODRccmkwXHNiMTIwXG5vd2lkY3RscGFyDQpcamNsaXN0dGFiXHR4MTgwMFx3cmFwZGVmYXVsdFxmYWF1dG9cbHMyNFxpbHZsMlxyaW4wXGxpbjE1ODRcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNlxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNlxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIFxzYmFzZWRvbjAgXHNuZXh0NjYgXHNwcmlvcml0eTAgXHN0eXJzaWQzMDE4NzI0IE9BVFQgU3R5bGUgMzt9e1wqXHRzNjdcdHNyb3dkXHRyYnJkcnQNClxicmRyc1xicmRydzEwXGJyZHJjZjEgXHRyYnJkcmxcYnJkcnNcYnJkcncxMFxicmRyY2YxIFx0cmJyZHJiXGJyZHJzXGJyZHJ3MTBcYnJkcmNmMSBcdHJicmRyclxicmRyc1xicmRydzEwXGJyZHJjZjEgXHRyYnJkcmhcYnJkcnNcYnJkcncxMFxicmRyY2YxIFx0cmJyZHJ2XGJyZHJzXGJyZHJ3MTBcYnJkcmNmMSANClx0cmZ0c1dpZHRoQjNcdHJwYWRkbDEwOFx0cnBhZGRyMTA4XHRycGFkZGZsM1x0cnBhZGRmdDNcdHJwYWRkZmIzXHRycGFkZGZyM1x0cmNicGF0MVx0cmNmcGF0MVx0YmxpbmQwXHRibGluZHR5cGUzXHRzY2VsbHdpZHRoZnRzMFx0c3ZlcnRhbHRcdHNicmRydFx0c2JyZHJsXHRzYnJkcmJcdHNicmRyclx0c2JyZHJkZ2xcdHNicmRyZGdyXHRzYnJkcmhcdHNicmRydiANClxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjBcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyBcc2Jhc2Vkb24xMSBcc25leHQ2NyBcc3ByaW9yaXR5NTkgXHN0eXJzaWQ4NjUzNTM4IFRhYmxlIEdyaWQ7fXtcKg0KXGNzNjggXGFkZGl0aXZlIFx1bFxjZjEyIFxzc2VtaWhpZGRlbiBcc3VuaGlkZXVzZWQgXHN0eXJzaWQxMDU1ODk0IEZvbGxvd2VkSHlwZXJsaW5rO317XCpcY3M2OSBcYWRkaXRpdmUgXGJcZnMyNCBcc2xpbmsyIFxzbG9ja2VkIFxzcHJpb3JpdHkwIFxzdHlyc2lkMTUyMDA2OSBIZWFkaW5nIDIgQ2hhcjt9e1wqXGNzNzAgXGFkZGl0aXZlIA0KXGYwXGZzMTZcdWxub25lXGV4cG5kMFxleHBuZHR3MFxjZjFcdXAwXGxhbmcxMDI0XGxhbmdmZTEwMjRcbm9zdXBlcnN1YlxhbmltdGV4dDBcc3RyaWtlZDBcbm9wcm9vZiBcc3ByaW9yaXR5MCBcc3R5cnNpZDE5Mjc1NjUgenptcFRyYWlsZXJJdGVtO319e1wqXGxpc3R0YWJsZXtcbGlzdFxsaXN0dGVtcGxhdGVpZDE4OTA4NDcyMjR7XGxpc3RsZXZlbFxsZXZlbG5mYzFcbGV2ZWxuZmNuMVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cyDQpcbGV2ZWxzdGFydGF0MVxsZXZlbG5vcmVzdGFydFxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGFBcnRpY2xlIFwnMDAuO317XGxldmVsbnVtYmVyc1wnMDk7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcYlxpMFxzdHJpa2UwXHNjYXBzMFxjYXBzMFx2MFxmNDJcZnMyNFx1bG5vbmVcZXhwbmQwXGV4cG5kdHcwXGNmMFx1cDBcbm9zdXBlcnN1YlxrZXJuaW5nMFxhbmltdGV4dDBcY2hhcnNjYWxleDEwMFxzdHJpa2VkMFxmYmlhczBcaHJlczBcY2hocmVzMCBcczFcZmkwXGxpMFxsaW4wIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxsZWdhbA0KXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwM1wnMDAuXCcwMTt9e1xsZXZlbG51bWJlcnNcJzAxXCcwMzt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpMFxzdHJpa2UwXHNjYXBzMFxjYXBzMFx2MFxmNDJcZnMyNFx1bG5vbmVcZXhwbmQwXGV4cG5kdHcwXGNmMFx1cDBcbm9zdXBlcnN1YlxrZXJuaW5nMFxhbmltdGV4dDBcY2hhcnNjYWxleDEwMFxzdHJpa2VkMFxmYmlhczBcaHJlczBcY2hocmVzMCBcczINClxmaTcyMFxsaTE4MFxsaW4xODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbGxlZ2FsXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwNVwnMDAuXCcwMS5cJzAyO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxiXGkwXHN0cmlrZTBcc2NhcHMwXGNhcHMwXHYwXGY0MlxmczI0XHVsbm9uZVxleHBuZDBcZXhwbmR0dzBcY2YwXHVwMFxub3N1cGVyc3ViXGtlcm5pbmcwXGFuaW10ZXh0MFxjaGFyc2NhbGV4MTAwXHN0cmlrZWQwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxzM1xmaS03MjBcbGk3MjBcbGluNzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDENClxsZXZlbGxlZ2FsXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwM1wnMDIuXCcwMzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwMzt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxiXGkwXHN0cmlrZTBcc2NhcHMwXGNhcHMwXHYwXGY0MlxmczI0XHVsbm9uZVxleHBuZDBcZXhwbmR0dzBcY2YwXHVwMFxub3N1cGVyc3ViXGtlcm5pbmcwXGFuaW10ZXh0MFxjaGFyc2NhbGV4MTAwXHN0cmlrZWQwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxzNFxmaS03MjBcbGkxNDQwXGxpbjE0NDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MQ0KXGxldmVsbGVnYWxcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA2XCcwMi5cJzAzLlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxiMFxpMFxzdHJpa2UwXHNjYXBzMFxjYXBzMFx2MFxmNDJcZnMyNFx1bG5vbmVcZXhwbmQwXGV4cG5kdHcwXGNmMFx1cDBcbm9zdXBlcnN1YlxrZXJuaW5nMFxhbmltdGV4dDBcY2hhcnNjYWxleDEwMFxzdHJpa2VkMFxmYmlhczBcaHJlczBcY2hocmVzMCBcczVcZmktNzIwXGxpMjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzI1NVxsZXZlbG5mY24yNTVcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MlxsZXZlbHN0YXJ0YXQxDQpcbGV2ZWxub3Jlc3RhcnRcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAwO317XGxldmVsbnVtYmVyczt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaTBcc3RyaWtlMFxzY2FwczBcY2FwczBcdjBcZjQyXGZzMjRcdWxub25lXGV4cG5kMFxleHBuZHR3MFxjZjBcdXAwXG5vc3VwZXJzdWJca2VybmluZzBcYW5pbXRleHQwXGNoYXJzY2FsZXgxMDBcc3RyaWtlZDBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM2DQpcZmktNDMyXGxpMTE1MlxsaW4xMTUyIH17XGxpc3RsZXZlbFxsZXZlbG5mYzI1NVxsZXZlbG5mY24yNTVcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MlxsZXZlbHN0YXJ0YXQxXGxldmVsbm9yZXN0YXJ0XGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMDt9e1xsZXZlbG51bWJlcnM7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcYjBcaTBcc3RyaWtlMFxzY2FwczBcY2FwczBcdjBcZjQyXGZzMjRcdWxub25lXGV4cG5kMFxleHBuZHR3MFxjZjBcdXAwXG5vc3VwZXJzdWJca2VybmluZzBcYW5pbXRleHQwXGNoYXJzY2FsZXgxMDBcc3RyaWtlZDBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM3XGZpLTI4OFxsaTEyOTZcbGluMTI5NiB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzJcbGV2ZWxzdGFydGF0MQ0KXGxldmVsbm9yZXN0YXJ0XGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMDt9e1xsZXZlbG51bWJlcnM7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGkwXHN0cmlrZTBcc2NhcHMwXGNhcHMwXHYwXGY0MlxmczI0XHVsbm9uZVxleHBuZDBcZXhwbmR0dzBcY2YwXHVwMFxub3N1cGVyc3ViXGtlcm5pbmcwXGFuaW10ZXh0MFxjaGFyc2NhbGV4MTAwXHN0cmlrZWQwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxzOA0KXGZpLTQzMlxsaTE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDguO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcYjBcaTBcc3RyaWtlMFxzY2FwczBcY2FwczBcdjBcZjQyXGZzMjRcdWxub25lXGV4cG5kMFxleHBuZHR3MFxjZjBcdXAwXG5vc3VwZXJzdWJca2VybmluZzBcYW5pbXRleHQwXGNoYXJzY2FsZXgxMDBcc3RyaWtlZDBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM5XGZpLTcyMFxsaTIxNjBcbGluMjE2MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQtNX17XGxpc3RcbGlzdHRlbXBsYXRlaWQtMTA5NzU1NDE3NlxsaXN0aHlicmlke1xsaXN0bGV2ZWwNClxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZXhwbmQwXGV4cG5kdHcwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkxMTcwXGpjbGlzdHRhYlx0eDExNzBcbGluMTE3MCB9e1xsaXN0bGV2ZWwNClxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGV4cG5kMFxleHBuZHR3MFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTQ0MFxqY2xpc3R0YWJcdHgxNDQwXGxpbjE0NDAgfXtcbGlzdGxldmVsDQpcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxleHBuZDBcZXhwbmR0dzBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbA0KXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xleHBuZDBcZXhwbmR0dzBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI4ODBcamNsaXN0dGFiXHR4Mjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbA0KXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZXhwbmQwXGV4cG5kdHcwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkzNjAwXGpjbGlzdHRhYlx0eDM2MDBcbGluMzYwMCB9e1xsaXN0bGV2ZWwNClxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGV4cG5kMFxleHBuZHR3MFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNDMyMFxqY2xpc3R0YWJcdHg0MzIwXGxpbjQzMjAgfXtcbGlzdGxldmVsDQpcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGV4cG5kMFxleHBuZHR3MFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTA0MFxqY2xpc3R0YWJcdHg1MDQwXGxpbjUwNDAgfXtcbGlzdGxldmVsDQpcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxleHBuZDBcZXhwbmR0dzBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTU3NjBcamNsaXN0dGFiXHR4NTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbA0KXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZXhwbmQwXGV4cG5kdHcwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk2NDgwXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bmFtZSANCjt9XGxpc3RpZDJ9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkNTA0MjU5MzI2XGxpc3RoeWJyaWR7XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQtNTQ0OTY4ODUyXCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fQ0KXGYzXGV4cG5kMFxleHBuZHR3MFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTgwMFxqY2xpc3R0YWJcdHgxODAwXGxpbjE4MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO30NClxmMlxleHBuZDBcZXhwbmR0dzBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO30NClxmMTBcZXhwbmQwXGV4cG5kdHcwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyMTYwXGpjbGlzdHRhYlx0eDIxNjBcbGluMjE2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9DQpcZjNcZXhwbmQwXGV4cG5kdHcwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyODgwXGpjbGlzdHRhYlx0eDI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fQ0KXGYyXGV4cG5kMFxleHBuZHR3MFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMzYwMFxqY2xpc3R0YWJcdHgzNjAwXGxpbjM2MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fQ0KXGYxMFxleHBuZDBcZXhwbmR0dzBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTQzMjBcamNsaXN0dGFiXHR4NDMyMFxsaW40MzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO30NClxmM1xleHBuZDBcZXhwbmR0dzBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTUwNDBcamNsaXN0dGFiXHR4NTA0MFxsaW41MDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9DQpcZjJcZXhwbmQwXGV4cG5kdHcwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1NzYwXGpjbGlzdHRhYlx0eDU3NjBcbGluNTc2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9DQpcZjEwXGV4cG5kMFxleHBuZHR3MFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNjQ4MFxqY2xpc3R0YWJcdHg2NDgwXGxpbjY0ODAgfXtcbGlzdG5hbWUgO31cbGlzdGlkN317XGxpc3RcbGlzdHRlbXBsYXRlaWQtMTg1MjE2Mjk2MHtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0M1xsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwMVwnMDA7fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTcyMFxqY2xpc3R0YWJcdHg3MjBcbGluNzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClwnMDNcJzAwLlwnMDE7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDM7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTcyMFxqY2xpc3R0YWJcdHg3MjBcbGluNzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClwnMDVcJzAwLlwnMDEuXCcwMjt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDU7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS03MjBcbGk3MjBcamNsaXN0dGFiXHR4NzIwXGxpbjcyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzA3XCcwMC5cJzAxLlwnMDIuXCcwMzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3O31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktNzIwXGxpNzIwXGpjbGlzdHRhYlx0eDcyMFxsaW43MjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDANCntcbGV2ZWx0ZXh0XCcwOVwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNDt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTEwODBcbGkxMDgwXGpjbGlzdHRhYlx0eDEwODBcbGluMTA4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxDQpcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzBiXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDU7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMTA4MFxsaTEwODBcamNsaXN0dGFiXHR4MTA4MFxsaW4xMDgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjANClxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGRcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGQ7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xNDQwXGxpMTQ0MFxqY2xpc3R0YWJcdHgxNDQwXGxpbjE0NDAgfXtcbGlzdGxldmVsDQpcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwZlwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDYuXCcwNzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkXCcwZjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgDQpcZmktMTQ0MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzExXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3LlwnMDg7fXtcbGV2ZWxudW1iZXJzDQpcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkXCcwZlwnMTE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xODAwXGxpMTgwMFxqY2xpc3R0YWJcdHgxODAwXGxpbjE4MDAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMTIxOTA4MzR9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTc0MDYyMjc1NFxsaXN0aHlicmlke1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wDQpcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkMTE2NjY4NjQxNlwnMDMoXCcwMCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE0NDBcbGkyODgwXGpjbGlzdHRhYlx0eDI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzANClxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI1MjBcamNsaXN0dGFiXHR4MjUyMFxsaW4yNTIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzINClxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpMzI0MFxqY2xpc3R0YWJcdHgzMjQwXGxpbjMyNDAgfQ0Ke1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkzOTYwDQpcamNsaXN0dGFiXHR4Mzk2MFxsaW4zOTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgDQpcZmktMzYwXGxpNDY4MFxqY2xpc3R0YWJcdHg0NjgwXGxpbjQ2ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGk1NDAwXGpjbGlzdHRhYlx0eDU0MDBcbGluNTQwMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTYxMjBcamNsaXN0dGFiXHR4NjEyMFxsaW42MTIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fQ0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNjg0MFxqY2xpc3R0YWJcdHg2ODQwXGxpbjY4NDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTUNClwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGk3NTYwXGpjbGlzdHRhYlx0eDc1NjBcbGluNzU2MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQyODYwODYxMjd9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTI3ODYyOTI5MlxsaXN0aHlicmlke1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0OFxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQtMTY4MTYzOTk4XCcwMS07fXtcbGV2ZWxudW1iZXJzO31cbG9jaFxhZjBcaGljaFxhZjBcZGJjaFxhZjBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTcyMFxsaW43MjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxDQpcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwDQpcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwDQp7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMzYwMFxsaW4zNjAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTMNClwnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk0MzIwXGxpbjQzMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OQ0KXCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTA0MFxsaW41MDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnMNCjt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1NzYwXGxpbjU3NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO30NClxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTY0ODBcbGluNjQ4MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQ0MDk3MzUyNzV9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkNzQwMTY1NDE0XGxpc3RoeWJyaWR7XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDQ4OTI5NzcyMlwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjg4MFxqY2xpc3R0YWJcdHgyODgwXGxpbjI4ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MDBcamNsaXN0dGFiXHR4MzYwMFxsaW4zNjAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk0MzIwXGpjbGlzdHRhYlx0eDQzMjBcbGluNDMyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1MDQwXGpjbGlzdHRhYlx0eDUwNDBcbGluNTA0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTc2MFxqY2xpc3R0YWJcdHg1NzYwXGxpbjU3NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTY0ODBcamNsaXN0dGFiXHR4NjQ4MFxsaW42NDgwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDQ0NzMxMzQxNH17XGxpc3RcbGlzdHRlbXBsYXRlaWQxNjc1MzM5MzhcbGlzdGh5YnJpZHtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wDQpcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk3MjBcamNsaXN0dGFiXHR4NzIwXGxpbjcyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTQ0MFxqY2xpc3R0YWJcdHgxNDQwXGxpbjE0NDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MA0KXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzANClxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI4ODBcamNsaXN0dGFiXHR4Mjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzANClxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkzNjAwXGpjbGlzdHRhYlx0eDM2MDBcbGluMzYwMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNDMyMFxqY2xpc3R0YWJcdHg0MzIwXGxpbjQzMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MA0KXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTA0MFxqY2xpc3R0YWJcdHg1MDQwXGxpbjUwNDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MA0KXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTU3NjBcamNsaXN0dGFiXHR4NTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzANClxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk2NDgwXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQ0NzA5MDMwMDd9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkMTY2NjQ1MDE1NA0KXGxpc3RoeWJyaWR7XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkOTMxMzI3ODYwXCcwMyhcJzAwKTt9e1xsZXZlbG51bWJlcnNcJzAyO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxsb2NoXGFmMFxoaWNoXGFmMFxkYmNoXGFmMFxocmVzMFxjaGhyZXMwIA0KXGZpLTcyMFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTgwMFxqY2xpc3R0YWJcdHgxODAwXGxpbjE4MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGkyNTIwXGpjbGlzdHRhYlx0eDI1MjBcbGluMjUyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO30NClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTMyNDBcamNsaXN0dGFiXHR4MzI0MFxsaW4zMjQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzDQpcJzAyXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMzk2MFxqY2xpc3R0YWJcdHgzOTYwXGxpbjM5NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcxNVwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGk0NjgwXGpjbGlzdHRhYlx0eDQ2ODBcbGluNDY4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzAzXCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTU0MDBcamNsaXN0dGFiXHR4NTQwMFxsaW41NDAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlDQpcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTNcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNjEyMFxqY2xpc3R0YWJcdHg2MTIwXGxpbjYxMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MQ0KXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcxNVwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGk2ODQwXGpjbGlzdHRhYlx0eDY4NDBcbGluNjg0MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQ2MTQ4Njc0MTN9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkNTQxMzM2OTUwDQp7XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDNcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwMC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTcyMFxqY2xpc3R0YWJcdHg3MjBcbGluNzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzANClxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0NFxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDRcJzAwLlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDFcJzAzO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS03MjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwDQpcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA2XCcwMC5cJzAxLlwnMDIuO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzANClxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDhcJzAwLlwnMDEuXCcwMi5cJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3O31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktNzIwXGxpMjg4MFxqY2xpc3R0YWJcdHgyODgwXGxpbjI4ODAgfXtcbGlzdGxldmVsDQpcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwYVwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDk7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xMDgwXGxpMzk2MA0KXGpjbGlzdHRhYlx0eDM5NjBcbGluMzk2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwY1wnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGI7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTEwODBcbGk0NjgwXGpjbGlzdHRhYlx0eDQ2ODBcbGluNDY4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwZVwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDYuO317XGxldmVsbnVtYmVycw0KXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZDt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE0NDBcbGk1NzYwXGpjbGlzdHRhYlx0eDU3NjBcbGluNTc2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzEwXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3Ljt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkXCcwZjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE0NDBcbGk2NDgwXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MA0KXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzEyXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3LlwnMDguO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGRcJzBmXCcxMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE4MDBcbGk3NTYwXGpjbGlzdHRhYlx0eDc1NjBcbGluNzU2MCB9DQp7XGxpc3RuYW1lIDt9XGxpc3RpZDYyMzMxNTA1N317XGxpc3RcbGlzdHRlbXBsYXRlaWQtMTc4OTY0OTU0MFxsaXN0aHlicmlke1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDAuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE4MDBcamNsaXN0dGFiXHR4MTgwMFxsaW4xODAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAxXCcwMTt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyNTIwXGpjbGlzdHRhYlx0eDI1MjBcbGluMjUyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJcJzAyLjt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGhyZXMwXGNoaHJlczAgXGZpLTE4MFxsaTMyNDBcamNsaXN0dGFiXHR4MzI0MFxsaW4zMjQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMzk2MFxqY2xpc3R0YWJcdHgzOTYwXGxpbjM5NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk0NjgwXGpjbGlzdHRhYlx0eDQ2ODBcbGluNDY4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGhyZXMwXGNoaHJlczAgXGZpLTE4MFxsaTU0MDBcamNsaXN0dGFiXHR4NTQwMFxsaW41NDAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNjEyMFxqY2xpc3R0YWJcdHg2MTIwXGxpbjYxMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk2ODQwXGpjbGlzdHRhYlx0eDY4NDBcbGluNjg0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGhyZXMwXGNoaHJlczAgXGZpLTE4MFxsaTc1NjBcamNsaXN0dGFiXHR4NzU2MFxsaW43NTYwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDYzMjQ4OTU5N317XGxpc3RcbGlzdHRlbXBsYXRlaWQ4NzI4MTc1MTBcbGlzdGh5YnJpZHtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyODgwXGxpbjI4ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MDBcbGluMzYwMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzDQpcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNDMyMFxsaW40MzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODkNClwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTUwNDBcbGluNTA0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzDQo7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9DQpcZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk2NDgwXGxpbjY0ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO30NClxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNzIwMFxsaW43MjAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCANClxmaS0zNjBcbGk3OTIwXGxpbjc5MjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIA0KXGZpLTM2MFxsaTg2NDBcbGluODY0MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQ2MzkxODg5NzZ9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTY1MDkxMjc0XGxpc3RoeWJyaWR7XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MDMNClwnMDJcJzAwLjt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk3MjBcamNsaXN0dGFiXHR4NzIwXGxpbjcyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwDQpcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmUNClxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyODgwXGpjbGlzdHRhYlx0eDI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxDQpcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MDBcamNsaXN0dGFiXHR4MzYwMFxsaW4zNjAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpNDMyMFxqY2xpc3R0YWJcdHg0MzIwXGxpbjQzMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMA0KXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1MDQwXGpjbGlzdHRhYlx0eDUwNDBcbGluNTA0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjQNClxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTU3NjBcamNsaXN0dGFiXHR4NTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbA0KXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwOC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpNjQ4MFxqY2xpc3R0YWJcdHg2NDgwXGxpbjY0ODAgDQp9e1xsaXN0bmFtZSA7fVxsaXN0aWQ3NDg0OTg0MjZ9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkMjAwMzQ3ODI2OHtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0OFxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDFcJzAwO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTcyMFxqY2xpc3R0YWJcdHg3MjBcbGluNzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAzXCcwMC5cJzAxO317XGxldmVsbnVtYmVyc1wnMDFcJzAzO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS03MjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwNVwnMDAuXCcwMS5cJzAyO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktNzIwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDdcJzAwLlwnMDEuXCcwMi5cJzAzO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDc7fVxydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTI4ODBcamNsaXN0dGFiXHR4Mjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA5XCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5O30NClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xMDgwXGxpMzk2MFxqY2xpc3R0YWJcdHgzOTYwXGxpbjM5NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwYlwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTEwODBcbGk0NjgwXGpjbGlzdHRhYlx0eDQ2ODBcbGluNDY4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxDQpcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzBkXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNjt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMTQ0MFxsaTU3NjBcamNsaXN0dGFiXHR4NTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMA0KXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGZcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2LlwnMDc7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGY7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xNDQwXGxpNjQ4MA0KXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcxMVwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDYuXCcwNy5cJzA4O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGRcJzBmXCcxMTt9XHJ0bGNoXGZjczEgDQpcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMTgwMFxsaTc1NjBcamNsaXN0dGFiXHR4NzU2MFxsaW43NTYwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDgzNjUwMzM0Nn17XGxpc3RcbGlzdHRlbXBsYXRlaWQxMjE3NDAyNjQyXGxpc3RoeWJyaWR7XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwDQp7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkzNjAwXGxpbjM2MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTQzMjBcbGluNDMyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzDQpcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTA0MFxsaW41MDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODkNClwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTU3NjBcbGluNTc2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzDQo7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNjQ4MFxsaW42NDgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9DQpcZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk3MjAwXGxpbjcyMDAgfXtcbGlzdG5hbWUgO31cbGlzdGlkOTYwODg5ODg5fXtcbGlzdFxsaXN0dGVtcGxhdGVpZC00NjgyNzI0NzZcbGlzdGh5YnJpZHtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQwXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkMTc2MTI3MTE2MFwnMDFcdS0zODc0ID87fXtcbGV2ZWxudW1iZXJzO31cY2YwXGxvY2hcYWYzXGhpY2hcYWYzXGRiY2hcYWYwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk3MjBcamNsaXN0dGFiXHR4MFxsaW43MjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwDQp7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyMTYwXGpjbGlzdHRhYlx0eDIxNjBcbGluMjE2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MA0Ke1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyODgwXGpjbGlzdHRhYlx0eDI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MA0Ke1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMzYwMFxqY2xpc3R0YWJcdHgzNjAwXGxpbjM2MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTQzMjBcamNsaXN0dGFiXHR4NDMyMFxsaW40MzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTUwNDBcamNsaXN0dGFiXHR4NTA0MFxsaW41MDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1NzYwXGpjbGlzdHRhYlx0eDU3NjBcbGluNTc2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNjQ4MFxqY2xpc3R0YWJcdHg2NDgwXGxpbjY0ODAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMTEwNTQxOTIwNn17XGxpc3RcbGlzdHRlbXBsYXRlaWQ5OTE5OTU3ODJcbGlzdGh5YnJpZHtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wDQpcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk3MjBcamNsaXN0dGFiXHR4NzIwXGxpbjcyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDENClxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxDQpcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjg4MFxqY2xpc3R0YWJcdHgyODgwXGxpbjI4ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxDQpcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MDBcamNsaXN0dGFiXHR4MzYwMFxsaW4zNjAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmUNClxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk0MzIwXGpjbGlzdHRhYlx0eDQzMjBcbGluNDMyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlDQpcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1MDQwXGpjbGlzdHRhYlx0eDUwNDBcbGluNTA0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlDQpcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTc2MFxqY2xpc3R0YWJcdHg1NzYwXGxpbjU3NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTY0ODBcamNsaXN0dGFiXHR4NjQ4MFxsaW42NDgwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDExODgyNTc5MjF9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTE4NjUwMzQ5OHtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwDQpcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQ4XGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMVwnMDA7fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTcyMFxqY2xpc3R0YWJcdHg3MjBcbGluNzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjANClxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0NVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDNcJzAwLlwnMDE7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDM7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS03MjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wDQpcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA1XCcwMC5cJzAxLlwnMDI7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1O31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktNzIwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMA0KXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwN1wnMDAuXCcwMS5cJzAyLlwnMDM7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwNzt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTI4ODBcamNsaXN0dGFiXHR4Mjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMA0KXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDlcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQ7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDk7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xMDgwXGxpMzk2MFxqY2xpc3R0YWJcdHgzOTYwXGxpbjM5NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMA0KXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwYlwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTEwODBcbGk0NjgwDQpcamNsaXN0dGFiXHR4NDY4MFxsaW40NjgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzBkXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNjt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xNDQwXGxpNTc2MFxqY2xpc3R0YWJcdHg1NzYwXGxpbjU3NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGZcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2LlwnMDc7fXtcbGV2ZWxudW1iZXJzDQpcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGJcJzBkXCcwZjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE0NDBcbGk2NDgwXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzExXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3LlwnMDg7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGZcJzExO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMTgwMFxsaTc1NjBcamNsaXN0dGFiXHR4NzU2MFxsaW43NTYwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDEyNTkxMDAwMzF9DQp7XGxpc3RcbGlzdHRlbXBsYXRlaWQtMTc3NTYyMDYwOFxsaXN0aHlicmlke1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkxNDQwDQpcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjE2MA0KXGpjbGlzdHRhYlx0eDIxNjBcbGluMjE2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI4ODANClxqY2xpc3R0YWJcdHgyODgwXGxpbjI4ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MDANClxqY2xpc3R0YWJcdHgzNjAwXGxpbjM2MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk0MzIwDQpcamNsaXN0dGFiXHR4NDMyMFxsaW40MzIwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTA0MA0KXGpjbGlzdHRhYlx0eDUwNDBcbGluNTA0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTc2MA0KXGpjbGlzdHRhYlx0eDU3NjBcbGluNTc2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTY0ODANClxqY2xpc3R0YWJcdHg2NDgwXGxpbjY0ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk3MjAwDQpcamNsaXN0dGFiXHR4NzIwMFxsaW43MjAwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDEzMzQ0NTI4NDF9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTE1MDIzMjk0MDZ7XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAxXCcwMDt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MFxqY2xpc3R0YWJcdHgzNjBcbGluMzYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAzXCcwMC5cJzAxO317XGxldmVsbnVtYmVyc1wnMDFcJzAzO31ccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTEwODBcamNsaXN0dGFiXHR4MTA4MFxsaW4xMDgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA1XCcwMC5cJzAxLlwnMDI7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1O31ccnRsY2hcZmNzMSANClxhZjAgXGx0cmNoXGZjczAgXGJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA3XCcwMC5cJzAxLlwnMDIuXCcwMzt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3O30NClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTI4ODBcamNsaXN0dGFiXHR4Mjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzA5XCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0O317XGxldmVsbnVtYmVycw0KXCcwMVwnMDNcJzA1XCcwN1wnMDk7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTEwODBcbGkzOTYwXGpjbGlzdHRhYlx0eDM5NjBcbGluMzk2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzBiXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDU7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xMDgwXGxpNDY4MFxqY2xpc3R0YWJcdHg0NjgwXGxpbjQ2ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MQ0KXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwZFwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDY7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZDt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMTQ0MFxsaTU3NjBcamNsaXN0dGFiXHR4NTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMA0KXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGZcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2LlwnMDc7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGY7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE0NDBcbGk2NDgwDQpcamNsaXN0dGFiXHR4NjQ4MFxsaW42NDgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzExXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3LlwnMDg7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZFwnMGZcJzExO31ccnRsY2hcZmNzMSANClxhZjAgXGx0cmNoXGZjczAgXGJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE4MDBcbGk3NTYwXGpjbGlzdHRhYlx0eDc1NjBcbGluNzU2MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxMzM4MjY5MjcwfXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0xODQyNDQ4MDYwXGxpc3RoeWJyaWR7XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTANClxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQtNDI5MTk1MzQ4XCcwMlwnMDAuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkxMDgwXGpjbGlzdHRhYlx0eDEwODBcbGluMTA4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxDQpcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMA0KXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyODgwXGpjbGlzdHRhYlx0eDI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjQNClxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MDBcamNsaXN0dGFiXHR4MzYwMFxsaW4zNjAwIH17XGxpc3RsZXZlbA0KXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpNDMyMFxqY2xpc3R0YWJcdHg0MzIwXGxpbjQzMjAgDQp9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1MDQwDQpcamNsaXN0dGFiXHR4NTA0MFxsaW41MDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgDQpcZmktMzYwXGxpNTc2MFxqY2xpc3R0YWJcdHg1NzYwXGxpbjU3NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwOC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGk2NDgwXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxMzUxMDMzOTkzfXtcbGlzdFxsaXN0dGVtcGxhdGVpZDk2MjIzMzY0e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzAzXCcwMC4wO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS03MjBcbGk3MjBcamNsaXN0dGFiXHR4NzIwXGxpbjcyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzAzXCcwMC5cJzAxO317XGxldmVsbnVtYmVyc1wnMDFcJzAzO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktNzIwXGxpMTQ0MFxqY2xpc3R0YWJcdHgxNDQwXGxpbjE0NDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwNVwnMDAuXCcwMS5cJzAyO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTcyMFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClwnMDdcJzAwLlwnMDEuXCcwMi5cJzAzO317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDc7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS03MjBcbGkyODgwXGpjbGlzdHRhYlx0eDI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MA0Ke1xsZXZlbHRleHRcJzA5XCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5O31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMTA4MFxsaTM5NjBcamNsaXN0dGFiXHR4Mzk2MFxsaW4zOTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDENClxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMGJcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNTt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDVcJzA3XCcwOVwnMGI7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xMDgwXGxpNDY4MFxqY2xpc3R0YWJcdHg0NjgwXGxpbjQ2ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMA0KXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwZFwnMDAuXCcwMS5cJzAyLlwnMDMuXCcwNC5cJzA1LlwnMDY7fXtcbGV2ZWxudW1iZXJzXCcwMVwnMDNcJzA1XCcwN1wnMDlcJzBiXCcwZDt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE0NDBcbGk1NzYwXGpjbGlzdHRhYlx0eDU3NjBcbGluNTc2MCB9e1xsaXN0bGV2ZWwNClxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzBmXCcwMC5cJzAxLlwnMDIuXCcwMy5cJzA0LlwnMDUuXCcwNi5cJzA3O317XGxldmVsbnVtYmVyc1wnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGRcJzBmO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCANClxmaS0xNDQwXGxpNjQ4MFxqY2xpc3R0YWJcdHg2NDgwXGxpbjY0ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMTFcJzAwLlwnMDEuXCcwMi5cJzAzLlwnMDQuXCcwNS5cJzA2LlwnMDcuXCcwODt9e1xsZXZlbG51bWJlcnMNClwnMDFcJzAzXCcwNVwnMDdcJzA5XCcwYlwnMGRcJzBmXCcxMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTE4MDBcbGk3NTYwXGpjbGlzdHRhYlx0eDc1NjBcbGluNzU2MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxNDI4NDMwNzMyfXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0xNDU5NjA2MzJcbGlzdGh5YnJpZHtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMA0KXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQzXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDE4ODA2NjQ5OTRcJzAzKFwnMDApO317XGxldmVsbnVtYmVyc1wnMDI7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkxMDgwXGpjbGlzdHRhYlx0eDEwODBcbGluMTA4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzANClxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTNcJzAyXCcwMS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTgwMFxqY2xpc3R0YWJcdHgxODAwXGxpbjE4MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyDQpcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcxNVwnMDJcJzAyLjt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGkyNTIwXGpjbGlzdHRhYlx0eDI1MjBcbGluMjUyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwDQpcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzAzXCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTMyNDBcamNsaXN0dGFiXHR4MzI0MFxsaW4zMjQwIH0NCntcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTNcJzAyXCcwNC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMzk2MA0KXGpjbGlzdHRhYlx0eDM5NjBcbGluMzk2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcxNVwnMDJcJzA1Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIA0KXGZpLTE4MFxsaTQ2ODBcamNsaXN0dGFiXHR4NDY4MFxsaW40NjgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzAzXCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTQwMFxqY2xpc3R0YWJcdHg1NDAwXGxpbjU0MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTNcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk2MTIwXGpjbGlzdHRhYlx0eDYxMjBcbGluNjEyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcxNVwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO30NClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTE4MFxsaTY4NDBcamNsaXN0dGFiXHR4Njg0MFxsaW42ODQwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDE0OTY5MjAyMDl9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkMjA4MzIzNDE4XGxpc3RoeWJyaWR7XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MFxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZC0xMDUxMTQ5MDEwXCcwMS07fXtcbGV2ZWxudW1iZXJzO31cbG9jaFxhZjBcaGljaFxhZjBcZGJjaFxhZjBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTcyMFxsaW43MjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMzYwMFxsaW4zNjAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTMNClwnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk0MzIwXGxpbjQzMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OQ0KXCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTA0MFxsaW41MDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnMNCjt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1NzYwXGxpbjU3NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO30NClxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTY0ODBcbGluNjQ4MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxNTY1NjAzOTM4fXtcbGlzdFxsaXN0dGVtcGxhdGVpZC01ODg5ODYyODJ7XGxpc3RsZXZlbFxsZXZlbG5mYzFcbGV2ZWxuZmNuMVxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cyXGxldmVsc3RhcnRhdDFcbGV2ZWxub3Jlc3RhcnRcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClwnMDlBUlRJQ0xFIFwnMDA7fXtcbGV2ZWxudW1iZXJzXCcwOTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM1MVxmaTBcbGk0MzIwXGxpbjQzMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbGxlZ2FsXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzAzXCcwMC5cJzAxO317XGxldmVsbnVtYmVyc1wnMDFcJzAzO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxzNTJcZmk3MjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsbGVnYWxcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwDQp7XGxldmVsdGV4dFwnMDVcJzAwLlwnMDEuXCcwMjt9e1xsZXZlbG51bWJlcnNcJzAxXCcwM1wnMDU7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxzNTNcZmkxNDQwXGxpMTQ0MFxqY2xpc3R0YWJcdHgzNjAwXGxpbjE0NDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMyhcJzAzKTt9e1xsZXZlbG51bWJlcnNcJzAyO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcczU0XGZpMjE2MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwDQp7XGxldmVsdGV4dFwnMDMoXCcwNCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM1NVxmaTI4ODBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM1NlxmaTM2MDBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzAyXCcwNi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM1N1xmaTQzMjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyXGxldmVsbmZjbjJcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0DQpcJzAyXCcwNy47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM1OFxmaTUwNDBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyNTVcbGV2ZWxuZmNuMjU1XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwMVwnMDg7fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM1OVxmaTU3NjBcbGkxNDQwXGpjbGlzdHRhYlx0eDE0NDBcbGluMTQ0MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxNjU1MDU5NDU5fXtcbGlzdFxsaXN0dGVtcGxhdGVpZDIxMjIzNDgyMjhcbGlzdGh5YnJpZHtcbGlzdGxldmVsXGxldmVsbmZjM1xsZXZlbG5mY24zXGxldmVsamMwXGxldmVsamNuMA0KXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQ4XGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZC0xODg3MDA2NTAyXCcwMlwnMDAuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk3MjBcamNsaXN0dGFiXHR4NzIwXGxpbjcyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzANClxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzINClxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfQ0Ke1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyODgwDQpcamNsaXN0dGFiXHR4Mjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgDQpcZmktMzYwXGxpMzYwMFxqY2xpc3R0YWJcdHgzNjAwXGxpbjM2MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGk0MzIwXGpjbGlzdHRhYlx0eDQzMjBcbGluNDMyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTUwNDBcamNsaXN0dGFiXHR4NTA0MFxsaW41MDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzRcbGV2ZWxuZmNuNFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fQ0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTc2MFxqY2xpc3R0YWJcdHg1NzYwXGxpbjU3NjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTUNClwnMDJcJzA4Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGk2NDgwXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxNjY1NjIyMjI4fXtcbGlzdFxsaXN0dGVtcGxhdGVpZDIxMTMzMjc1MjBcbGlzdGh5YnJpZHtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MA0KXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2ODlcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk3MjBcamNsaXN0dGFiXHR4NzIwXGxpbjcyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDENClxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTQ0MFxqY2xpc3R0YWJcdHgxNDQwXGxpbjE0NDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZQ0KXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTIxNjBcamNsaXN0dGFiXHR4MjE2MFxsaW4yMTYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmUNClxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY4OVwnMDFcdS0zOTEzID87fXtcbGV2ZWxudW1iZXJzO31cZjNcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI4ODBcamNsaXN0dGFiXHR4Mjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmUNClxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkzNjAwXGpjbGlzdHRhYlx0eDM2MDBcbGluMzYwMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwDQpcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTNcJzAxXHUtMzkyOSA/O317XGxldmVsbnVtYmVyczt9XGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNDMyMFxqY2xpc3R0YWJcdHg0MzIwXGxpbjQzMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNTA0MFxqY2xpc3R0YWJcdHg1MDQwXGxpbjUwNDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMA0KXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkxXCcwMW87fXtcbGV2ZWxudW1iZXJzO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTU3NjBcamNsaXN0dGFiXHR4NTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwDQp7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk2NDgwXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxNzk4OTA4NDIxfXtcbGlzdFxsaXN0dGVtcGxhdGVpZC0xMTY1NzAyMzkwXGxpc3RoeWJyaWR7XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwDQpcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNzIwXGxpbjcyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDENClxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg2OTFcJzAxbzt9e1xsZXZlbG51bWJlcnM7fVxmMlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTANClxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5M1wnMDFcdS0zOTI5ID87fXtcbGV2ZWxudW1iZXJzO31cZjEwXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDANCntcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5XCcwMVx1LTM5MTMgPzt9e1xsZXZlbG51bWJlcnM7fVxmM1xmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzIzXGxldmVsbmZjbjIzXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHQNClxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVyczt9XGYyXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkzNjAwXGxpbjM2MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5Mw0KXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fVxmMTBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTQzMjBcbGluNDMyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4Njg5DQpcJzAxXHUtMzkxMyA/O317XGxldmVsbnVtYmVyczt9XGYzXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1MDQwXGxpbjUwNDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMjNcbGV2ZWxuZmNuMjNcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODY5MVwnMDFvO317XGxldmVsbnVtYmVycw0KO31cZjJcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTU3NjBcbGluNTc2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMyM1xsZXZlbG5mY24yM1xsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NjkzXCcwMVx1LTM5MjkgPzt9e1xsZXZlbG51bWJlcnM7fQ0KXGYxMFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpNjQ4MFxsaW42NDgwIH17XGxpc3RuYW1lIDt9XGxpc3RpZDE4MzQwMjUwNjF9e1xsaXN0XGxpc3R0ZW1wbGF0ZWlkLTU1MzAzNDIwe1xsaXN0bGV2ZWxcbGV2ZWxuZmMxXGxldmVsbmZjbjFcbGV2ZWxqYzJcbGV2ZWxqY24yXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDAuO317XGxldmVsbnVtYmVycw0KXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZmJpYXMwXGhyZXMwXGNoaHJlczAgXHM2NFxmaS0xODBcbGk1NDBcamNsaXN0dGFiXHR4NTQwXGxpbjU0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsbm9yZXN0YXJ0XGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMVwnMDE7fXtcbGV2ZWxudW1iZXJzDQpcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcczY1XGZpLTQzMlxsaTExNTJcamNsaXN0dGFiXHR4MTE1MlxsaW4xMTUyIH17XGxpc3RsZXZlbFxsZXZlbG5mYzBcbGV2ZWxuZmNuMFxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAzXCcwMS5cJzAyO317XGxldmVsbnVtYmVyc1wnMDFcJzAzO30NClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxzNjZcZmktNDMyXGxpMTU4NFxqY2xpc3R0YWJcdHgxODAwXGxpbjE1ODQgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDMoXCcwMyk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XHJ0bGNoXGZjczEgDQpcYWYwIFxsdHJjaFxmY3MwIFxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTQ0MFxqY2xpc3R0YWJcdHgxNDQwXGxpbjE0NDAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDMoXCcwNCk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMTgwMFxqY2xpc3R0YWJcdHgxODAwXGxpbjE4MDAgfXtcbGlzdGxldmVsXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDMoXCcwNSk7fXtcbGV2ZWxudW1iZXJzXCcwMjt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyNTIwXGpjbGlzdHRhYlx0eDI1MjBcbGluMjUyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcZmJpYXMwXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTI4ODBcamNsaXN0dGFiXHR4Mjg4MFxsaW4yODgwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwOC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMzI0MFxqY2xpc3R0YWJcdHgzMjQwXGxpbjMyNDAgfXtcbGlzdG5hbWUgO31cbGlzdGlkMTk0MzAzMjAzNX17XGxpc3RcbGlzdHRlbXBsYXRlaWQtMTI5MTc5NzczNntcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwMlwnMDAuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZiaWFzMFxocmVzMFxjaGhyZXMwIFxmaS0xMDA4XGxpMTA4MFxqY2xpc3R0YWJcdHgxMDgwXGxpbjEwODAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzDQpcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0xODBcbGkyMTYwXGpjbGlzdHRhYlx0eDIxNjBcbGluMjE2MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDMuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMzYwXGxpMjg4MFxqY2xpc3R0YWJcdHgyODgwXGxpbjI4ODAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJcJzA0Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MDBcamNsaXN0dGFiXHR4MzYwMFxsaW4zNjAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCANClxmaS0xODBcbGk0MzIwXGpjbGlzdHRhYlx0eDQzMjBcbGluNDMyMCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmMwXGxldmVsbmZjbjBcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XCcwMlwnMDYuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTUwNDANClxqY2xpc3R0YWJcdHg1MDQwXGxpbjUwNDAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFwnMDJcJzA3Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1NzYwDQpcamNsaXN0dGFiXHR4NTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcJzAyXCcwOC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpNjQ4MA0KXGpjbGlzdHRhYlx0eDY0ODBcbGluNjQ4MCB9e1xsaXN0bmFtZSA7fVxsaXN0aWQxOTgyNjg0OTk4fXtcbGlzdFxsaXN0dGVtcGxhdGVpZDIwNzkzMzY3MzJcbGlzdGh5YnJpZHtcbGlzdGxldmVsXGxldmVsbmZjM1xsZXZlbG5mY24zXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0NlxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQtODM5MjExOTM2DQpcJzAyXCcwMC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxmYmlhczBcaHJlczBcY2hocmVzMCBcZmktNzIwXGxpMTA4MFxqY2xpc3R0YWJcdHgxMDgwXGxpbjEwODAgfXtcbGlzdGxldmVsXGxldmVsbmZjNFxsZXZlbG5mY240XGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dA0KXGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDEuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTE0NDBcamNsaXN0dGFiXHR4MTQ0MFxsaW4xNDQwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwDQpcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwMi47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpMjE2MFxqY2xpc3R0YWJcdHgyMTYwXGxpbjIxNjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMFxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmUNClxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzAzLjt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGkyODgwXGpjbGlzdHRhYlx0eDI4ODBcbGluMjg4MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjRcbGV2ZWxqYzBcbGV2ZWxqY24wXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxDQpcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDQuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTM2MDBcamNsaXN0dGFiXHR4MzYwMFxsaW4zNjAwIH17XGxpc3RsZXZlbFxsZXZlbG5mYzJcbGV2ZWxuZmNuMlxsZXZlbGpjMlxsZXZlbGpjbjJcbGV2ZWxmb2xsb3cwDQpcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwNS47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpNDMyMFxqY2xpc3R0YWJcdHg0MzIwXGxpbjQzMjAgfXtcbGlzdGxldmVsXGxldmVsbmZjMFxsZXZlbG5mY24wXGxldmVsamMwXGxldmVsamNuMA0KXGxldmVsZm9sbG93MFxsZXZlbHN0YXJ0YXQxXGx2bHRlbnRhdGl2ZVxsZXZlbHNwYWNlMFxsZXZlbGluZGVudDB7XGxldmVsdGV4dFxsZXZlbHRlbXBsYXRlaWQ2NzY5ODcwM1wnMDJcJzA2Ljt9e1xsZXZlbG51bWJlcnNcJzAxO31ccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxocmVzMFxjaGhyZXMwIFxmaS0zNjBcbGk1MDQwXGpjbGlzdHRhYlx0eDUwNDBcbGluNTA0MCB9e1xsaXN0bGV2ZWxcbGV2ZWxuZmM0XGxldmVsbmZjbjQNClxsZXZlbGpjMFxsZXZlbGpjbjBcbGV2ZWxmb2xsb3cwXGxldmVsc3RhcnRhdDFcbHZsdGVudGF0aXZlXGxldmVsc3BhY2UwXGxldmVsaW5kZW50MHtcbGV2ZWx0ZXh0XGxldmVsdGVtcGxhdGVpZDY3Njk4NzEzXCcwMlwnMDcuO317XGxldmVsbnVtYmVyc1wnMDE7fVxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGhyZXMwXGNoaHJlczAgXGZpLTM2MFxsaTU3NjBcamNsaXN0dGFiXHR4NTc2MFxsaW41NzYwIH17XGxpc3RsZXZlbA0KXGxldmVsbmZjMlxsZXZlbG5mY24yXGxldmVsamMyXGxldmVsamNuMlxsZXZlbGZvbGxvdzBcbGV2ZWxzdGFydGF0MVxsdmx0ZW50YXRpdmVcbGV2ZWxzcGFjZTBcbGV2ZWxpbmRlbnQwe1xsZXZlbHRleHRcbGV2ZWx0ZW1wbGF0ZWlkNjc2OTg3MTVcJzAyXCcwOC47fXtcbGV2ZWxudW1iZXJzXCcwMTt9XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaHJlczBcY2hocmVzMCBcZmktMTgwXGxpNjQ4MFxqY2xpc3R0YWJcdHg2NDgwXGxpbjY0ODAgDQp9e1xsaXN0bmFtZSA7fVxsaXN0aWQyMDU1MTU1OTk0fX17XCpcbGlzdG92ZXJyaWRldGFibGV7XGxpc3RvdmVycmlkZVxsaXN0aWQ2MTQ4Njc0MTNcbGlzdG92ZXJyaWRlY291bnQwXGxzMX17XGxpc3RvdmVycmlkZVxsaXN0aWQ3XGxpc3RvdmVycmlkZWNvdW50MFxsczJ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkNDQ3MzEzNDE0XGxpc3RvdmVycmlkZWNvdW50MFxsczN9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMlxsaXN0b3ZlcnJpZGVjb3VudDBcbHM0fQ0Ke1xsaXN0b3ZlcnJpZGVcbGlzdGlkNDcwOTAzMDA3XGxpc3RvdmVycmlkZWNvdW50MFxsczV9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTM1MTAzMzk5M1xsaXN0b3ZlcnJpZGVjb3VudDBcbHM2fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDE5ODI2ODQ5OThcbGlzdG92ZXJyaWRlY291bnQwXGxzN317XGxpc3RvdmVycmlkZVxsaXN0aWQyMDU1MTU1OTk0XGxpc3RvdmVycmlkZWNvdW50MFxsczh9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTc5ODkwODQyMQ0KXGxpc3RvdmVycmlkZWNvdW50MFxsczl9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTEwNTQxOTIwNlxsaXN0b3ZlcnJpZGVjb3VudDBcbHMxMH17XGxpc3RvdmVycmlkZVxsaXN0aWQ3NDg0OTg0MjZcbGlzdG92ZXJyaWRlY291bnQwXGxzMTF9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkLTVcbGlzdG92ZXJyaWRlY291bnQwXGxzMTJ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTMzNDQ1Mjg0MVxsaXN0b3ZlcnJpZGVjb3VudDBcbHMxM30NCntcbGlzdG92ZXJyaWRlXGxpc3RpZDk2MDg4OTg4OVxsaXN0b3ZlcnJpZGVjb3VudDBcbHMxNH17XGxpc3RvdmVycmlkZVxsaXN0aWQxNjY1NjIyMjI4XGxpc3RvdmVycmlkZWNvdW50MFxsczE1fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDEzMzgyNjkyNzBcbGlzdG92ZXJyaWRlY291bnQwXGxzMTZ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMTY1NTA1OTQ1OVxsaXN0b3ZlcnJpZGVjb3VudDBcbHMxN317XGxpc3RvdmVycmlkZVxsaXN0aWQxMjE5MDgzNA0KXGxpc3RvdmVycmlkZWNvdW50MFxsczE4fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDYyMzMxNTA1N1xsaXN0b3ZlcnJpZGVjb3VudDBcbHMxOX17XGxpc3RvdmVycmlkZVxsaXN0aWQxNDk2OTIwMjA5XGxpc3RvdmVycmlkZWNvdW50MFxsczIwfXtcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50OXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdA0KXGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbA0KXGxpc3RvdmVycmlkZXN0YXJ0YXRcbGV2ZWxzdGFydGF0MX17XGxmb2xldmVsXGxpc3RvdmVycmlkZXN0YXJ0YXRcbGV2ZWxzdGFydGF0MX1cbHMyMX17XGxpc3RvdmVycmlkZVxsaXN0aWQxNDI4NDMwNzMyXGxpc3RvdmVycmlkZWNvdW50MFxsczIyfXtcbGlzdG92ZXJyaWRlXGxpc3RpZDYzMjQ4OTU5N1xsaXN0b3ZlcnJpZGVjb3VudDBcbHMyM317XGxpc3RvdmVycmlkZVxsaXN0aWQxOTQzMDMyMDM1XGxpc3RvdmVycmlkZWNvdW50MFxsczI0fQ0Ke1xsaXN0b3ZlcnJpZGVcbGlzdGlkODM2NTAzMzQ2XGxpc3RvdmVycmlkZWNvdW50MFxsczI1fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDEyNTkxMDAwMzFcbGlzdG92ZXJyaWRlY291bnQwXGxzMjZ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkMjg2MDg2MTI3XGxpc3RvdmVycmlkZWNvdW50MFxsczI3fXtcbGlzdG92ZXJyaWRlXGxpc3RpZDExODgyNTc5MjFcbGlzdG92ZXJyaWRlY291bnQwXGxzMjh9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkLTUNClxsaXN0b3ZlcnJpZGVjb3VudDBcbHMyOX17XGxpc3RvdmVycmlkZVxsaXN0aWQtNVxsaXN0b3ZlcnJpZGVjb3VudDBcbHMzMH17XGxpc3RvdmVycmlkZVxsaXN0aWQxODM0MDI1MDYxXGxpc3RvdmVycmlkZWNvdW50MFxsczMxfXtcbGlzdG92ZXJyaWRlXGxpc3RpZDYzOTE4ODk3NlxsaXN0b3ZlcnJpZGVjb3VudDBcbHMzMn17XGxpc3RvdmVycmlkZVxsaXN0aWQxNTY1NjAzOTM4XGxpc3RvdmVycmlkZWNvdW50MFxsczMzfQ0Ke1xsaXN0b3ZlcnJpZGVcbGlzdGlkNDA5NzM1Mjc1XGxpc3RvdmVycmlkZWNvdW50MFxsczM0fXtcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50MFxsczM1fXtcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50MFxsczM2fXtcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50OXtcbGZvbGV2ZWxcbGlzdG92ZXJyaWRlc3RhcnRhdFxsZXZlbHN0YXJ0YXQxfXtcbGZvbGV2ZWwNClxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0XGxldmVsc3RhcnRhdDF9e1xsZm9sZXZlbFxsaXN0b3ZlcnJpZGVzdGFydGF0DQpcbGV2ZWxzdGFydGF0MX17XGxmb2xldmVsXGxpc3RvdmVycmlkZXN0YXJ0YXRcbGV2ZWxzdGFydGF0MX17XGxmb2xldmVsXGxpc3RvdmVycmlkZXN0YXJ0YXRcbGV2ZWxzdGFydGF0MX1cbHMzN317XGxpc3RvdmVycmlkZVxsaXN0aWQtNVxsaXN0b3ZlcnJpZGVjb3VudDBcbHMzOH17XGxpc3RvdmVycmlkZVxsaXN0aWQtNVxsaXN0b3ZlcnJpZGVjb3VudDBcbHMzOX17XGxpc3RvdmVycmlkZVxsaXN0aWQtNVxsaXN0b3ZlcnJpZGVjb3VudDBcbHM0MH0NCntcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50MFxsczQxfXtcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50MFxsczQyfXtcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50MFxsczQzfXtcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50MFxsczQ0fXtcbGlzdG92ZXJyaWRlXGxpc3RpZC01XGxpc3RvdmVycmlkZWNvdW50MFxsczQ1fQ0Ke1xsaXN0b3ZlcnJpZGVcbGlzdGlkLTVcbGlzdG92ZXJyaWRlY291bnQwXGxzNDZ9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkLTVcbGlzdG92ZXJyaWRlY291bnQwXGxzNDd9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkLTVcbGlzdG92ZXJyaWRlY291bnQwXGxzNDh9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkLTVcbGlzdG92ZXJyaWRlY291bnQwXGxzNDl9e1xsaXN0b3ZlcnJpZGVcbGlzdGlkLTVcbGlzdG92ZXJyaWRlY291bnQwXGxzNTB9fQ0Ke1wqXHJzaWR0YmwgXHJzaWQxMDA0OVxyc2lkMTQ1MzVccnNpZDE1MDk0XHJzaWQyMjIwNlxyc2lkMzA2NTNccnNpZDc2MDIyXHJzaWQ4ODYxNFxyc2lkMTMzMDk2XHJzaWQxNDkwMzdccnNpZDE1MjcyMlxyc2lkMTU2NzIxXHJzaWQyMjE0ODRccnNpZDIyODA4OFxyc2lkMjYyMjg4XHJzaWQzMjgyOThccnNpZDMzNTg2NVxyc2lkMzM2NzM1XHJzaWQzMzk0MDhccnNpZDM0MjI1OVxyc2lkMzUxOTA4XHJzaWQzNTg4ODNccnNpZDM5MzUyMA0KXHJzaWQzOTQwMTdccnNpZDQwNTY0M1xyc2lkNDE0NjY1XHJzaWQ0NzE5NzBccnNpZDQ3NTUxNlxyc2lkNDg5MTQzXHJzaWQ1MjQ3NTRccnNpZDUzMzA3Nlxyc2lkNTQ4OTY1XHJzaWQ1NTU0NzlccnNpZDYxNjUyNlxyc2lkNjU4Nzg5XHJzaWQ2NjEyNzBccnNpZDY3MzA4MVxyc2lkNjc4NzQ0XHJzaWQ2ODQ2NDBccnNpZDY4NTI1NFxyc2lkNzIxNzg0XHJzaWQ3NDMxNzRccnNpZDc0NTI2NFxyc2lkNzQ4NzQ1XHJzaWQ4MDk4NjdccnNpZDg1NjA0Mw0KXHJzaWQ4NzI5NzJccnNpZDg3NjA0NFxyc2lkODg0MjcyXHJzaWQ5Mjg0NzRccnNpZDk0MTYxOFxyc2lkOTQyNTAxXHJzaWQ5ODQ4NTFccnNpZDk5MTE1OFxyc2lkMTAwMDIzMVxyc2lkMTAwMDk3Nlxyc2lkMTA1NTg5NFxyc2lkMTA2OTQ1MFxyc2lkMTA3MzIwNlxyc2lkMTExNTg3MFxyc2lkMTEyMjk3OFxyc2lkMTE4MjAyM1xyc2lkMTE4ODg5N1xyc2lkMTIwNDAxMVxyc2lkMTI1NDYxMFxyc2lkMTMxMzM1Mlxyc2lkMTMyNDEzNg0KXHJzaWQxMzM5MTQzXHJzaWQxMzQyNDIyXHJzaWQxMzk1MzQzXHJzaWQxMzk5Nzc5XHJzaWQxNDA4MzQ4XHJzaWQxNDUxNzk2XHJzaWQxNDUzMjcyXHJzaWQxNDU4OTY3XHJzaWQxNDczOTk4XHJzaWQxNTE0MTMwXHJzaWQxNTE2MTIxXHJzaWQxNTIwMDY5XHJzaWQxNTIwMzM1XHJzaWQxNTIzOTQyXHJzaWQxNTI4MDY4XHJzaWQxNTc1MzY2XHJzaWQxNjUzNTIxXHJzaWQxNjY1OTA0XHJzaWQxNzA1MzU1XHJzaWQxNzA2NDQ3XHJzaWQxNzE5ODgyDQpccnNpZDE3MjAzNDBccnNpZDE3MjY5MjBccnNpZDE3Mjg4NjhccnNpZDE3ODQ4NzNccnNpZDE4Mzc3ODhccnNpZDE4NDUyNjlccnNpZDE4NTIyNTBccnNpZDE4NTkxMzFccnNpZDE5MDg4MzhccnNpZDE5MTQwMDFccnNpZDE5MjI2NjlccnNpZDE5MjY5MTNccnNpZDE5Mjc1NjVccnNpZDE5MzEzMzVccnNpZDE5MzI1MjVccnNpZDE5NzUwNDlccnNpZDE5Nzg1ODBccnNpZDE5ODkyMjhccnNpZDIwNDY4MzVccnNpZDIwNDY5OTJccnNpZDIwNDcyODUNClxyc2lkMjEwMDMzMlxyc2lkMjExNzUyNFxyc2lkMjEyMTMyOFxyc2lkMjEyNTI1M1xyc2lkMjEyNjE0MFxyc2lkMjE2NjQ2MFxyc2lkMjE2NzU0Nlxyc2lkMjE3MDg5NFxyc2lkMjE5MzU0N1xyc2lkMjIzNTYyOVxyc2lkMjIzNjM3M1xyc2lkMjI1NTY2Nlxyc2lkMjI5NDM2OFxyc2lkMjMwOTcxMlxyc2lkMjMxNTM3NFxyc2lkMjM5MTQ2Mlxyc2lkMjQzODk4Mlxyc2lkMjQ1MTg3OVxyc2lkMjQ5NjczOVxyc2lkMjQ5NzQwNVxyc2lkMjUwMjExMQ0KXHJzaWQyNTE2NDI2XHJzaWQyNTY0MDU4XHJzaWQyNjQ2NTY3XHJzaWQyNjkyMTA3XHJzaWQyNzEwMTUwXHJzaWQyNzE0MDA0XHJzaWQyNzE5NDEyXHJzaWQyNzE5NjA4XHJzaWQyNzU1NzYzXHJzaWQyNzYzNjg1XHJzaWQyNzcxMDcwXHJzaWQyNzc4MjM1XHJzaWQyNzg0ODQ0XHJzaWQyOTA0NTc2XHJzaWQyOTUwODI0XHJzaWQyOTYwOTk3XHJzaWQyOTcwMDYwXHJzaWQyOTc3MzYwXHJzaWQzMDE1MjQ0XHJzaWQzMDE3MzM2XHJzaWQzMDE4NzI0DQpccnNpZDMwMjI2NDNccnNpZDMwMjI3NTFccnNpZDMwMzIwNTRccnNpZDMwMzI3NjFccnNpZDMwOTk5MDBccnNpZDMxNTU2NzFccnNpZDMxNTYxNjdccnNpZDMxNTg1MjZccnNpZDMxNjI3MTlccnNpZDMxNjI5NDZccnNpZDMxNjM3NjBccnNpZDMxNjczODdccnNpZDMxNzQ4NzVccnNpZDMxNzc1OTJccnNpZDMyMTQzOTNccnNpZDMyMjExODFccnNpZDMyMzA5NjNccnNpZDMyMzQ3OTZccnNpZDMyODk2NzdccnNpZDMzNDk1MTFccnNpZDMzNTQ4NTANClxyc2lkMzM2MzkxNFxyc2lkMzQzODMyNVxyc2lkMzQ4MDY4Mlxyc2lkMzQ5NjE5OVxyc2lkMzUwMjgzM1xyc2lkMzUwNTM1MVxyc2lkMzU0MTQ1OVxyc2lkMzU0NDYyM1xyc2lkMzU2NDQzMFxyc2lkMzU2NTA0NFxyc2lkMzYxMjgxMVxyc2lkMzYyODAzN1xyc2lkMzY4MTAzN1xyc2lkMzY4NDU1NFxyc2lkMzY5MDE2OFxyc2lkMzcwMDkyOFxyc2lkMzczNjk3NFxyc2lkMzczNzMxOFxyc2lkMzc2MDcyMFxyc2lkMzgxNjI4OFxyc2lkMzgxNjk5Mg0KXHJzaWQzODY3NzAwXHJzaWQzODczMTQ4XHJzaWQ0MDAxMjM5XHJzaWQ0MDA1MjIxXHJzaWQ0MDI4MzA1XHJzaWQ0MTMzMDI3XHJzaWQ0MTM3MjgwXHJzaWQ0MTQyNzIyXHJzaWQ0MTQ4Mzg2XHJzaWQ0MjAwMTY0XHJzaWQ0MjAxMDkwXHJzaWQ0MjAxNTYwXHJzaWQ0MjE2MTk3XHJzaWQ0MjYyNzYxXHJzaWQ0Mjc2NTA5XHJzaWQ0Mjg1NjcwXHJzaWQ0MzM0ODMzXHJzaWQ0MzUzMjU5XHJzaWQ0MzUzNzQyXHJzaWQ0NDc3ODQ0XHJzaWQ0NTI0MDk4DQpccnNpZDQ1NDY3OTZccnNpZDQ1NTEzNjJccnNpZDQ1ODg1MzJccnNpZDQ1OTA3MjBccnNpZDQ1OTY2NTFccnNpZDQ2MDAyMDlccnNpZDQ2MDQ2MzlccnNpZDQ2MTI3NzRccnNpZDQ2NTMyNjhccnNpZDQ2NzY5MjdccnNpZDQ2Nzk1MzhccnNpZDQ3MjA2MjZccnNpZDQ3MjgwMjJccnNpZDQ3MzM4MTZccnNpZDQ3NDY2MjlccnNpZDQ3ODc3NDFccnNpZDQ4MDk2MTRccnNpZDQ4MTA3MDlccnNpZDQ4MTMwMDdccnNpZDQ4NjA4MzJccnNpZDQ4NjI3NzMNClxyc2lkNDkxOTgxM1xyc2lkNDkzOTc5NVxyc2lkNDk4NzY5OFxyc2lkNDk5MzQ5OFxyc2lkNDk5NTI5NFxyc2lkNTAxMjgxOVxyc2lkNTA0OTIzOVxyc2lkNTA1NDc1NFxyc2lkNTA2NDU4NVxyc2lkNTA2NzAwMVxyc2lkNTA3MDM4N1xyc2lkNTExNDUzM1xyc2lkNTExODA1MFxyc2lkNTEyNDE2M1xyc2lkNTEyODAxMlxyc2lkNTEzNzUxM1xyc2lkNTE3OTIwNVxyc2lkNTE4NzM0MVxyc2lkNTIwNTg2M1xyc2lkNTI1OTk4NVxyc2lkNTMxMTMyMw0KXHJzaWQ1MzE3MDYwXHJzaWQ1Mzc4MDYwXHJzaWQ1Mzg2NDc2XHJzaWQ1MzkxOTk1XHJzaWQ1MzkzODU2XHJzaWQ1NDAwNzUzXHJzaWQ1NDAxODQxXHJzaWQ1NDAyODM3XHJzaWQ1NDA0MDEwXHJzaWQ1NDA2MjIxXHJzaWQ1NDU4MDEzXHJzaWQ1NDY2MDkyXHJzaWQ1NTExMDAwXHJzaWQ1NTE5MzMzXHJzaWQ1NTk4OTI5XHJzaWQ1NjAzMDA3XHJzaWQ1NjQ0MjYwXHJzaWQ1NjQ0NTA5XHJzaWQ1NjUxMDAyXHJzaWQ1NzEyODI0XHJzaWQ1NzE3ODY4DQpccnNpZDU3NzMwMjBccnNpZDU4NDMwMjZccnNpZDU5MDY0NDhccnNpZDU5MTEwOTNccnNpZDU5MjYyMzlccnNpZDU5NjQ1MDRccnNpZDU5ODExMTJccnNpZDU5ODE0MzZccnNpZDYwMzcwODBccnNpZDYwNDAzMDNccnNpZDYwNDA3NjFccnNpZDYwNDUzNTJccnNpZDYxMDI2MzVccnNpZDYxMTU2OTJccnNpZDYxNjM2MjdccnNpZDYxNjU1MTVccnNpZDYxNjY5MjhccnNpZDYxNzA0NzVccnNpZDYxNzkwNTVccnNpZDYxOTE2NDJccnNpZDYyNDQzMjUNClxyc2lkNjI0ODczMFxyc2lkNjI1MTU2Mlxyc2lkNjI1MjY1OFxyc2lkNjMwNDE3MFxyc2lkNjMxODg5MVxyc2lkNjM2MTk3NFxyc2lkNjM2Mzg4MFxyc2lkNjM4MDU1NFxyc2lkNjM4ODk5MFxyc2lkNjQzNzA5Mlxyc2lkNjQ5ODM3OVxyc2lkNjUwMDYzMVxyc2lkNjUwNTUwOVxyc2lkNjU2MjIzN1xyc2lkNjU2NDUwMlxyc2lkNjYyOTcwNFxyc2lkNjcwNDkzOFxyc2lkNjc1MDg0NVxyc2lkNjc1MjgxNFxyc2lkNjc2Mjc5NFxyc2lkNjc3NTczOQ0KXHJzaWQ2Nzc4MDY1XHJzaWQ2ODI0MDU3XHJzaWQ2ODI0OTY4XHJzaWQ2ODMyNTY5XHJzaWQ2ODM2NTEyXHJzaWQ2ODgxNjk2XHJzaWQ2ODg3NTQ4XHJzaWQ2OTExOTA2XHJzaWQ2OTQ5MjM4XHJzaWQ2OTc0Mjg1XHJzaWQ2OTc0Nzk0XHJzaWQ2OTc3MzI1XHJzaWQ2OTc3OTUyXHJzaWQ3MDEzOTQwXHJzaWQ3MDMwNTMzXHJzaWQ3MDQyNzk3XHJzaWQ3MDgzMzA1XHJzaWQ3MDg4MzA2XHJzaWQ3MDk4NzM0XHJzaWQ3MTQ0MDM5XHJzaWQ3MTQ2MjM5DQpccnNpZDcxNDY5OTZccnNpZDcxNTQ3OTlccnNpZDcxNzI3MDRccnNpZDcyMTA1NTNccnNpZDcyMTYyMzdccnNpZDcyMTY4MjBccnNpZDcyMjY4NDhccnNpZDcyMzY1NjJccnNpZDcyNzgzMDBccnNpZDcyODE1ODBccnNpZDcyODgxNjRccnNpZDcyOTU4MDRccnNpZDczNjE4NTJccnNpZDczNjkyNjRccnNpZDc0MTcyNjJccnNpZDc0MTc2MDJccnNpZDc0MjQwODhccnNpZDc0Mjg4NzNccnNpZDc0NzUxNDNccnNpZDc0ODI3MDZccnNpZDc0OTc3NDQNClxyc2lkNzU0MzM5MVxyc2lkNzU2NzE3MVxyc2lkNzYwNjAyMlxyc2lkNzYwNjA0NVxyc2lkNzYyNzQ2MFxyc2lkNzYyODA2MFxyc2lkNzY3NTcyNFxyc2lkNzY4MTA3Mlxyc2lkNzY4NTE2OVxyc2lkNzY4Njc5MFxyc2lkNzY5NDQwMlxyc2lkNzY5NDQ4Nlxyc2lkNzY5NTc4MVxyc2lkNzY5NzAzOVxyc2lkNzY5NzY4MFxyc2lkNzY5OTI2OFxyc2lkNzc1NDE0M1xyc2lkNzc5OTU5OFxyc2lkNzgwMTc4Mlxyc2lkNzgwMjUwM1xyc2lkNzgwNDUzNA0KXHJzaWQ3ODA4ODQ5XHJzaWQ3ODEwNzA4XHJzaWQ3ODE1MDkzXHJzaWQ3ODIxMzExXHJzaWQ3ODI0NDMwXHJzaWQ3ODc0MTk5XHJzaWQ3ODc4MTYyXHJzaWQ3ODk0MjM5XHJzaWQ3OTM0MTMyXHJzaWQ3OTM1OTAxXHJzaWQ3OTQyNDgxXHJzaWQ3OTQ5NDY3XHJzaWQ3OTU0MDg4XHJzaWQ3OTU3ODkzXHJzaWQ3OTU4ODEwXHJzaWQ3OTk3MzMwXHJzaWQ4MDAxMjIxXHJzaWQ4MDEzMDE1XHJzaWQ4MDE4NjI2XHJzaWQ4MDI1Nzc4XHJzaWQ4MDgwNDgxDQpccnNpZDgwODQwMjZccnNpZDgwODcyNDRccnNpZDgxMzY1NDRccnNpZDgxOTU1NDRccnNpZDgxOTU2OTFccnNpZDgyMjA0MjFccnNpZDgyMjEwMThccnNpZDgyNTg4NDFccnNpZDgyNjMyMzdccnNpZDgyNzU1NzFccnNpZDgyODA4NjJccnNpZDgyODA5OTlccnNpZDgzNDAwNTFccnNpZDg0MTI4MTVccnNpZDg1MjA5MzNccnNpZDg1MjQxODZccnNpZDg1MzA0MTdccnNpZDg1MzExNjRccnNpZDg1NDQwMTZccnNpZDg1NDcwMzFccnNpZDg1NTAzMzgNClxyc2lkODU1MjM1Mlxyc2lkODU5MDM0Mlxyc2lkODU5Njc5OVxyc2lkODYwNzY5MVxyc2lkODY1MzUzOFxyc2lkODY3MDU1NFxyc2lkODcyMDA1Nlxyc2lkODgwOTY4N1xyc2lkODk4MTI2OFxyc2lkODk5NDk3N1xyc2lkOTA0NDY2M1xyc2lkOTA2Mjk3MVxyc2lkOTA3NTEwOFxyc2lkOTEyODU5MFxyc2lkOTE3NzgwOVxyc2lkOTE4MzMwOVxyc2lkOTE5MTkzMlxyc2lkOTE5NTI3M1xyc2lkOTI1MjExOVxyc2lkOTI2ODIyNFxyc2lkOTI3MjA1MA0KXHJzaWQ5MzA3MDk2XHJzaWQ5MzA5NzI4XHJzaWQ5MzExMjg5XHJzaWQ5MzM3MjE1XHJzaWQ5NDM3Mzg3XHJzaWQ5NDQwNjk4XHJzaWQ5NDQ4NjE3XHJzaWQ5NDUwODY4XHJzaWQ5NDU2MzgyXHJzaWQ5NDU5MTQ1XHJzaWQ5NDYzMzQ4XHJzaWQ5NDY2NzgwXHJzaWQ5NTA1MDU1XHJzaWQ5NTEyMDA3XHJzaWQ5NTIwMDM1XHJzaWQ5NTg2MTcyXHJzaWQ5NTg2MzUxXHJzaWQ5NTg4MTE0XHJzaWQ5NTkxOTAwXHJzaWQ5NTk2MzM4XHJzaWQ5NTk3NDIyDQpccnNpZDk2NDQ3NDRccnNpZDk2NDY0NjRccnNpZDk2NTUwMTRccnNpZDk2NjE3NjVccnNpZDk3MTkyODZccnNpZDk3MjAwOTdccnNpZDk3MjQ3MDBccnNpZDk3MjYwMzFccnNpZDk3NzIyMTFccnNpZDk3NzUxODRccnNpZDk3OTU4NjRccnNpZDk3OTYwMTlccnNpZDk4NTQwMDNccnNpZDk4NTU0NzNccnNpZDk4NTg5NzZccnNpZDk5MDM4MzJccnNpZDk5Njk1MjNccnNpZDk5ODg1ODdccnNpZDEwMDMxNTQyXHJzaWQxMDAzNDk1MFxyc2lkMTAwNTIxNzcNClxyc2lkMTAwNTY3NTdccnNpZDEwMDk4OTExXHJzaWQxMDEwMzUzNlxyc2lkMTAxMDM5NTBccnNpZDEwMTA3Mzc5XHJzaWQxMDEwNzk5NVxyc2lkMTAxMjA1MTJccnNpZDEwMTY3OTAxXHJzaWQxMDE4MDI1OFxyc2lkMTAxODU2ODFccnNpZDEwMTg2MjM4XHJzaWQxMDIzMDQ3NFxyc2lkMTAyMzM4OTVccnNpZDEwMjM2MzI4XHJzaWQxMDI0OTc0M1xyc2lkMTAyNTMyNDdccnNpZDEwMjkxNzk2XHJzaWQxMDI5Mjk1OFxyc2lkMTAyOTQzNDQNClxyc2lkMTAzMTQwODdccnNpZDEwMzU3ODU0XHJzaWQxMDM2NTE4M1xyc2lkMTAzNjU5NzdccnNpZDEwMzcyMDU0XHJzaWQxMDM4MjAyNlxyc2lkMTA0MjMxMzdccnNpZDEwNDIzODkyXHJzaWQxMDQyOTAyMFxyc2lkMTA0NDM0MjFccnNpZDEwNDk5MDgxXHJzaWQxMDUwOTQ1NVxyc2lkMTA1NTU5NjVccnNpZDEwNTY1ODI2XHJzaWQxMDU3NzU2Mlxyc2lkMTA1NzkxOTBccnNpZDEwNTgzOTI4XHJzaWQxMDYyMTQ0NVxyc2lkMTA3MDk1NTQNClxyc2lkMTA3NTA1OTVccnNpZDEwNzU0NTY5XHJzaWQxMDc2MDE2Nlxyc2lkMTA3NzI1NjBccnNpZDEwNzczNDYzXHJzaWQxMDc3NjE5Mlxyc2lkMTA3ODAxMTNccnNpZDEwODI5NDc4XHJzaWQxMDg0MTA0OFxyc2lkMTA4ODEyMDZccnNpZDEwODg5MTM1XHJzaWQxMDg5MjkyMVxyc2lkMTA4OTgxNjVccnNpZDEwODk5ODg3XHJzaWQxMDk2MzM0NFxyc2lkMTEwMTY1NjNccnNpZDExMDE5NjYwXHJzaWQxMTAyNDk0NVxyc2lkMTEwNDE5ODYNClxyc2lkMTEwNzgyNjhccnNpZDExMDgzMTA1XHJzaWQxMTA5MjA2M1xyc2lkMTEwOTM2NjFccnNpZDExMTAwODExXHJzaWQxMTEwMTM2OVxyc2lkMTExMDYzNTFccnNpZDExMTQ2NTc3XHJzaWQxMTE0Njc0M1xyc2lkMTExNDg2MzdccnNpZDExMTcwMzc4XHJzaWQxMTIxMDUzMVxyc2lkMTEyMTA1OTRccnNpZDExMjE2NDY3XHJzaWQxMTIyNTg0MFxyc2lkMTEyMzcwNDNccnNpZDExMjg0NzcwXHJzaWQxMTI4NTY2N1xyc2lkMTEyOTAyMzENClxyc2lkMTEyOTQ5NDhccnNpZDExMzAyMzYxXHJzaWQxMTMwMzc1M1xyc2lkMTEzNjA4NzBccnNpZDExNDEyNTYwXHJzaWQxMTQyOTEwM1xyc2lkMTE0Nzg4ODZccnNpZDExNDg0ODIyXHJzaWQxMTQ5NjI1NVxyc2lkMTE0OTk5NDRccnNpZDExNTM1OTU1XHJzaWQxMTUzNzk2MVxyc2lkMTE1NDgzMjJccnNpZDExNTQ4NzI4XHJzaWQxMTYwMDg3NVxyc2lkMTE2MTExMjVccnNpZDExNjIxODAxXHJzaWQxMTY4Mjk1M1xyc2lkMTE2ODQ4NzANClxyc2lkMTE2OTgwMTRccnNpZDExNzQwODQ4XHJzaWQxMTc0NDA0OVxyc2lkMTE3NjA0ODJccnNpZDExODA1NTgwXHJzaWQxMTgxOTg3Mlxyc2lkMTE4ODcyOTNccnNpZDExOTMxMzI5XHJzaWQxMTk0MjM1OFxyc2lkMTE5NDQzNTJccnNpZDExOTk3ODA0XHJzaWQxMjA2ODMyN1xyc2lkMTIwNzEyNzhccnNpZDEyMDg1MDk4XHJzaWQxMjA4NzE3OFxyc2lkMTIxMjcxMzNccnNpZDEyMTI4NzYzXHJzaWQxMjE5ODUyOVxyc2lkMTIyMTQyMTYNClxyc2lkMTIyNTY4OTlccnNpZDEyMjU3MTMyXHJzaWQxMjI1OTk5MVxyc2lkMTIyNjUxMjJccnNpZDEyMjY3MzM2XHJzaWQxMjI3MzI0MVxyc2lkMTIyODY1NzVccnNpZDEyMzI2NjIxXHJzaWQxMjMyNzY3OFxyc2lkMTIzMjg5NDBccnNpZDEyMzM2ODgwXHJzaWQxMjM4Njg1Nlxyc2lkMTIzOTgwMTZccnNpZDEyNDE4ODY5XHJzaWQxMjQ3MTc5NVxyc2lkMTI1MTgwNjNccnNpZDEyNTIxNDcxXHJzaWQxMjUyODA1M1xyc2lkMTI1MzU3MTQNClxyc2lkMTI1Mzg2ODVccnNpZDEyNTQ0NjcyXHJzaWQxMjYwOTI5MVxyc2lkMTI2NTc5MDRccnNpZDEyNjYzOTMyXHJzaWQxMjcyMTg3MFxyc2lkMTI3MjUyNzJccnNpZDEyNzI1NDMwXHJzaWQxMjc4MzU3Nlxyc2lkMTI3ODYyMDNccnNpZDEyODAwMTM2XHJzaWQxMjgwMjcxMFxyc2lkMTI4NTMwNTdccnNpZDEyODcwNTQyXHJzaWQxMjkzMzc5Mlxyc2lkMTI5ODMxNzhccnNpZDEzMDAwMzg3XHJzaWQxMzAwMjI0OFxyc2lkMTMxMzU1NzUNClxyc2lkMTMxNzgxNzZccnNpZDEzMTg5MjM5XHJzaWQxMzE5OTI2Mlxyc2lkMTMxOTk5MTZccnNpZDEzMjAyMzE1XHJzaWQxMzI1MDQ0N1xyc2lkMTMyNTIzMjVccnNpZDEzMjYwMjcyXHJzaWQxMzMwODYzOVxyc2lkMTMzMjA0OTFccnNpZDEzMzIzODgyXHJzaWQxMzMyOTIxNlxyc2lkMTMzNzc5NDhccnNpZDEzMzc5ODY3XHJzaWQxMzM4ODM3MFxyc2lkMTMzOTE1ODZccnNpZDEzMzkzNDI3XHJzaWQxMzQzNTAxOFxyc2lkMTM0NjA1MjUNClxyc2lkMTM0NjQ2NzVccnNpZDEzNDY1Mjg1XHJzaWQxMzUwMjA3M1xyc2lkMTM1MDIxOTNccnNpZDEzNTA1OTI4XHJzaWQxMzUwNjU4MFxyc2lkMTM1MTMzNzlccnNpZDEzNTE2MDA0XHJzaWQxMzUyNTM1NFxyc2lkMTM1MzIwMzRccnNpZDEzNjUyNzAyXHJzaWQxMzcxNzAwNFxyc2lkMTM3MTc4NjBccnNpZDEzNzI0NDEzXHJzaWQxMzcyNjM1MFxyc2lkMTM3NjY0MjRccnNpZDEzNzY3ODI3XHJzaWQxMzc3NDUyM1xyc2lkMTM3Nzg1MzINClxyc2lkMTM4MzA3MjZccnNpZDEzODMxOTA1XHJzaWQxMzg0NDQ3NVxyc2lkMTM4NjA0MzFccnNpZDEzOTA2NjA1XHJzaWQxMzkxNTM4OFxyc2lkMTM5NjAwMDJccnNpZDEzOTY2NzE0XHJzaWQxNDAyNjkxMFxyc2lkMTQwNDM4NDRccnNpZDE0MTA0MTc4XHJzaWQxNDEwNDQ4OVxyc2lkMTQxMDg5NThccnNpZDE0MTE5MDA1XHJzaWQxNDExOTM2OFxyc2lkMTQxNjUwNzZccnNpZDE0MTY4MjE1XHJzaWQxNDE3MjUyMFxyc2lkMTQxNzQyNjQNClxyc2lkMTQxNzY1MTRccnNpZDE0MTgwMzk4XHJzaWQxNDIyMzM5NVxyc2lkMTQyNDI5NTZccnNpZDE0MjQ0NjU3XHJzaWQxNDI5NjE4M1xyc2lkMTQzMTIxMzZccnNpZDE0MzE3Mjg2XHJzaWQxNDM2NDA5NVxyc2lkMTQzNjg4NzVccnNpZDE0NDIyOTI2XHJzaWQxNDQzNzUwM1xyc2lkMTQ0Mzg2ODZccnNpZDE0NTAwMjQ1XHJzaWQxNDUwNTUyOVxyc2lkMTQ1MDc4NzJccnNpZDE0NTE1MjI5XHJzaWQxNDUxNTc0NFxyc2lkMTQ2MjI3NDQNClxyc2lkMTQ2MjkyOTNccnNpZDE0NjM3ODg3XHJzaWQxNDYzODE4NVxyc2lkMTQ2ODk1ODBccnNpZDE0NzUyNzM0XHJzaWQxNDc3NjIwNlxyc2lkMTQ3NzczNDFccnNpZDE0ODExMjY1XHJzaWQxNDgyMTcxMlxyc2lkMTQ4MjI1MzZccnNpZDE0ODM4OTAzXHJzaWQxNDg0MjIxNlxyc2lkMTQ4Nzc5NDZccnNpZDE0OTA5MTQxXHJzaWQxNDk0NTU2NVxyc2lkMTQ5NDY5OTBccnNpZDE0OTU3NDEzXHJzaWQxNDk1NzkwMVxyc2lkMTQ5NzM3ODQNClxyc2lkMTUwMjA3ODZccnNpZDE1MDMzNjgxXHJzaWQxNTAzNTc0N1xyc2lkMTUxMDUwNTRccnNpZDE1MTY2NDQyXHJzaWQxNTIwNzU0NFxyc2lkMTUyMTA0MDhccnNpZDE1MjEyNzcxXHJzaWQxNTIyMDM5NVxyc2lkMTUyMjA4NjRccnNpZDE1MjI0ODQ2XHJzaWQxNTIyOTA1N1xyc2lkMTUyODM2NTdccnNpZDE1Mjg3Nzk2XHJzaWQxNTM0MjEyMFxyc2lkMTUzNDgyODhccnNpZDE1MzU0MTY5XHJzaWQxNTM2NTQ4Mlxyc2lkMTU0MTU2NTkNClxyc2lkMTU0MTY5OTVccnNpZDE1NDMyNTk1XHJzaWQxNTQ2NzEyN1xyc2lkMTU0NjgzMjZccnNpZDE1NDk3MDUzXHJzaWQxNTU0NzYxOFxyc2lkMTU1NTM5MTVccnNpZDE1NjAxMzk0XHJzaWQxNTYwNTY3Mlxyc2lkMTU2MTkwNjRccnNpZDE1NjIxMjM3XHJzaWQxNTYyMjkxOVxyc2lkMTU2MzAwODZccnNpZDE1NjY2NjcwXHJzaWQxNTY3MTE3MFxyc2lkMTU2Nzc4MjlccnNpZDE1NjgzODQwXHJzaWQxNTY4OTY4OVxyc2lkMTU2OTQyMTUNClxyc2lkMTU3Mjk0MDdccnNpZDE1NzUzNzQ4XHJzaWQxNTc5NTc5OFxyc2lkMTU4MTQ5ODJccnNpZDE1ODE2NjEyXHJzaWQxNTg2MDU0N1xyc2lkMTU4NjI0MTdccnNpZDE1ODc1OTI2XHJzaWQxNTg4NjA3MVxyc2lkMTU5MzY2NjJccnNpZDE1OTQwNjk5XHJzaWQxNTk1MjEzMVxyc2lkMTU5NTM1MjRccnNpZDE1OTU3OTM4XHJzaWQxNTk5MzUyM1xyc2lkMTYwMDU5OTNccnNpZDE2MDEwMTgyXHJzaWQxNjAxMTIzNVxyc2lkMTYwMTE2ODkNClxyc2lkMTYwMTUxODdccnNpZDE2MDE1OTQwXHJzaWQxNjAxNjc3Nlxyc2lkMTYwMTc4MzdccnNpZDE2MDIxNjY2XHJzaWQxNjAyMzQyOVxyc2lkMTYwNjI4ODZccnNpZDE2MDc3MDMyXHJzaWQxNjA4Njg1Mlxyc2lkMTYxMjU3MjdccnNpZDE2MTI2NjY0XHJzaWQxNjEzMTYxM1xyc2lkMTYxMzI4OTBccnNpZDE2MTQ2NjkwXHJzaWQxNjE4OTk2Nlxyc2lkMTYxOTQyNDhccnNpZDE2MjAyNzM5XHJzaWQxNjIxMzA3N1xyc2lkMTYyMTcyNDgNClxyc2lkMTYyMTkyNzdccnNpZDE2MjU5NzQxXHJzaWQxNjI3NzM0OVxyc2lkMTYyNzk1NDhccnNpZDE2MjgzMTM1XHJzaWQxNjMyNDY1MFxyc2lkMTYzMjgwNTZccnNpZDE2MzI4OTM2XHJzaWQxNjMzMjI2OVxyc2lkMTYzMzQ2NzBccnNpZDE2MzQ5NTI3XHJzaWQxNjM5MTc0MFxyc2lkMTY0MTAzODdccnNpZDE2NDEwODkzXHJzaWQxNjQxNTk1MFxyc2lkMTY0NTQ1NzBccnNpZDE2NDcxMjYyXHJzaWQxNjQ3Mzc0N1xyc2lkMTY1MTk3ODMNClxyc2lkMTY1Mjk4NzBccnNpZDE2NTMwOTQwXHJzaWQxNjUzMTgwMVxyc2lkMTY1MzQ4MDBccnNpZDE2NTQ2MDExXHJzaWQxNjYwNzI5OFxyc2lkMTY2NDkyNDdccnNpZDE2NjU1MDkyXHJzaWQxNjY3Mzg2Mlxyc2lkMTY2NzY3OTJccnNpZDE2NzE2NjMxXHJzaWQxNjcyMjQ2Nlxyc2lkMTY3Mzg5OTRccnNpZDE2NzM5NjU3XHJzaWQxNjc0NDM2MH17XG1tYXRoUHJcbW1hdGhGb250MzRcbWJya0JpbjBcbWJya0JpblN1YjBcbXNtYWxsRnJhYzANClxtZGlzcERlZjFcbWxNYXJnaW4wXG1yTWFyZ2luMFxtZGVmSmMxXG13cmFwSW5kZW50MTQ0MFxtaW50TGltMFxtbmFyeUxpbTF9e1xpbmZve1x0aXRsZSBffXtcc3ViamVjdCAgfXtca2V5d29yZHMgIH17XGRvY2NvbW0gIH17XGNyZWF0aW1ceXIyMDEzXG1vNFxkeTE2XGhyMTFcbWluOX17XHJldnRpbVx5cjIwMTNcbW80XGR5MTZcaHIxMVxtaW45fXtcdmVyc2lvbjF9e1xlZG1pbnMwfXtcbm9mcGFnZXMyfXtcbm9md29yZHM1MjI1fQ0Ke1xub2ZjaGFyczI5Nzg5fXtcKlxjYXRlZ29yeSAgfXtcKlxobGlua2Jhc2UgIH17XG5vZmNoYXJzd3MzNDk0NX17XHZlcm4zMjc3M319e1wqXHhtbG5zdGJsIHtceG1sbnMxIGh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAwMy93b3JkbWx9fVxwYXBlcncxMjI0MFxwYXBlcmgxNTg0MFxtYXJnbDE0NDBcbWFyZ3IxNDQwXG1hcmd0NzIwXG1hcmdiMTE1MlxndXR0ZXIwXGx0cnNlY3QgDQpcd2lkb3djdHJsXGZ0bmJqXGFlbmRkb2NccmV2aXNpb25zXHRyYWNrbW92ZXMwXHRyYWNrZm9ybWF0dGluZzFcZG9ub3RlbWJlZHN5c2ZvbnQxXHJlbHlvbnZtbDBcZG9ub3RlbWJlZGxpbmdkYXRhMFxncmZkb2NldmVudHMwXHZhbGlkYXRleG1sMVxzaG93cGxhY2Vob2xkdGV4dDBcaWdub3JlbWl4ZWRjb250ZW50MFxzYXZlaW52YWxpZHhtbDBcc2hvd3htbGVycm9yczENClxub3hsYXR0b3llblxleHBzaHJ0blxub3VsdHJsc3BjXGRudGJsbnNiZGJcbm9zcGFjZWZvcnVsXGZvcm1zaGFkZVxob3J6ZG9jXGRnbWFyZ2luXGRnaHNwYWNlMTIwXGRndnNwYWNlMTgwXGRnaG9yaWdpbjE0NDBcZGd2b3JpZ2luNzIwXGRnaHNob3cyXGRndnNob3cxDQpcamV4cGFuZFx2aWV3a2luZDFcdmlld3NjYWxlMTIwXHBnYnJkcmhlYWRccGdicmRyZm9vdFxzcGx5dHduaW5lXGZ0bmx5dHduaW5lXGh0bWF1dHNwXG5vbG5odGFkanRibFx1c2VsdGJhbG5cYWxudGJsaW5kXGx5dGNhbGN0Ymx3ZFxseXR0YmxydGdyXGxuYnJrcnVsZVxub2Jya3dycHRibFxzbmFwdG9ncmlkaW5jZWxsXHJlbXBlcnNvbmFsaW5mb1xhbGxvd2ZpZWxkZW5kc2VsDQpcd3JwcHVuY3RcYXNpYW5icmtydWxlXG5vamtlcm5wdW5jdFxyc2lkcm9vdDU1OTg5MjlcbmV3dGJsc3R5cnVsc1xub2dyb3dhdXRvZml0XHV0aW5sIFxmZXQwe1wqXHdncmZmbXRmaWx0ZXIgMjQ1MH1caWxmb21hY2F0Y2xudXAwe1wqXGZ0bnNlcCBcbHRycGFyIFxwYXJkXHBsYWluIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIA0KXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ3OTM1OTAxIFxjaGZ0bnNlcCANClxwYXIgDQpccGFyIH19e1wqXGZ0bnNlcGMgXGx0cnBhciBccGFyZFxwbGFpbiBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxpbnNyc2lkNzkzNTkwMSBcY2hmdG5zZXBjIA0KXHBhciANClxwYXIgfX17XCpcZnRuY24gXGx0cnBhciBccGFyZFxwbGFpbiBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxpbnNyc2lkNzkzNTkwMSANClxwYXIgfX17XCpcYWZ0bnNlcCBcbHRycGFyIFxwYXJkXHBsYWluIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ3OTM1OTAxIFxjaGZ0bnNlcCANClxwYXIgDQpccGFyIH19e1wqXGFmdG5zZXBjIFxsdHJwYXIgXHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDc5MzU5MDEgXGNoZnRuc2VwYyANClxwYXIgDQpccGFyIH19e1wqXGFmdG5jbiBcbHRycGFyIFxwYXJkXHBsYWluIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ3OTM1OTAxIA0KXHBhciB9fVxsdHJwYXIgXHNlY3RkIFxsdHJzZWN0XHBnbnJlc3RhcnRcbGluZXgwXGVuZG5oZXJlXHNlY3RsaW5lZ3JpZDM2MFxzZWN0ZGVmYXVsdGNsXHNlY3Ryc2lkNTEzNzUxM1xzZnRuYmoge1xmb290ZXJyIFxsdHJwYXIgXHBhcmRccGxhaW4gXGx0cnBhclxzMTdccWMgXGxpMFxyaTBcd2lkY3RscGFyXHRxY1x0eDQzMjBcdHFyXHR4ODY0MFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCANClxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxjZ3JpZCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDgwOTg2NyBCfXtcZmllbGR7XCpcZmxkaW5zdCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDgwOTg2NyAgUEFHRSAgIFxcKiBNRVJHRUZPUk1BVCB9fXtcZmxkcnNsdCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxsYW5nMTAyNFxsYW5nZmUxMDI0XG5vcHJvb2ZcaW5zcnNpZDcyODE1ODAgMTF9fX1cc2VjdGQgXGx0cnNlY3RcbGluZXgwXGVuZG5oZXJlXHNlY3RkZWZhdWx0Y2xcc2Z0bmJqIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkODA5ODY3IA0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaW5zcnNpZDgwOTg2NyANClxwYXIgfX17XCpccG5zZWNsdmwxXHBudWNybVxwbnN0YXJ0MVxwbmluZGVudDcyMFxwbmhhbmcge1xwbnR4dGEgLn19e1wqXHBuc2VjbHZsMlxwbnVjbHRyXHBuc3RhcnQxXHBuaW5kZW50NzIwXHBuaGFuZyB7XHBudHh0YSAufX17XCpccG5zZWNsdmwzXHBuZGVjXHBuc3RhcnQxXHBuaW5kZW50NzIwXHBuaGFuZyB7XHBudHh0YSAufX17XCpccG5zZWNsdmw0XHBubGNsdHJccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRhICl9fQ0Ke1wqXHBuc2VjbHZsNVxwbmRlY1xwbnN0YXJ0MVxwbmluZGVudDcyMFxwbmhhbmcge1xwbnR4dGIgKH17XHBudHh0YSApfX17XCpccG5zZWNsdmw2XHBubGNsdHJccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRiICh9e1xwbnR4dGEgKX19e1wqXHBuc2VjbHZsN1xwbmxjcm1ccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRiICh9e1xwbnR4dGEgKX19e1wqXHBuc2VjbHZsOA0KXHBubGNsdHJccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRiICh9e1xwbnR4dGEgKX19e1wqXHBuc2VjbHZsOVxwbmxjcm1ccG5zdGFydDFccG5pbmRlbnQ3MjBccG5oYW5nIHtccG50eHRiICh9e1xwbnR4dGEgKX19XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgDQpcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTA3Mzc5IA0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzMjJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHRxY1x0eDQzMjBcdHFyXHR4ODY0MFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcY2dyaWQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJccWMgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMFxhZnMyOCANClxsdHJjaFxmY3MwIFxiXGZzMjhcaW5zcnNpZDQ2MTI3NzQgRVhISUJJVCB9e1xydGxjaFxmY3MxIFxhZjBcYWZzMjggXGx0cmNoXGZjczAgXGJcZnMyOFxpbnNyc2lkMTQxNzY1MTQgQn17XHJ0bGNoXGZjczEgXGFmMFxhZnMyOCBcbHRyY2hcZmNzMCBcYlxmczI4XGluc3JzaWQ0NjEyNzc0ICANClxwYXIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQ0NjEyNzc0IA0KXHBhciBXRVNUQ09OTkVDVCANClxwYXIgUE9JTlQtVE8tUE9JTlR9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0ICANClxwYXIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQ0NjEyNzc0IFJFR0lPTkFMIFRSQU5TTUlTU0lPTiBTRVJWSUNFIA0KXHBhciBUQVJJRkYNClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpbnNyc2lkNDYxMjc3NCANClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBcczEgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMCBcbHRyY2hcZmNzMCBcYlxmNDJcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiBBcnRpY2xlIEkuXHRhYn19XHBhcmRccGxhaW4gXGx0cnBhcg0KXHMxXHFjIFxsaTBccmkwXHNhMjQwXGtlZXBca2VlcG5cd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxvdXRsaW5lbGV2ZWwwXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGtlcm5pbmczMlxjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcbGluZSBQcmVhbWJsZQ0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxpbnNyc2lkNTQ2NjA5MiBBcml6b25hIFB1YmxpYyBTZXJ2aWNlIENvbXBhbnl9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0ICAodGhlIFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMzM2NzM1IFRyYW5zbWlzc2lvbiBQcm92aWRlcn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NA0KKSwgaW4gY29vcmRpbmF0aW9uIHdpdGggdGhlIG90aGVyIFJUUHMgKGFzIGRlZmluZWQgYmVsb3cpIHdpbGwgcHJvdmlkZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBwdXJzdWFudCB0byB0aGUgYXBwbGljYWJsZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIFdlc3RDb25uZWN0IFBvaW50LVRvLVBvaW50IFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIFRhcmlmZiAodGhlIFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgUmVnaW9uYWwgVGFyaWZmfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzk0KSBjb21tZW5jaW5nIG9uIHRoZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxNzI2OTIwIEVmZmVjdGl2ZX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQogRGF0ZSAoYXMgZGVmaW5lZCBiZWxvdykgYW5kIGVuZGluZyBvbiB0aGUgZWFybGllcn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE3ODQ4NzMgIG9mIHRoZX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgIGRhdGUgd2hlbiB0aGlzIFJlZ2lvbmFsIFRhcmlmZiBpcyB0ZXJtaW5hdGVkIG9yIHRoZSBUcmFuc21pc3Npb24gUHJvdmlkZXIgfXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ2ODI0MDU3IHdpdGhkcmF3cyB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IHRoaXMgUmVnaW9uYWwgVGFyaWZmIGluIGFjY29yZGFuY2Ugd2l0aCBpdHMgdGVybXMuICANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczYyXHFqIFxsaTBccmkwXHdpZGN0bHBhclx0cWNcdHg0NjgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxzMSBccnRsY2hcZmNzMSBcYWYwXGFmczIwIFxsdHJjaFxmY3MwIFxiXGY0MlxpbnNyc2lkNDYxMjc3NCBcaGljaFxhZjQyXGRiY2hcYWYwXGxvY2hcZjQyIEFydGljbGUgSUkuXHRhYn19XHBhcmRccGxhaW4gXGx0cnBhcg0KXHMxXHFjIFxsaTBccmkwXHNhMjQwXGtlZXBca2VlcG5cd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxvdXRsaW5lbGV2ZWwwXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGtlcm5pbmczMlxjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcbGluZSBEZWZpbml0aW9ucw0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzMlxxbCBcbGkwXHJpMFxrZWVwXGtlZXBuXHdpZGN0bHBhclx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxjZ3JpZCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxiMFxpbnNyc2lkNDU0Njc5NiBJbiBhZGRpdGlvbiB0byB0ZXJtcyBkZWZpbmVkIGVsc2V3aGVyZSBpbiB0aGlzIFJlZ2lvbmFsIFRhcmlmZiBhbmQgdX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgbmxlc3MgdGhlIGNvbnRleHQgb3RoZXJ3aXNlIHJlcXVpcmVzLCBjYXBpdGFsaXplZCBhbmQgZGVmaW5lZCB0ZXJtcyANCnVzZWQgaGVyZWluIHNoYWxsIGhhdmUgdGhlIG1lYW5pbmdzIGdpdmVuIHRvIHRoZW0gYmVsb3c6fXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMzM2NzM1IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcdGFiIFx0YWIgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgQWRtaW5pc3RyYXRpdmUgQ2hhcmdlfXsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQgaGFzIHRoZSBtZWFuaW5nIHNldCBmb3J0aCBpbiBTZWN0aW9uIDcuMShmKS59e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxNjMyODA1NiANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE2MDE1OTQwIA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxNjMyODA1NiBcdGFiIFx0YWIgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDE2MzI4MDU2XGNoYXJyc2lkMTYzMjgwNTYgQmFsYW5jaW5nIEF1dGhvcml0eX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE2MzI4MDU2IFwnOTQgbWVhbnMgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNzY5NzY4MCANCnRoZSByZXNwb25zaWJsZSBlbnRpdHkgdGhhdCBpbnRlZ3JhdGVzIHJlc291cmNlIHBsYW5zIGFoZWFkIG9mIHRpbWUsIG1haW50YWlucyBsb2FkLWludGVyY2hhbmdlLWdlbmVyYXRpb24gYmFsYW5jZSB3aXRoaW4gYSBCYWxhbmNpbmcgQXV0aG9yaXR5IEFyZWEsIGFuZCBzdXBwb3J0cyBpbnRlcmNvbm5lY3Rpb24gZnJlcXVlbmN5IGluIHJlYWwgdGltZS59e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0Mjc2NTA5IA0KICBUaGUgQmFsYW5jaW5nIEF1dGhvcml0eSBzaGFsbCBiZSBlaXRoZXIgdGhlIFRyYW5zbWlzc2lvbiBQcm92aWRlciBvciBhIGRlc2lnbmVlIG9mIHRoZSBUcmFuc21pc3Npb24gUHJvdmlkZXIufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTYzMjgwNTYgDQpccGFyIA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDI3NjUwOSB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE2MzI4MDU2IFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQxNjMyODA1NlxjaGFycnNpZDE2MzI4MDU2IA0KQmFsYW5jaW5nIEF1dGhvcml0eSBBcmVhfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTYzMjgwNTYgXCc5NCBtZWFucyB0aGUgDQpjb2xsZWN0aW9uIG9mIGdlbmVyYXRpb24sIHRyYW5zbWlzc2lvbiwgYW5kIGxvYWRzIHdpdGhpbiB0aGUgbWV0ZXJlZCBib3VuZGFyaWVzIG9mIHRoZSBCYWxhbmNpbmcgQXV0aG9yaXR5LiAgVGhlIEJhbGFuY2luZyBBdXRob3JpdHkgbWFpbnRhaW5zIGxvYWQtcmVzb3VyY2UgYmFsYW5jZSB3aXRoaW4gdGhpcyBhcmVhLg0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMTM3NzQ1MjMge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFx0YWIgXHRhYiBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBCaWxsaW5nIEFnZW50fXtccnRsY2hcZmNzMSANClxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQgbWVhbnMgYW4gaW5kZXBlbmRlbnQgdGhpcmQgcGFydHkgcmV0YWluZWQgYnkgdGhlIFJUUHMgdG8gYWN0IGFzIGJpbGxpbmcgYWdlbnQgZm9yIFJlZ2lvbmFsIFRyYW5zYWN0aW9ucy59e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxNTI4MzY1NyANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpMTQ0MFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBDb21taXNzaW9ufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzk0IG1lYW5zIHRoZSBGZWRlcmFsIEVuZXJneSBSZWd1bGF0b3J5IENvbW1pc3Npb24gb3IgYW55IHN1Y2Nlc3NvciB0aGVyZXRvLg0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpMTQ0MFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IEN1cnRhaWx9e1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBvciBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBDdXJ0YWlsbWVudH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyBhIHJlZHVjdGlvbiBpbiBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBpbiByZXNwb25zZSB0byBhIHRyYW5zZmVyIGNhcGFiaWxpdHkgc2gNCm9ydGFnZSBhcyBhIHJlc3VsdCBvZiBlbWVyZ2VuY3kgb3Igc3lzdGVtIHJlbGlhYmlsaXR5IGNvbmRpdGlvbnMuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgRGVsaXZlcmluZyBQYXJ0eX17XHJ0bGNoXGZjczEgDQpcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzk0IG1lYW5zIHRoZSBlbnRpdHkgc3VwcGx5aW5nIGNhcGFjaXR5IGFuZCBlbmVyZ3kgYXQgUmVnaW9uYWwgUG9pbnQocykgb2YgUmVjZWlwdCB0byBiZSB0cmFuc21pdHRlZCBieSB0aGUgUlRQcyBwdXJzdWFudCB0byB0aGlzIFJlZ2lvbmFsIFRhcmlmZi4NClxwYXIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkODA5ODY3IA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQzNTAyODMzIFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQzNTAyODMzIEVmZmVjdGl2ZX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDM1MDI4MzNcY2hhcnJzaWQyNjIxNzM3ICBEYXRlfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMzUwMjgzMyBcJzk0IG1lYW5zIH17XHJ0bGNoXGZjczEgDQpcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwMDIwOSBbSnVyaXNkaWN0aW9uYWwgUlRQcyB1c2UgdGhlIGZvbGxvd2luZyBsYW5ndWFnZTogIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDM1MDI4MzMgdGhlIGRhdGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwMDIwOSBvbiB3aGljaCB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMzUwMjgzMyANCkNvbW1pc3Npb24gfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwMDIwOSBtYWtlcyB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQzNTAyODMzIHRoaXMgUmVnaW9uYWwgVGFyaWZmfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwMDIwOSAgZWZmZWN0aXZlfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDczNzkgLn17XHJ0bGNoXGZjczEgDQpcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwMDIwOSBdICBbTm9uLWp1cmlzZGljdGlvbmFsIFJUUHMgdXNlIHRoZSBmb2xsb3dpbmcgbGFuZ3VhZ2U6ICB0aGUgZGF0ZSBvbiB3aGljaCB0aGUgVHJhbnNtaXNzaW9uICBQcm92aWRlciBtYWtlcyB0aGlzIFRhcmlmZiBlZmZlY3RpdmUgcHVyc3VhbnQgdG8gYSBwb3N0aW5nIG9uIGl0cyBPQVNJUy5dICB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQzNTAyODMzIA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpMTQ0MFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IEVsaWdpYmxlIEN1c3RvbWVyfXtccnRsY2hcZmNzMSANClxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQgaXMgYW4gZW50aXR5IHRoYXQgaGFzIG1ldCB0aGUgY29uZGl0aW9ucyByZXF1aXJlZCBvZiBUcmFuc21pc3Npb24gQ3VzdG9tZXJzIHRvIHRha2UgcG9pbnQtdG8tcG9pbnQgdHJhbnNtaXNzaW9uIHNlcnZpY2UgdW5kZXIgdGhlIHJlc3BlY3RpdmUgT0FUVCBvZiBlYWNoIFJUUCBwcm92aWRpbmcgc2VydmljZSBmb3IgYSBwYXJ0aWN1bGFyIFJlZ2lvbmFsIFRyYW5zYWN0aW9uLiAgDQoNClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxmaTE0NDBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBHb29kIFV0aWxpdHkgUHJhY3RpY2V9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NA0KIHNoYWxsIG1lYW4gYW55IG9mIHRoZSBwcmFjdGljZXMsIG1ldGhvZHMgYW5kIGFjdHMgZW5nYWdlZCBpbiBvciBhcHByb3ZlZCBieSBhIHNpZ25pZmljYW50IHBvcnRpb24gb2YgdGhlIGVsZWN0cmljIHV0aWxpdHkgaW5kdXN0cnkgb3BlcmF0aW5nIHdpdGhpbiB0aGUgd2VzdGVybiByZWxpYWJpbGl0eSByZWdpb24gb2YgdGhlIE5vcnRoIEFtZXJpY2FuIEVsZWN0cmljIFJlbGlhYmlsaQ0KdHkgQ29ycG9yYXRpb24gZHVyaW5nIHRoZSByZWxldmFudCB0aW1lIHBlcmlvZCwgb3IgYW55IG9mIHRoZSBwcmFjdGljZXMsIG1ldGhvZHMgYW5kIGFjdHMgd2hpY2gsIGluIHRoZSBleGVyY2lzZSBvZiByZWFzb25hYmxlIGp1ZGdtZW50IGluIGxpZ2h0IG9mIHRoZSBmYWN0cyBrbm93biBhdCB0aGUgdGltZSB0aGUgZGVjaXNpb24gd2FzIG1hZGUsIGNvdWxkIGhhdmUgYmVlbiBleHBlY3RlZCB0byBhY2NvbXBsaXNoIHRoZSBkZXNpcmVkIHJlc3VsDQp0DQogYXQgYSByZWFzb25hYmxlIGNvc3QgY29uc2lzdGVudCB3aXRoIGdvb2QgYnVzaW5lc3MgcHJhY3RpY2VzLCByZWxpYWJpbGl0eSwgc2FmZXR5IGFuZCBleHBlZGl0aW9uLiAgR29vZCBVdGlsaXR5IFByYWN0aWNlIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBsaW1pdGVkIHRvIHRoZSBvcHRpbXVtIHByYWN0aWNlLCBtZXRob2QsIG9yIGFjdCB0byB0aGUgZXhjbHVzaW9uIG9mIGFsbCBvdGhlcnMsIGJ1dCByYXRoZXIgdG8gYmUgYWNjZXB0YWJsZSBwcmENCmN0aWNlcywgbWV0aG9kcywgb3IgYWN0cyBnZW5lcmFsbHkgYWNjZXB0ZWQgaW4gdGhlIHJlZ2lvbi4NClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIFx0YWIgXHRhYiBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBJbnRlcnJ1cHRpb259e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQgb3IgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgSW50ZXJydXB0fXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzk0DQogbWVhbnMgYSByZWR1Y3Rpb24gaW4gUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgZHVlIHRvIGVjb25vbWljIHJlYXNvbnMuDQpccGFyIA0KXHBhciBcdGFiIFx0YWIgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgSnVyaXNkaWN0aW9uYWwgUlRQfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzk0IG1lYW5zIGFuIFJUUCB0aGF0IGlzIHN1YmplY3QgdG8gdGhlIGp1cmlzZGljdGlvbiBvZiB0aGUgQ29tbWlzc2lvbiB1bmRlciBTZWN0aW9ucyAyMDUgYW5kIDIwNiBvZiB0aGUgRmVkZXJhbCBQb3dlciBBY3QuDQoNClxwYXIgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxmaTE0NDBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBOYXRpdmUgTG9hZCBDdXN0b21lcnN9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyB0aGUgd2hvbGVzYWxlIGFuZCByZXRhaWwgY3VzdG9tZXJzIG9mIGFuIFJUUCBvbiB3aG9zZSBiZWhhbGYgdGhlIFJUUCwgYnkgc3RhdHV0ZSwgZnJhbmNoaXNlLCByZWd1bGF0b3J5IHJlcXVpcmVtZW50LCBvciBjb250cmFjdCwgaGFzIHVuZGVydGFrZW4gYW4gb2JsaWdhdGlvbiB0byBjb25zdHJ1Y3QgYW5kIG9wZXJhdGUgdGhlIFJUUFxycXVvdGUgDQpzIFRyYW5zbWlzc2lvbiBTeXN0ZW0gdG8gbWVldCB0aGUgcmVsaWFibGUgZWxlY3RyaWMgbmVlZHMgb2Ygc3VjaCBjdXN0b21lcnMuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciBcdGFiIFx0YWIgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgTmV0d29yayBDdXN0b21lcnN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQgbWVhbnMgY3VzdG9tZXJzIHJlY2VpdmluZyB0cmFuc21pc3Npb24gc2VydmljZSBwdXJzdWFudCB0byB0aGUgdGVybXMgb2YgYW4gUlRQXHJxdW90ZSANCnMgTmV0d29yayBJbnRlZ3JhdGlvbiBUcmFuc21pc3Npb24gU2VydmljZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQzMTU2MTY3IEFncmVlbWVudCB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IHVuZGVyIFBhcnQgSUlJIG9mIHRoZSBSVFBccnF1b3RlIHMgT0FUVC4NClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpMTQ0MFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBOb24tRmlybSBUcmFuc21pc3Npb24gU2VydmljZX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyBob3VybHkgbm9uLWZpcm0gcG9pbnQtdG8tcG9pbnQgdHJhbnNtaXNzaW9uIHNlcnZpY2UgcHJvdmlkZWQgYnkgYW55IFJUUCBwdXJzdWFudCB0byBpdHMgcmVzcGVjdGl2ZSBPQVRULg0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpMTQ0MFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IE5vbi1KdXJpc2RpY3Rpb25hbCBSVFB9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyBhbiBSVFAgdGhhdCBpcyBub3Qgc3ViamVjdCB0byB0aGUganVyaXNkaWN0aW9uIG9mIHRoZSBDb21taXNzaW9uIHVuZGVyIFNlY3Rpb25zIDIwNSBhbmQgMjA2IG9mIHRoZSBGZWRlcmFsIFBvd2VyIEFjdC4NClxwYXIgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDMzNjczNSB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgT0FUVH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxpbnNyc2lkNDYxMjc3NCBcJzk0IG1lYW5zLCBpbiByZXNwZWN0IG9mIGEgcGFydGljdWxhciBSVFB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDQ2MTI3NzQgLCB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KdGhlIG9wZW4gYWNjZXNzIHRyYW5zbWlzc2lvbiB0YXJpZmYgb2Ygc3VjaCBSVFAgb24gZmlsZSB3aXRoIHRoZSBDb21taXNzaW9uIG9yLCBpZiBzdWNoIFJUUCBpcyBub3QgcmVxdWlyZWQgdG8gZmlsZSBzdWNoIHRhcmlmZiB3aXRoIHRoZSBDb21taXNzaW9uLCB0aGUgb3BlbiBhY2Nlc3MgdHJhbnNtaXNzaW9uIHRhcmlmZiBvZiBzdWNoIFJUUCBwb3N0ZWQgb24gaXRzIE9BU0lTLn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxpbnNyc2lkMTExNTg3MCAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4MTQ0MFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDEzNTAyMTkzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcdGFiIA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjA0NjM5IFx0YWIgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MDQ2MzkgUGFydGljaXBhdGlvbiBBZ3JlZW1lbnR9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjA0NjM5IFwnOTQgbWVhbnMgdGhhdCBjZXJ0YWluIFdlc3RDb25uZWN0IH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxpbnNyc2lkMTQ1MDc4NzIgQW1lbmRlZCBhbmQgUmVzdGF0ZWQgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwNDYzOSBQb2ludC10by1Qb2ludCBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBQYXJ0aWNpcGF0aW9uIEFncmVlbWVudH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDcwODMzMDUgIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MDQ2MzkgDQplZmZlY3RpdmUgYXMgb2YgdGhlIEVmZmVjdGl2ZSBEYXRlIChhcyBkZWZpbmVkIHRoZXJlaW4pIGJ5IGFuZCBhbW9uZyB0aGUgUlRQcy4NClxwYXIgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxmaTE0NDBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBSZWNlaXZpbmcgUGFydHl9e1xydGxjaFxmY3MxIA0KXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyB0aGUgZW50aXR5IHJlY2VpdmluZyBjYXBhY2l0eSBhbmQgZW5lcmd5IG1hZGUgYXZhaWxhYmxlIGF0LCBhbmQgdHJhbnNtaXR0ZWQgYnkgUlRQcyB0bywgUmVnaW9uYWwgUG9pbnQocykgb2YgRGVsaXZlcnkgcHVyc3VhbnQgdG8gdGhpcyBSZWdpb25hbCBUYXJpZmYuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgUmVnaW9uYWwgQ2hhcmdlfXtccnRsY2hcZmNzMSANClxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQgaGFzIHRoZSBtZWFuaW5nIHNldCBmb3J0aCBpbiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IFNlY3Rpb24gNy4xKGEpfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCAuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgUmVnaW9uYWwgUG9pbnQocykgb2YgRGVsaXZlcnl9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyB0aGUgcG9pbnQocykgb2YgaW50ZXJjb25uZWN0aW9uIG9uIHRoZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU3lzdGVtIHdoZXJlIGNhcGFjaXR5IGFuZCBlbmVyZ3kgZnJvbSB0aGUgRGVsaXZlcmluZyBQYXJ0eSB3aWxsIGJlIG1hZGUgYXZhaWxhYmxlIGFuZCBkZWxpdmVyZWQgdG8gdGhlIFJlY2VpdmluZyBQYXJ0eQ0KIGJ5IHRoZSBSVFBzIHB1cnN1YW50IHRvIHRoaXMgUmVnaW9uYWwgVGFyaWZmLg0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpMTQ0MFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IFJlZ2lvbmFsIFBvaW50KHMpIG9mIFJlY2VpcHR9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyB0aGUgcG9pbnQocykgb2YgaW50ZXJjb25uZWN0aW9uIG9uIHRoZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU3lzdGVtIHdoZXJlIGNhcGFjaXR5IGFuZCBlbmVyZ3kgZnJvbSB0aGUgRGVsaXZlcmluZyBQYXJ0eSB3aWxsIGJlIHJlY2VpdmVkIGJ5IHRoZSBSVFBzIGZvciB0cmFuc21pc3Npb24gcHVyc3VhbnQgdG8gdGhpcyBSZWdpb25hbCBUYXJpZmYuDQoNClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxmaTE0NDBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBSZWdpb25hbCBSYXRlfXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQgbWVhbnMgdGhlIGhpZ2hlc3Qgb2YgdGhlIGNlaWxpbmcgcmF0ZXMgZm9yIGhvdXJseSBub24tZmlybSB0cmFuc21pc3Npb24gc2VydmljZSBwb3N0ZWQgb24gdGhlIHJlc3BlY3RpdmUgT0FTSVMgb2YgdGhlIFJUUHMgd2hvIHdvdWxkIHByb3ZpZGUgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UsIGZvciBzZXJ2aWNlIHVuZGVyIHRoZWlyIE9BVFRzIGF0IHRoZSB0DQppbWUgb2YgdGhlIFJlZ2lvbmFsIFRyYW5zYWN0aW9uLiAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDQ2MDQ2MzkgDQpUaGUgUmVnaW9uYWwgUmF0ZSBpcyBub3QgYSBkaXNjb3VudGVkIHJhdGUgc3ViamVjdCB0byBTY2hlZHVsZSA4IG9mIHRoZSBDb21taXNzaW9uJ3MgcHJvIGZvcm1hIG9wZW4gYWNjZXNzIHRyYW5zbWlzc2lvbiB0YXJpZmYgYW5kIHNoYWxsIG5vdCBiZSBzdWJqZWN0IHRvIGRpc2NvdW50Ln17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MDQ2MzkgDQpccGFyIFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjA0NjM5IFJlZ2lvbmFsIFRhcmlmZn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MDQ2MzkgXCc5NCBtZWFucyB0aGlzIFdlc3RDb25uZWN0IFBvaW50LVRvLVBvaW50IFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIFRhcmlmZn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxpbnNyc2lkNDYwNDYzOVxjaGFycnNpZDEwMzU3ODU0ICB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjA0NjM5IGFzIHNldCBmb3J0aCBpbiB0aGUgcHJlYW1ibGUuDQpccGFyIA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IFJlZ2lvbmFsIFRyYW5zYWN0aW9ufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzk0DQogbWVhbnMgYSBzaW5nbGUgdHJhbnNhY3Rpb24gaW4gd2hpY2ggUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgaXMgcHJvdmlkZWQgdG8gYW4gRWxpZ2libGUgQ3VzdG9tZXIsIHB1cnN1YW50IHRvIHRoZSBSZWdpb25hbCBUYXJpZmYuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2V9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyBob3VybHkgbm9uLWZpcm0gcG9pbnQtdG8tcG9pbnQgdHJhbnNtaXNzaW9uIHNlcnZpY2UgYWNyb3NzIHRoZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU3lzdGVtIHByb3ZpZGVkIGJ5IHRoZSBUcmFuc21pc3Npb24gUHJvdmlkZXIgYW5kIG90aGVyIFJUUHMgcHVyc3VhbnQgdG8gdGh9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaW5zcnNpZDMxNTYxNjcgaXN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0ICBSZWdpb25hbCBUYXJpZmYuIA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpMTQ0MFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTeXN0ZW19ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDQ2MDQ2MzkgYWdncmVnYXRlfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwNDYzOSAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBmYWNpbGl0aWVzIG93bg0KZWQsIGNvbnRyb2xsZWQgb3Igb3BlcmF0ZWQgYnkgdGhlIFJUUHMgdGhhdCBhcmUgdXNlZCB0byBwcm92aWRlIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIHB1cnN1YW50IHRvIHRoaXMgUmVnaW9uYWwgVGFyaWZmLg0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMzM2NzM1IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpMTQ0MFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IFJUUH17XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzk0IG1lYW5zIGFueSBlbnRpdHkgdGhhdCBpcyB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxNDUwNzg3MiBhIFB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IGFydHkgdG8gdGhlIFBhcnRpY2lwYXRpb24gQWdyZWVtZW50LCBhbmQgdGhhdCBpcyBwcm92aWRpbmcgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgcHVycw0KdWFudCB0byB0aGUgUmVnaW9uYWwgVGFyaWZmIGFzIGFkb3B0ZWQgYnkgc3VjaCBlbnRpdHkuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciBcdGFiIFx0YWIgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgU2VydmljZSBBZ3JlZW1lbnR9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQgaGFzIHRoZSBtZWFuaW5nIHNldCBmb3J0aCBpbiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IFNlY3Rpb24gMy4zfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGluc3JzaWQ0NjEyNzc0IC4NClxwYXIgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxmaTE0NDBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBUcmFuc21pc3Npb24gQ3VzdG9tZXJ9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyBhbiBFbGlnaWJsZSBDdXN0b21lciB0YWtpbmcgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgdW5kZXIgdGhpcyBSZWdpb25hbCBUYXJpZmYuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgVHJhbnNtaXNzaW9uIFN5c3RlbX17DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcJzk0IG1lYW5zLCBpbiByZXNwZWN0IG9mIGFueSBSVFAsIHRoZSBmYWNpbGl0aWVzIG93bmVkIGJ5IHN1Y2ggUlRQIHRoYXQgYXJlIHVzZWQgdG8gcHJvdmlkZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBwdXJzdWFudCB0byB0aGlzIFJlZ2lvbmFsIFRhcmlmZi4NClxwYXIgDQpccGFyIFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IHdlc1RUcmFuc317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXCc5NCBtZWFucyB0aGUgT0FTSVMgc2l0ZSBvZiB0aGUgUlRQcywgb3IgaXRzIHN1Y2Nlc3NvciBzaXRlLg0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzNjJccWogXGxpMFxyaTBcd2lkY3RscGFyXHRxY1x0eDQ2ODBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpbnNyc2lkNDYxMjc3NCANClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBcczEgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMCBcbHRyY2hcZmNzMCBcYlxmNDJcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiBBcnRpY2xlIElJSS5cdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyDQpcczFccWMgXGxpMFxyaTBcc2EyNDBca2VlcFxrZWVwblx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXG91dGxpbmVsZXZlbDBcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNca2VybmluZzMyXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFxsaW5lIE5hdHVyZSBvZiBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZQ0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxzMiBccnRsY2hcZmNzMSBcYWYwXGFmczIwIFxsdHJjaFxmY3MwIFxiXGY0MlxsYW5nMFxsYW5nZmUwXGxhbmducDBcbGFuZ2ZlbnAwXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgMy4xXHRhYn19XHBhcmRccGxhaW4gXGx0cnBhclxzMlxxbCBcZmk3MjBcbGkwXHJpMFxzbDQ4MFxzbG11bHQxXGtlZXBca2VlcG5cd2lkY3RscGFyDQpcdHgxNDQwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxpbHZsMVxvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxjZ3JpZCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgSG91cmx5IFNlcnZpY2UNClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczYyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eDcyMFx0eDE0NDBcdHFjXHR4NDY4MFx3cmFwZGVmYXVsdFxoeXBocGFyMFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcdGFiIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIHNoYWxsIGJlIHByb3ZpZGVkIG9uIGFuIGhvdXJseSBiYXNpcyBhbmQgY2FuIGJlIHJlc2VydmVkIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEzMzIzODgyIGZvciB9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgdXAgdG8gdHdlbnR5LWZvdXIgKDI0KSBjb25zZWN1dGl2ZSBob3Vycy4gIE5vdHdpdGhzdGFuZGluZyBhbnl0aGluZyB0byB0aGUgY29udHJhcnkgY29udGFpbmVkIGluIHRoaXMgUmVnaW9uYWwgVGFyaWZmLCBpbiBubyBldmVudCBzaGFsbCBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBiZSBhdmFpbGFibGUgb24gYW55IFJUUFxycXVvdGUgDQpzIFRyYW5zbWlzc2lvbiBTeXN0ZW0gaWYgdGhlIHRlcm0gd291bGQgZXh0ZW5kIGJleW9uZCB0aGUgZGF0ZSBvbiB3aGljaCB0aGF0IFJUUCB3b3VsZCBubyBsb25nZXIgYmUgYW4gUlRQIHByb3ZpZGluZyBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBwdXJzdWFudCB0byB0aGlzIFJlZ2lvbmFsIFRhcmlmZi4NClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4LTcyMFx0eDBcdHg3MjBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMyIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGxhbmcwXGxhbmdmZTBcbGFuZ25wMFxsYW5nZmVucDBcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiAzLjJcdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyXHMyXHFsIFxmaTcyMFxsaTBccmkwXHdpZGN0bHBhcg0KXHR4MTQ0MFx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBSZXNlcnZhdGlvbiBQcmlvcml0eQ0KXHBhciB9XHBhcmQgXGx0cnBhclxzMlxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcdHgxODAwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cb3V0bGluZWxldmVsMVxhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczYyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eDcyMFx0cWNcdHg0NjgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDQ2MTI3NzQgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2Ugc2hhbGwgYmUgYXZhaWxhYmxlIGZyb20gdHJhbnNmZXIgY2FwYWJpbGl0eSBpbiBleGNlc3Mgb2YgdGhhdCBuZWVkZWQgZm9yIHJlbGlhYmxlIHNlcnZpY2UgdG8gTmF0aXZlIExvYWQgQ3VzdG9tZXJzLCBOZXR3b3JrIEN1c3RvbWVycyBhbmQgb3RoZXIgdHJhbnNtaXNzaW9uIGN1c3RvbWVycyB0YWtpbmcgbG9uZy10ZXJtIGFuZCBzaG9ydC10ZXJtIGZpcm0gcG9pbnQtdG8tcG9pbnQgdHJhbg0Kc21pc3Npb24gc2VydmljZX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwODk5ODg3ICwgb3IgZGFpbHksIHdlZWtseSBhbmQgbW9udGhseSBub24tZmlybSB0cmFuc21pc3Npb24gc2VydmljZSwgcHJldmlvdXNseS1yZXNlcnZlZCBob3VybHkgbm9uLWZpcm0gdHJhbnNtaXNzaW9uIHNlcnZpY2V9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0ICB1bmRlciBhbiBSVFBccnF1b3RlIA0KcyBPQVRUfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMzAxNTI0NCAsIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY2YxXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkODIyMDQyMSBvciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNmMVxpbnNyc2lkMzAxNTI0NCBzZXJ2aWNlIHJlc2VydmVkIHB1cnN1YW50IHRvIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxjZjFcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4MjIwNDIxIGEgZ3JhbmRmYXRoZXJlZCBhZ3JlZW1lbnQsIGFuZCBmb3IgbWFyZ2lucyBvciByZXNlcnZlcyByZXF1aXJlZCBvciBwZXJtaXR0ZWQgdW5kZXIgYXBwbGljYWJsZSByZWxpYWJpbGl0eSBzdGFuZGFyZHMuICB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KU3ViamVjdCB0byBzdWNoIGF2YWlsYWJpbGl0eSwgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2Ugc2hhbGwgYmUgYXZhaWxhYmxlIG9uIGEgZmlyc3QtY29tZSwgZmlyc3Qtc2VydmVkIGJhc2lzIChpLmUuLCBpbiB0aGUgY2hyb25vbG9naWNhbCBzZXF1ZW5jZSBpbiB3aGljaCBlYWNoIEVsaWdpYmxlIEN1c3RvbWVyIGhhcyByZXNlcnZlZCBzdWNoIHNlcnZpY2UpLiANClxwYXIgfVxwYXJkIFxsdHJwYXJcczYyXHFqIFxsaTBccmkwXHdpZGN0bHBhclx0eDcyMFx0cWNcdHg0NjgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMyIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGxhbmcwXGxhbmdmZTBcbGFuZ25wMFxsYW5nZmVucDBcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiAzLjNcdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyXHMyXHFsIFxmaTcyMFxsaTBccmkwXGtlZXBca2VlcG5cd2lkY3RscGFyDQpcdHgxNDQwXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGxzMjFcaWx2bDFcb3V0bGluZWxldmVsMVxhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxiXGZzMjRcY2dyaWQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFNlcnZpY2UgQWdyZWVtZW50cw0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzNjJccWogXGxpMFxyaTBca2VlcFxrZWVwblx3aWRjdGxwYXJcdHFjXHR4NDY4MFx3cmFwZGVmYXVsdFxoeXBocGFyMFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJcczYyXHFsIFxsaTBccmkwXGtlZXBca2VlcG5cd2lkY3RscGFyXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXHRhYiANCkVsaWdpYmxlIEN1c3RvbWVycyBtdXN0IGV4ZWN1dGUgYW4gdW1icmVsbGEgc2VydmljZSBhZ3JlZW1lbnQgaW4gdGhlIGZvcm0gYXR0YWNoZWQgaGVyZXRvIGFzIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgQW5uZXggQSx9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KIG9yIG11c3QgaGF2ZSBleGVjdXRlZCBhbiB1bWJyZWxsYSBzZXJ2aWNlIGFncmVlbWVudCBpbiB0aGUgZm9ybSBhdHRhY2hlZCBhcyBBbm5leCBBIHRvIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDExNDg0ODIyIGFueSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IHByZWRlY2Vzc29yIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDc4MDg4NDkgdG8gdGhpcyB9DQp7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgUmVnaW9uYWwgVGFyaWZmICh0aGUgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgU2VydmljZSBBZ3JlZW1lbnR9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFwnOTQNCiksIHdpdGggYWxsIG9mIHRoZSBSVFBzIG9yIGVhY2ggUlRQIHdob3NlIFRyYW5zbWlzc2lvbiBTeXN0ZW0gd2lsbCBiZSB1c2VkIHRvIHByb3ZpZGUgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgZm9yIHN1Y2ggRWxpZ2libGUgQ3VzdG9tZXIgYXQgYW55IHRpbWU7IH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQxMjUzNTcxNCBwcm92aWRlZCB0aGF0fXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0ICB0aGUgdW1icmVsbGEgc2VydmljZSBhZ3JlZW1lbnRzIHByZXZpb3VzbHkgZXhlY3V0ZWQgYnkgRWxpZ2kNCmJsZSBDdXN0b21lcnMgd2l0aCBSVFBzIHNoYWxsIGJlIGRlZW1lZCB0byByZWZlciB0byB0aGlzIFJlZ2lvbmFsIFRhcmlmZiBhbmQgc2hhbGwgY29udGludWUgaW4gZWZmZWN0IGFuZCBjb25zdGl0dXRlIFNlcnZpY2UgQWdyZWVtZW50cyBmb3IgYWxsIHB1cnBvc2VzIG9mIHRoaXMgUmVnaW9uYWwgVGFyaWZmIHVudGlsIHRlcm1pbmF0ZWQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZWlyIHRlcm1zLiAgRXhlY3V0ZWQgU2VydmljZSBBZ3JlZW1lbnRzIA0KdGhhdCBjb250YWluIHRoZSBpbmZvcm1hdGlvbiByZXF1aXJlZCB1bmRlciB0aGlzIFJlZ2lvbmFsIFRhcmlmZiBmb3Igc2VydmljZSBwcm92aWRlZCBieSBKdXJpc2RpY3Rpb25hbCBSVFBzIHNoYWxsIGJlIGZpbGVkIHdpdGggdGhlIENvbW1pc3Npb24gfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNzgwODg0OSBpZiByZXF1aXJlZCBieSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KQ29tbWlzc2lvbiByZWd1bGF0aW9ucy4NClxwYXIgfVxwYXJkIFxsdHJwYXJcczYyXHFqIFxsaTBccmkwXHdpZGN0bHBhclx0cWNcdHg0NjgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMyIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGxhbmcwXGxhbmdmZTBcbGFuZ25wMFxsYW5nZmVucDBcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiAzLjRcdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyXHMyXHFsIFxmaTcyMFxsaTBccmkwXGtlZXBca2VlcG5cd2lkY3RscGFyDQpcdHgxNDQwXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGxzMjFcaWx2bDFcb3V0bGluZWxldmVsMVxhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxiXGZzMjRcY2dyaWQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KQ3VydGFpbG1lbnQgb3IgSW50ZXJydXB0aW9uIG9mIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHM2MlxxaiBcbGkwXHJpMFx3aWRjdGxwYXJcdHFjXHR4NDY4MFx3cmFwZGVmYXVsdFxoeXBocGFyMFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJcczYyXHFsIFxmaTE0NDBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCAoYSkgIElmIGEgQw0KdXJ0YWlsbWVudCBvbiB0aGUgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFN5c3RlbSwgb3IgYSBwb3J0aW9uIHRoZXJlb2YsIGlzIHJlcXVpcmVkLCB0aGVuIEN1cnRhaWxtZW50cyB3aWxsIGJlIG1hZGUgb24gYSBub25cXw0KZGlzY3JpbWluYXRvcnkgYmFzaXMgdG8gdGhlIFJlZ2lvbmFsIFRyYW5zYWN0aW9uKHMpIHRoYXQgZWZmZWN0aXZlbHkgcmVsaWV2ZSB0aGUgY29uc3RyYWludC4gIFdoZW4gdGhlIFJUUHMgZGV0ZXJtaW5lIHRoYXQgYW4gZWxlY3RyaQ0KY2FsIGVtZXJnZW5jeSBleGlzdHMgb24gdGhlIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTeXN0ZW0gYW5kIGltcGxlbWVudCBlbWVyZ2VuY3kgcHJvY2VkdXJlcyB0byBDdXJ0YWlsIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlLCB0aGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIHNoYWxsIG1ha2UgdGhlIHJlcXVpcmVkIHJlZHVjdGlvbnMgdXBvbiByZXF1ZXN0IG9mIHRoZSBSVFBzLiAgVGhlIFJUUHMgcmVzZXJ2ZSB0aGUgcmlnaHQgdG8gQ3VyDQp0YWlsLCBpbiB3aG9sZSBvciBpbiBwYXJ0LCBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBwcm92aWRlZCB1bmRlciB0aGlzIFJlZ2lvbmFsIFRhcmlmZiBmb3IgcmVsaWFiaWxpdHkgcmVhc29ucyB3aGVuIGFuIGVtZXJnZW5jeSBvciBvdGhlciB1bmZvcmVzZWVuIGNvbmRpdGlvbiB0aHJlYXRlbnMgdG8gaW1wYWlyIG9yIGRlZ3JhZGUgdGhlIHJlbGlhYmlsaXR5IG9mIHRoZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU3lzdGVtLiAgDQoNClxwYXIgfVxwYXJkIFxsdHJwYXJcczYyXHFqIFxsaTBccmkwXHdpZGN0bHBhclx0cWNcdHg0NjgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZCBcbHRycGFyXHM2MlxxbCBcZmkxNDQwXGxpMFxyaTBcd2lkY3RscGFyXHRxY1x0eDQ2ODBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCAoYilcdGFiICANCiBUaGUgUlRQcyByZXNlcnZlIHRoZSByaWdodCB0byBJbnRlcnJ1cHQsIGluIHdob2xlIG9yIGluIHBhcnQsIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIHByb3ZpZGVkIHVuZGVyIHRoaXMgUmVnaW9uYWwgVGFyaWZmIGZvciBlY29ub21pYyBvciBvdGhlciByZWFzb25zIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvZHVjdCB0eXBlIHByaW9yaXR5IHJ1bGVzIGVzdGFibGlzaGVkIGluIHRoZSBSVFBzXHJxdW90ZSANCiBPQVRUcy4gIFRoZSBSVFBzIGFsc28gd2lsbCBkaXNjb250aW51ZSBvciByZWR1Y2Ugc2VydmljZSB0byB0aGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIHRvIHRoZSBleHRlbnQgdGhhdCBkZWxpdmVyaWVzIGZvciB0cmFuc21pc3Npb24gYXJlIGRpc2NvbnRpbnVlZCBvciByZWR1Y2VkIGF0IHRoZSBSZWdpb25hbCBQb2ludChzKSBvZiBSZWNlaXB0LiAgDQpccGFyIA0KXHBhciAoYykgIFdoZXJlIHJlcXVpcmVkLCBDdXJ0YWlsbWVudHMgb3IgSW50ZXJydXB0aW9ucyB3aWxsIGJlIG1hZGUgb24gYSBub24tZGlzY3JpbWluYXRvcnkgYmFzaXMgdG8gdGhlIHRyYW5zYWN0aW9uKHMpIHRoYXQgZWZmZWN0aXZlbHkgcmVsaWV2ZSB0aGUgY29uc3RyYWludDsgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkNDYxMjc3NCBwcm92aWRlZH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxpbnNyc2lkNDYxMjc3NCAsIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgaG93ZXZlcn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQosIHRoYXQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2Ugc2hhbGwgYmUgc3Vib3JkaW5hdGUgdG8gZmlybSB0cmFuc21pc3Npb24gc2VydmljZSBwcm92aWRlZCB0byBOYXRpdmUgTG9hZCBDdXN0b21lcnMsIGN1c3RvbWVycyB0YWtpbmcgRmlybSBQb2ludC10by1Qb2ludA0KIHRyYW5zbWlzc2lvbiBzZXJ2aWNlIGFuZCBOZXR3b3JrIEN1c3RvbWVycyB1bmRlciB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgbm90IFJlZ2lvbmFsIFRyYW5zYWN0aW9ucy4gIElmIG11bHRpcGxlIHRyYW5zYWN0aW9ucyByZXF1aXJlIEN1cnRhaWxtZW50IG9yIEludGVycnVwdGlvbiwgdG8gdGhlIGV4dGVudCBwcmFjdGljYWJsZSBhbmQgY29uc2lzdGVudCB3aXRoIEdvb2QgVXRpbGl0eSBQcmFjdGljZSwgQ3VydGFpbG1lbnRzIG9yIEludGVycnVwDQp0aW9ucyB3aWxsIGJlIG1hZGUgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBwcm9kdWN0IHR5cGUgcHJpb3JpdHkgcnVsZXMgZXN0YWJsaXNoZWQgaW4gdGhlIFJUUHNccnF1b3RlICBPQVRUcy4gIFRoZSBSVFBzIHdpbGwgcHJvdmlkZSBhZHZhbmNlIG5vdGljZSBvZiBDdXJ0YWlsbWVudCBvciBJbnRlcnJ1cHRpb24gd2hlcmUgc3VjaCBub3RpY2UgY2FuIGJlIHByb3ZpZGVkIGNvbnNpc3RlbnQgd2l0aCBHb29kIFV0aWxpdHkgUHJhY3RpY2UuDQoNClxwYXIgDQpccGFyIChkKSAgTm8gY3JlZGl0IHdpbGwgYmUgZ2l2ZW4gdG8gVHJhbnNtaXNzaW9uIEN1c3RvbWVycyBhZmZlY3RlZCBieSBDdXJ0YWlsbWVudHMgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTYyMTMwNzcgb3IgSW50ZXJydXB0aW9ucyB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IG9mIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlLiANClxwYXIgfVxwYXJkIFxsdHJwYXJcczYyXHFqIFxsaTBccmkwXHdpZGN0bHBhclx0cWNcdHg0NjgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMyIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGxhbmcwXGxhbmdmZTBcbGFuZ25wMFxsYW5nZmVucDBcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiAzLjVcdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyXHMyXHFsIFxmaTcyMFxsaTBccmkwXHNhMjQwXHdpZGN0bHBhcg0KXHR4MTQ0MFx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANCkNsYXNzaWZpY2F0aW9uIG9mIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHMzXHFsIFxmaTE0NDBcbGkwXHJpMFxzYTI0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xvdXRsaW5lbGV2ZWwyXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIA0Ke1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0IChhKVx0YWIgRHVlIHRvIHRoZSBzaG9ydCB0ZXJtLCBub24tZmlybSBuYXR1cmUgb2YgdGhlIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlLCB0aGUgVHINCmFuc21pc3Npb24gQ3VzdG9tZXIgdGFraW5nIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIG1heSBub3QgY2hhbmdlIGl0cyBSZWdpb25hbCBQb2ludChzKSBvZiBSZWNlaXB0IG9yIFBvaW50KHMpIG9mIERlbGl2ZXJ5IHRvIG9idGFpbiBhbHRlcm5hdGl2ZSBzZXJ2aWNlIG9uIGEgbm9uXF8NCmZpcm0gYmFzaXMuICBUcmFuc21pc3Npb24gQ3VzdG9tZXJzIG1heSBub3QgcmVkaXJlY3QsIHJlc2VsbCwgcm9sbG92ZXIgb3IgY29udmVydCBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZS4NClxwYXIgfVxwYXJkIFxsdHJwYXJcczNccWwgXGZpMTQ0MFxsaTBccmkwXHNhMjQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDJcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMTA0MjM4OTIge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMTMyMDIzMTUgKGIpXHRhYiANClRoZSBQYWxvIFZlcmRlL0hhc3NheWFtcGEgQ29tbW9uIEJ1cyB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBzaW5nbGUgUmVnaW9uYWwgUG9pbnQgb2YgUmVjZWlwdCBhbmQgYXMgYSBzaW5nbGUgUmVnaW9uYWwgUG9pbnQgb2YgRGVsaXZlcnkgZm9yIHRyYW5zYWN0aW9ucyBzY2hlZHVsZWQgdG8gb3IgZnJvbSBzdWNoIENvbW1vbiBCdXN9e1xydGxjaFxmY3MxIFxhYlxhZjAgXGx0cmNoXGZjczAgDQpcYjBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQxMzIwMjMxNSAufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDEwNDIzODkyIA0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFx0YWIgXHRhYiAoYylcdGFiIFRoZSBUcmFuc21pc3Npb24gUHJvdmlkZXIgc2hhbGwgDQpwcm92aWRlIGRlbGl2ZXJpZXMgb2YgY2FwYWNpdHkgYW5kIGVuZXJneSBmcm9tIHRoZSBSZWdpb25hbCBQb2ludChzKSBvZiBSZWNlaXB0IHRvIHRoZSBSZWdpb25hbCBQb2ludChzKSBvZiBEZWxpdmVyeSBvbiBhIG5vbi1maXJtIGJhc2lzIG9ubHkuICBSZWdpb25hbCBQb2ludHMgb2YgUmVjZWlwdCBhbmQgY29ycmVzcG9uZGluZyBjYXBhY2l0eSByZXNlcnZhdGlvbnMgc2hhbGwgYmUgYXMgbXV0dWFsbHkgYWdyZWVkIHVwb24gYnkgdGhlIFJUUHMNCiBmb3IgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkODA5ODY3ICB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0ICBUaGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyXHJxdW90ZSANCnMgcmVzZXJ2ZWQgY2FwYWNpdHkgc2hhbGwgYmUgdGhlIGdyZWF0ZXIgb2YgZWl0aGVyICgxKSB0aGUgc3VtIG9mIHRoZSBjYXBhY2l0eSByZXNlcnZhdGlvbnMgYXQgdGhlIFJlZ2lvbmFsIFBvaW50KHMpIG9mIFJlY2VpcHQsIG9yICgyKSB0aGUgc3VtIG9mIHRoZSBjYXBhY2l0eSByZXNlcnZhdGlvbnMgYXQgdGhlIFJlZ2lvbmFsIFBvaW50DQoocykgb2YgRGVsaXZlcnkuICBUaGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIHdpbGwgYmUgYmlsbGVkIGZvciBpdHMgcmVzZXJ2ZWQgY2FwYWNpdHkuICBUaGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIG1heSBub3QgZXhjZWVkIGl0cyBjYXBhY2l0eSByZXNlcnZlZCBhdCBlYWNoIFJlZ2lvbmFsIFBvaW50IG9mIFJlY2VpcHQgYW5kIGVhY2ggUmVnaW9uYWwgUG9pbnQgb2YgRGVsaXZlcnkuDQpccGFyIA0KXHBhciBcdGFiIFx0YWIgKGQpXHRhYiBFbGlnaWJsZSBDdXN0b21lcnMgcmVxdWVzdGluDQpnIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIGZvciB0aGUgdHJhbnNtaXNzaW9uIG9mIHBvd2VyIGRvIHNvIHdpdGggdGhlIGZ1bGwgcmVhbGl6YXRpb24gdGhhdCBzdWNoIHNlcnZpY2UgaXMgc3ViamVjdCB0byBhdmFpbGFiaWxpdHkgYW5kIHRvIEN1cnRhaWxtZW50IG9yIEludGVycnVwdGlvbiB1bmRlciB0aGUgdGVybXMgb2YgdGhpcyBSZWdpb25hbCBUYXJpZmYuDQpccGFyIA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxzMiBccnRsY2hcZmNzMSBcYWYwXGFmczIwIFxsdHJjaFxmY3MwIFxiXGY0MlxsYW5nMFxsYW5nZmUwXGxhbmducDBcbGFuZ2ZlbnAwXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgMy42XHRhYn19XHBhcmRccGxhaW4gXGx0cnBhclxzMlxxbCBcZmk3MjBcbGkwXHJpMFxzYTI0MFx3aWRjdGxwYXINClx0eDE0NDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBXaXRoZHJhd2FsfXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGNzMTlcZGJjaFxhZjEzXGNoYXJzY2FsZXgwXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmMFxkYmNoXGFmMTNcbG9jaFxmMCAgYW5kIFRlcm1pbmF0aW9uIG9mIHRoZSBSZWdpb25caGljaFxhZjBcZGJjaFxhZjEzXGxvY2hcZjAgYWwgVGFyaWZmfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxjczE5XGIwXGRiY2hcYWYxM1xjaGFyc2NhbGV4MFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczYyXHFsIFxmaTcyMFxsaTBccmkwXHdpZGN0bHBhclx0eDE0NDBcdHgyMTYwXHRxY1x0eDQ2ODBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXHRhYiAoYSlcdGFiIA0KVGhlIFRyYW5zbWlzc2lvbiBQcm92aWRlciBtYXkgd2l0aGRyYXcgdGhpcyBSZWdpb25hbCBUYXJpZmYsIGFuZCBhbnkgb3RoZXIgUlRQIG1heSB3aXRoZHJhdyBpdHMgUmVnaW9uYWwgVGFyaWZmLCAoaSkgYXQgYW55IHRpbWUgcHJpb3IgdG8gdGhlIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE3MjY5MjAgRWZmZWN0aXZlfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANCiBEYXRlLCBhdCB0aGUgc29sZSBkaXNjcmV0aW9uIG9mIHRoZSBUcmFuc21pc3Npb24gUHJvdmlkZXIgb3IgdGhlIFJUUCwgcmVzcGVjdGl2ZWx5OyAoaWkpIGF0IGFueSB0aW1lIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxOVxkYmNoXGFmMTNcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWYwXGRiY2hcYWYxM1xsb2NoXGYwIChlaXRoZXIgYmVmb3JlLCBvbiBvciBhZnRlciB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGNzMTlcZGJjaFxhZjEzXGluc3JzaWQxNzI2OTIwIFxoaWNoXGFmMFxkYmNoXGFmMTNcbG9jaFxmMCBFZmZlY3RpdmV9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNzMTlcZGJjaFxhZjEzXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmMFxkYmNoXGFmMTNcbG9jaFxmMCAgRGF0ZSksIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpkdWUgdG8gdGhlIG9jY3VycmVuY2Ugb3IgbWF0ZXJpYWwgcmlzayBvZiBhZHZlcnNlIHJlZ3VsYXRvcnkgYWN0aW9uIChzdWJqZWN0IHRvIGFueSBvYmxpZ2F0aW9ucyBpbmN1cnJlZCBmb3IgdHJhbnNhY3Rpb25zIGFscmVhZHkgY29uc3VtbWF0ZWQgdW5kZXIgdGhlIFJlZ2lvbmFsIFRhcmlmZiBpbiB3aGljaCB0aGUgd2l0aGRyYXdpbmcgVHINCmFuc21pc3Npb24gUHJvdmlkZXIgb3Igb3RoZXIgUlRQIHBhcnRpY2lwYXRlZCksIGFzIGRldGVybWluZWQgaW4gdGhlIHNvbGUgZGlzY3JldGlvbiBvZiB0aGUgVHJhbnNtaXNzaW9uIFByb3ZpZGVyIG9yIG90aGVyIFJUUCwgaW5jbHVkaW5nLCBidXQgbm90IGxpbWl0ZWQsIHRvLCBjb25kaXRpb25zIHRoYXQgbWF5IGJlIGltcG9zZWQgYnkgdGhlIENvbW1pc3Npb259e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaW5zcnNpZDE2MDYyODg2ICBvciBhbnkgb3RoZXIgZ292ZXJubWVudGFsIGF1dGhvcml0eX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxOVxkYmNoXGFmMTNcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWYwXGRiY2hcYWYxM1xsb2NoXGYwICwgb3IgYXMgYSByZVxoaWNoXGFmMFxkYmNoXGFmMTNcbG9jaFxmMCBzdWx0IG9mIGludGVydmVub3IgYWN0aW9uIG9yIGEgY29tcGxhaW50LH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxjczE5XGRiY2hcYWYxM1xpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDMzNjczNSBcaGljaFxhZjBcZGJjaFxhZjEzXGxvY2hcZjAgIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpvbiB0aGUgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UsIHN1Y2ggYXMgc3ViamVjdGluZyB0aGUgcmF0ZXMsIHRyYW5zbWlzc2lvbiByZXZlbnVlIHJlcXVpcmVtZW50cyBvciBjb3N0cyBvZiBhIE5vbi1KdXJpc2RpY3Rpb25hbCBSVFAgdG8gcmV2aWV3IHVuZGVyIHRoZSBGZWRlcmFsIFBvd2VyIEFjdCwgZWl0aGVyIGRpcmVjdGx5IG9yIGluZGlyZWN0bHksIG9yIHN1DQpiamVjdGluZyBhbiBSVFAgdG8gcmVmdW5kcyBvciB0aGUgcG9zc2liaWxpdHkgdGhlcmVvZiwgb3IgKGlpaSkgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTYwNjI4ODYgZm9yIGFueSByZWFzb24gYW5kIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQphdCB0aGUgc29sZSBkaXNjcmV0aW9uIG9mIHRoZSB3aXRoZHJhd2luZyBSVFAsIHVwb24gbmluZXR5ICg5MCkgZGF5cyBwcmlvciB3cml0dGVuIG5vdGljZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxNjA2Mjg4NiB0byB0aGUgb3RoZXIgUlRQcyB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IGVmZmVjdGl2ZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaW5zcnNpZDE2MDYyODg2IGF0IGFueSB0aW1lIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDk2NDQ3NDQgZm9sbG93aW5nIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgdGhlIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE3MjY5MjAgRWZmZWN0aXZlfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCAgRGF0ZS59ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDgwOTg2NyAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTU5NTc5MzggIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE1OTU3OTM4XGNoYXJyc2lkMzM2NzM1IEl0IHNoYWxsIGJlIA0KYSBjb25kaXRpb24gcHJlY2VkZW50IHRvIHRoZSBlZmZlY3RpdmVuZXNzIG9mIGFueSB3aXRoZHJhd2FsIHRoYXQgdGhlIHdpdGhkcmF3aW5nIFRyYW5zbWlzc2lvbiBQcm92aWRlciBvciBvdGhlciBSVFAgcGF5IGFsbCBhbW91bnRzIGR1ZSBhbmQgcGF5YWJsZSB1bmRlciB0aGlzIFJlZ2lvbmFsIFRhcmlmZiBwcmlvciB0byBzdWNoIHdpdGhkcmF3YWwufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMzM2NzM1ICAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDQ2MDQ2MzkgVGhlIFRyYW5zbWlzc2lvbiBQcm92aWRlciBhY2tub3dsZWRnZXMgYW5kIGFncmVlcyB0aGF0IHRoaXMgUmVnaW9uYWwgVGFyaWZmIHdpbGwgY29udGludWUgaW4gZWZmZWN0fXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTM5MDY2MDUgDQogYXMgdG8gb3RoZXIgUlRQc317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ0NjA0NjM5ICBub3R3aXRoc3RhbmRpbmcgdGhlIHdpdGhkcmF3YWwgb2Ygb25lIG9yIG1vcmUgb3RoZXIgUlRQcy59e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9XHBhcmQgXGx0cnBhclxzNjJccWogXGZpNzIwXGxpMFxyaTBcd2lkY3RscGFyXHR4MTQ0MFx0eDIxNjBcdHFjXHR4NDY4MFx3cmFwZGVmYXVsdFxoeXBocGFyMFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhYlxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eC03MjBcdHgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkODA5ODY3IFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcdGFiIChiKSBcdGFiIFRoaXMgUmVnaW9uYWwgVGFyaWZmIHdpbGwgYmUgaW4gZWZmZWN0IH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwNDIzODkyIA0KdW50aWwgdGhlIFRyYW5zbWlzc2lvbiBQcm92aWRlciBhbmQgdGhlIG90aGVyIFJUUHMgbXV0dWFsbHkgYWdyZWUgdG8gdGVybWluYXRlIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIG9yIHRoZSBUcmFuc21pc3Npb24gUHJvdmlkZXIgaGFzIHdpdGhkcmF3biB0aH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEzOTA2NjA1IGlzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTA0MjM4OTIgDQogUmVnaW9uYWwgVGFyaWZmIGluIGFjY29yZGFuY2Ugd2l0aCBpdHMgdGVybXN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IC4gIA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ4MDk4NjcgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMxIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgQXJ0aWNsZSBJVi5cdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyDQpcczFccWMgXGxpMFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxvdXRsaW5lbGV2ZWwwXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGtlcm5pbmczMlxjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcbGluZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBUZXJtcw0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxzMiBccnRsY2hcZmNzMSBcYWYwXGFmczIwIFxsdHJjaFxmY3MwIFxiXGY0MlxsYW5nMFxsYW5nZmUwXGxhbmducDBcbGFuZ2ZlbnAwXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgNC4xXHRhYn19XHBhcmRccGxhaW4gXGx0cnBhclxzMlxxbCBcZmk3MjBcbGkwXHJpMFx3aWRjdGxwYXINClx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBHZW5lcmFsIENvbmRpdGlvbnMNClxwYXIgfVxwYXJkIFxsdHJwYXJcczJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZCBcbHRycGFyXHMyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eDcyMFx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0IFx0YWIgVGhlIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDExNTM3OTYxIA0KVHJhbnNtaXNzaW9uIFByb3ZpZGVyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgd2lsbCBwcm92aWRlIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIG92ZXIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkMTE1Mzc5NjEgaXRzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NCAgVA0KcmFuc21pc3Npb24gU3lzdGVtIHRvIGFueSBFbGlnaWJsZSBDdXN0b21lciB0aGF0IGhhcyBtZXQgdGhlIHJlcXVpcmVtZW50cyBvZiB0aGlzIFJlZ2lvbmFsIFRhcmlmZi4NClxwYXIgfVxwYXJkIFxsdHJwYXJcczJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMyIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGxhbmcwXGxhbmdmZTBcbGFuZ25wMFxsYW5nZmVucDBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4MjIwNDIxIFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgNC4yXHRhYn19XHBhcmQgXGx0cnBhclxzMlxxbCBcZmk3MjBcbGkwXHJpMFx3aWRjdGxwYXINClx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY2YxXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkODIyMDQyMSBDYWxjdWxhdGlvbn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQogb2YgQXZhaWxhYmxlIFRyYW5zZmVyIENhcGFiaWxpdHkNClxwYXIgfVxwYXJkIFxsdHJwYXJcczJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZCBcbHRycGFyXHMyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eDcyMFx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0IFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDcyMDYyNiBFYWNoIA0KfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDgyMjA0MjEgUlRQIHNoYWxsIGNhbGN1bGF0ZSB0aGUgQXZhaWxhYmxlIFRyYW5zZmVyIENhcGFiaWxpdHkgKFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXHVsXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkODIyMDQyMSBBVEN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcYjBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4MjIwNDIxIFwnOTQpIGNvbnNpc3RlbnQgd2l0aCB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxjZjFcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4MjIwNDIxIGFwcGxpY2FibGUgcmVxdWlyZW1lbnRzIG9mIHRoZSBSZWxpYWJpbGl0eSBTdGFuZGFyZHMgYWRvcHRlZCBieSB0aGUgTm9ydGggfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGIwXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkODIyMDQyMSBBbWVyaWNhbiBFbGVjdHJpYyBSZWxpYWJpbGl0eSBDb3Jwb3JhdGlvbiBhbmQgaW4gYWNjb3JkYW5jZSB3aXRoIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ3MjA2MjYgaXRzIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4MjIwNDIxIE9BVFQufXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGIwXGNmMVxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDgyMjA0MjEgDQpccGFyIH1ccGFyZCBcbHRycGFyXHMyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxzMiBccnRsY2hcZmNzMSBcYWYwXGFmczIwIFxsdHJjaFxmY3MwIFxiXGY0MlxsYW5nMFxsYW5nZmUwXGxhbmducDBcbGFuZ2ZlbnAwXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgNC4zXHRhYn19XHBhcmQgXGx0cnBhclxzMlxxbCBcZmk3MjBcbGkwXHJpMFx3aWRjdGxwYXINClx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgUmVhbCBQb3dlciBMb3NzZXMNClxwYXIgfVxwYXJkIFxsdHJwYXJcczJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZCBcbHRycGFyXHMyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eDcyMFx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0IFx0YWIgDQpMb3NzZXMgd2lsbCBiZSBiYXNlZCBvbiB0cmFuc2FjdGlvbnMgYWNyb3NzIGVhY2ggVHJhbnNtaXNzaW9uIFN5c3RlbSB1c2VkIGluIHRoZSBSZWdpb25hbCBUcmFuc2FjdGlvbiwgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkOTE4MzMwOSBhcyBwcm92aWRlZCBpbiBTZWN0aW9uIDcuMShlKSBoZXJlb2YsIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDEzOTE1Mzg4IGFuZCB9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgd2lsbCBiZSBtb25ldGl6ZWQgYXQgdGhlIHJhdGUgcHVibGlzaGVkIGluIHRoZSBJQ0UgUGFsbyBWZXJkZSBGaW5hbmNpYWwgUGVhayBEYWlseSBFbGVjdHJpY2l0eSBQcmljZSBJbmRleCBvciBJQ0UgUGFsbyBWZXJkZSBGaW5hbmNpYWwgT2ZmLVBlYWsgRGFpbHkgRWxlY3RyaWNpdHkgUHJpY2UgSW5kZXggKFwnOTNQYWxvIFZlcmRlIEluZGV4XCc5NA0KKSBmb3IgdGhlIHRyYWRlIGRhdGUgb2YgdGhlIHRyYW5zYWN0aW9uLCBhbmQgd2lsbCBiZSBwYWlkIGZvciBieSB0aGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyLg0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzNjJccWwgXGxpMFxyaTBcc2EyNDBcd2lkY3RscGFyXHR4NzIwXHRxY1x0eDQ2ODBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMxIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgQXJ0aWNsZSBWLlx0YWJ9fVxwYXJkXHBsYWluIFxsdHJwYXINClxzMVxxYyBcbGkwXHJpMFxzYTI0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXG91dGxpbmVsZXZlbDBcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNca2VybmluZzMyXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFxsaW5lIFRyYW5zbWlzc2lvbiBDdXN0b21lciBSZXNwb25zaWJpbGl0aWVzIA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxzMiBccnRsY2hcZmNzMSBcYWYwXGFmczIwIFxsdHJjaFxmY3MwIFxiXGY0MlxsYW5nMFxsYW5nZmUwXGxhbmducDBcbGFuZ2ZlbnAwXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgNS4xXHRhYn19XHBhcmRccGxhaW4gXGx0cnBhclxzMlxxbCBcZmk3MjBcbGkwXHJpMFxzYTI0MFx3aWRjdGxwYXINClx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANCkNvbmRpdGlvbnMgUmVxdWlyZWQgb2YgVHJhbnNtaXNzaW9uIEN1c3RvbWVycw0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzNjJccWwgXGZpNzIwXGxpMFxyaTBcc2EyNDBcd2lkY3RscGFyXHRxY1x0eDQ2ODBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIA0KXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2Ugc2hhbGwgYmUgcHJvdmlkZWQgYnkgdGhlIFJUUHMgb25seSBpZiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIHNhdGlzZmllZCBieSB0aGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyOiANClxwYXIgfVxwYXJkIFxsdHJwYXJcczYyXHFsIFxmaTE0NDBcbGkwXHJpMFxzYTI0MFx3aWRjdGxwYXJcdHgyMTYwXHRxY1x0eDQ2ODBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCAoYSlcdGFiIFx0YWIgDQpUaGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIGhhcyBzdWJtaXR0ZWQgYSByZXF1ZXN0IGZvciBzZXJ2aWNlIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaVxpbnNyc2lkNDYxMjc3NCB2aWF9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0ICB0aGUgd2VzVFRyYW5zLm5ldCBPQVNJUyBzaXRlOyANClxwYXIgKGIpXHRhYiBUaGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIHF1YWxpZmllcyBhcyBhbiBFbGlnaWJsZSBDdXN0b21lciBhcyBkZWZpbmVkIGluIHRoaXMgUmVnaW9uYWwgVGFyaWZmLCB3aGljaCBpbmNsdWRlcyBzYXRpc2Z5aW5nIHRoZSBjcmVkaXR3b3J0aGluZXNzIGNyaXRlcmlhIGFzIGRlZmluZWQgaW4gfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDcyMDYyNiB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IE9BVFR9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NzIwNjI2ICBvZiBlYWNoIFJUUCB0aGF0IHdpbGwgcHJvdmlkZSB0aGUgdHJhbnNtaXNzaW9uIHNlcnZpY2V9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IDsNClxwYXIgKGMpXHRhYiBUaGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIGhhcyBhcnJhbmdlbWVudHMgaW4gcGxhY2UgZm9yIGFueSBvdGhlciB0cmFuc21pc3Npb24gc2VydmljZSBuZWNlc3NhcnkgdG8gZWZmZWN0IHRoZSBkZWxpdmVyeSBmcm9tIHRoZSBnZW5lcmF0aW5nIHNvdXJjZSB0byB0aGUgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFN5c3RlbSBwcmlvciB0byB0aGUgdGltZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBjb21tZW5jZXM7IA0KDQpccGFyIChkKVx0YWIgVGhlIFRyYW5zbWlzc2lvbiBDdXN0b21lciBoYXMgZXhlY3V0ZWQgYSBTZXJ2aWNlIEFncmVlbWVudCB3aXRoIHRoZSBUcmFuc21pc3Npb24gUHJvdmlkZXIgYW5kIGVhY2ggb3RoZXIgUlRQIHdob3NlIFRyYW5zbWlzc2lvbiBTeXN0ZW0gd2lsbCBiZSB1c2VkIGZvciB0aGUgUmVnaW9uYWwgVHJhbnNhY3Rpb247IA0KXHBhciAoZSlcdGFiIElmIHRoZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBpcyB0byBiZSB1c2VkIHRvIHNlcnZlIGxvYWQgd2l0aGluIHRoZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ3Njk3NjgwXGNoYXJyc2lkNDYwNDYzOSBCYWxhbmNpbmcgQXV0aG9yaXR5IH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ0NjA0NjM5IEFyZWF9e1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgIG9mIGFuIFJUUCwgdGhlIFRyYW5zbWlzc2lvbiBDdXN0b21lciBzYXRpc2ZpZXMgYW55IHJlcXVpcmVtZW50cyBmb3IgYW5jaWxsYXJ5IHNlcnZpY2VzIHVuZGVyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ0NzU1MTYgU2NoZWR1bGVzIDMtNn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgIG9mIHRoYXQgUg0KVFBccnF1b3RlIHMgT0FUVH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDYwNDA3NjEgIChhcyB0aGUgc2FtZSBtYXkgYmUgYW1lbmRlZCBvciByZXZpc2VkIGZyb20gdGltZSB0byB0aW1lKX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgOyBhbmQNClxwYXIgKGYpXHRhYiBJZiB0aGUgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgaXMgdG8gYmUgdXNlZCB0byBkZWxpdmVyIGVuZXJneSBmcm9tIGEgZ2VuZXJhdG9yIGxvY2F0ZWQgd2l0aGluIGFuIFJUUFxycXVvdGUgcyB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ3Njk3NjgwIEJhbGFuY2luZyBBdXRob3JpdHkgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANCkFyZWEgdG8gbG9hZCBvdXRzaWRlIHRoYXQgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNzY5NzY4MCBCYWxhbmNpbmcgQXV0aG9yaXR5IH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgQXJlYSwgdGhlIFRyYW5zbWlzc2lvbiBDdXN0b21lciBzYXRpc2ZpZXMgYW55IHJlcXVpcmVtZW50cyBmb3IgR2VuZXJhdG9yIEltYmFsYW5jZSBTZXJ2aWNlIHVuZGVyIH17XHJ0bGNoXGZjczEgDQpcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDQ3NTUxNiBTY2hlZHVsZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNmMVxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDMzNjczNSA5fXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCAgb2YgdGhhdCBSVFBccnF1b3RlIHMgT0FUVH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDYwNDA3NjEgDQogKGFzIHRoZSBzYW1lIG1heSBiZSBhbWVuZGVkIG9yIHJldmlzZWQgZnJvbSB0aW1lIHRvIHRpbWUpfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCAuDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMyIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcZjQyXGxhbmcwXGxhbmdmZTBcbGFuZ25wMFxsYW5nZmVucDBcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiA1LjJcdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyXHMyXHFsIFxmaS0xMDgwXGxpMTgwMFxyaTBca2VlcFxrZWVwblx3aWRjdGxwYXINClx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczEyXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4xODAwXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwXGFmczI0IFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANCkNvbmRpdGlvbnMgQXBwbGljYWJsZSB0byBSVFBzIHdobyBPd24gRmFjaWxpdGllcyBGaW5hbmNlZCBieSBMb2NhbCBGdXJuaXNoaW5nIEJvbmRzIG9yIE90aGVyIFRheC1FeGVtcHQgQm9uZHMNClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4LTcyMFx3cmFwZGVmYXVsdFxoeXBocGFyMFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMgew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczYyXHFsIFxmaTcyMFxsaTBccmkwXHNhMjQwXHdpZGN0bHBhclx0cWNcdHg0NjgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMTE1NDg3MjggXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgDQpcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBJbiBhZGRpdGlvbiB0byB0aGUgY29uZGl0aW9ucyBpbiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQ0NjEyNzc0IFNlY3Rpb24gNS4xfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANCiwgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2Ugc2hhbGwgYmUgcHJvdmlkZWQgYnkgdGhlIFJUUHMgb25seSBpZiBFbGlnaWJsZSBDdXN0b21lcnMgcmVxdWVzdGluZyBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBjb21wbHkgd2l0aCBhbGwgc3BlY2lhbCByZXF1aXJlbWVudHMgKH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaVxpbnNyc2lkNDYxMjc3NCBlLmd9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaW5zcnNpZDQ2MTI3NzQgLiwgDQpUd28gQ291bnR5IEZ1cm5pc2hpbmcgQm9uZCByZXF1aXJlbWVudHMpIGFwcGxpY2FibGUgdG8gdGhlIFJUUHMgdGhhdCBvd24gdHJhbnNtaXNzaW9uLCBkaXN0cmlidXRpb24gb3IgZ2VuZXJhdGlvbiBmYWNpbGl0aWVzIGZpbmFuY2VkIGJ5IGxvY2FsIGZ1cm5pc2hpbmcgYm9uZHMgb3Igb3RoZXIgdGF4LWV4ZW1wdCBib25kcywgd2hpY2ggc3BlY2lhbCByZXF1aXJlbWVudHMgYXJlIHNwZWNpZmllZCBpbiB0aGUgUlRQc1xycXVvdGUgIE9BVFRzLn0NCntccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTQzMTIxMzYgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMxIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgQXJ0aWNsZSBWSS5cdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyDQpcczFccWMgXGxpMFxyaTBcc2EyNDBca2VlcG5cd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxvdXRsaW5lbGV2ZWwwXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDMzNjczNSBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGxhbmcxMDMzXGxhbmdmZTEwMzNca2VybmluZzMyXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFxsaW5lIFByb2NlZHVyZXMgZm9yIEFycmFuZ2luZyBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSANClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBcczIgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMCBcbHRyY2hcZmNzMCBcYlxmNDJcbGFuZzBcbGFuZ2ZlMFxsYW5nbnAwXGxhbmdmZW5wMFxpbnNyc2lkNDYxMjc3NCBcaGljaFxhZjQyXGRiY2hcYWYwXGxvY2hcZjQyIDYuMVx0YWJ9fVxwYXJkXHBsYWluIFxsdHJwYXJcczJccWwgXGZpNzIwXGxpMFxyaTBcc2EyNDBca2VlcG5cd2lkY3RscGFyDQpcdHgxODAwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxpbHZsMVxvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxjZ3JpZCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpSZXNlcnZhdGlvbiBvZiBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZQ0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFxzYTI0MFxrZWVwblx3aWRjdGxwYXJcdHgtMTQ0MFx0eC03MjBcdHgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNjcwNDkzOCBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ1NjAzMDA3IA0KUmVxdWVzdHMgZm9yIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIHNoYWxsIGJlIHN1Ym1pdHRlZCBubyBlYXJsaWVyIHRoYW4gMDcwMCBNU1Qgb2YgdGhlIGRheSBiZWZvcmUgdGhlIHJlcXVlc3RlZCBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBpcyB0byBjb21tZW5jZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IGFuZCB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ1NjAzMDA3IG11c3QgYmUgcmVjZWl2ZWQgbm8gbGF0ZXIgdGhhbiAxNDAwIE1TVCB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IG9mIHN1Y2ggZGF5LiAgUmVxdWVzdHMgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDU2MDMwMDcgDQpmb3IgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2Ugc3VibWl0dGVkIGFmdGVyIDE0MDAgTVNUIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgb2Ygc3VjaCBkYXkgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDU2MDMwMDcgd2lsbCBiZSBhY2NvbW1vZGF0ZWQgaWYgcHJhY3RpY2FibGUuIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxpbnNyc2lkNDYxMjc3NCANClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBcczIgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMCBcbHRyY2hcZmNzMCBcYlxmNDJcbGFuZzBcbGFuZ2ZlMFxsYW5nbnAwXGxhbmdmZW5wMFxpbnNyc2lkNDYxMjc3NCBcaGljaFxhZjQyXGRiY2hcYWYwXGxvY2hcZjQyIDYuMlx0YWJ9fVxwYXJkXHBsYWluIFxsdHJwYXJcczJccWwgXGZpLTEwODBcbGkxODAwXHJpMFxzYTI0MFxrZWVwblx3aWRjdGxwYXINClx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4xODAwXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClByb2Nlc3Npbmcgb2YgUmVxdWVzdHMgZm9yIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIHRoYXQgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTQ3NTI3MzQgV317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgb3VsZCB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxNDc1MjczNCBCfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGluc3JzaWQ0NjEyNzc0IGUgbW9yZSBFeHBlbnNpdmUgdGhhbiBTZXJ2aWNlIHVuZGVyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE0NzUyNzM0IEl9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IG5kaXZpZHVhbCBPQVRUcw0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ2NzA0OTM4IFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANCklmIHRoZSBXZXN0Q29ubmVjdCBEZWFsIFdpemFyZCBpbmRpY2F0ZXMgdGhhdCBhIHByb3Bvc2VkIFJlZ2lvbmFsIFRyYW5zYWN0aW9uIGlzIG1vcmUgZXhwZW5zaXZlIGF0IHRoZSBSZWdpb25hbCBSYXRlIHRoYW4gaXQgd291bGQgYmUgdW5kZXIgdGhlIGNvbWJpbmVkIE9BVFQgcmF0ZXMgb2YgdGhlIFJUUHMgdGhhdCB3b3VsZCBwcm92aWRlIHRoZSByZXF1ZXN0ZWQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgXGVuZGFzaCAgaS5lfXsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMzM2NzM1IC4sIGlmIHRoZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NTQ2Nzk2IFdlc3R9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwNzM3OSBDfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDU0Njc5NiBvbm5lY3R9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaW5zcnNpZDQ1NDY3OTZcY2hhcnJzaWQzMzY3MzUgIFJlZ2lvbmFsIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ1NDY3OTYgVHJhbnNtaXNzaW9uIFNlcnZpY2Ugc29mdHdhcmV9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMzM2NzM1ICBzaG93cyBhIG5lZ2F0aXZlIGFtb3VudH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ1NDY3OTYgIH17DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcZW5kYXNoIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ1NDY3OTYgIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQplYWNoIHNlZ21lbnQgb2YgdGhlIHJlcXVlc3RlZCB0cmFuc21pc3Npb24gcGF0aCB3aWxsIGJlIHByb2Nlc3NlZCBhcyBhIHRyYW5zbWlzc2lvbiBzZXJ2aWNlIHJlcXVlc3QgdW5kZXIgdGhlIHJlbGV2YW50IFJUUFxycXVvdGUgcyBpbmRpdmlkdWFsDQogT0FUVC4gIEEgbmV3IHN1Ym1pc3Npb24gb2YgdHJhbnNtaXNzaW9uIHNlcnZpY2UgcmVxdWVzdHMgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBlYWNoIG9mIHRoZSByZWxldmFudCBSVFBzIHdpbGwgbm90IGJlIHJlcXVpcmVkLiAgSW4gc3VjaCBjYXNlcywgZWFjaCByZXNlcnZlZCBzZWdtZW50IG9mIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIGJpbGxlZCBieSB0aGUgcmVsZXZhbnQgUlRQIGluZGl2aWR1YWxseSBpbiBhY2NvcmRhbmNlIHdpdGggaXQNCnMgT0FUVCwgYW5kIHdpbGwgbm90IGJlIGJpbGxlZCB1bmRlciB0aGlzIFJlZ2lvbmFsIFRhcmlmZi59e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMTQwMjY5MTAgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXGtlZXBuXHdpZGN0bHBhclx0eC0xNDQwXHR4LTcyMFx0eDBcd3JhcGRlZmF1bHRcaHlwaHBhcjBcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQzMzY3MzUge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMjE4MDYyNCAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGJcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMyIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGxhbmcwXGxhbmdmZTBcbGFuZ25wMFxsYW5nZmVucDBcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiA2LjNcdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyXHMyXHFsIFxmaTcyMFxsaTBccmkwXHNhMjQwXHdpZGN0bHBhcg0KXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGxzMjFcaWx2bDFcb3V0bGluZWxldmVsMVxhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxiXGZzMjRcY2dyaWQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KRGV0ZXJtaW5hdGlvbiBvZiBBdmFpbGFibGUgVHJhbnNmZXIgQ2FwYWJpbGl0eQ0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFxzYTI0MFx3aWRjdGxwYXJcdHgtMTQ0MFx0eC03MjBcdHgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCANClxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNjcwNDkzOCBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQpGb2xsb3dpbmcgcmVjZWlwdCBvZiBhIHRyYW5zbWlzc2lvbiBzZXJ2aWNlIHJlcXVlc3QsIGFsbCBSVFBzIHdpbGwgbWFrZSBhIGRldGVybWluYXRpb24gb24gYSBub24tZGlzY3JpbWluYXRvcnkgYmFzaXMgb2YgQVRDIHB1cnN1YW50IHRvIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDQ2MTI3NzQgU2VjdGlvbiA0LjJ9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IA0KLiAgU3VjaCBkZXRlcm1pbmF0aW9uIHNoYWxsIGJlIG1hZGUgYXMgc29vbiBhcyByZWFzb25hYmx5IHByYWN0aWNhYmxlIGFmdGVyIHJlY2VpcHQsIGJ1dCBub3QgbGF0ZXIgdGhhbiAzMCBtaW51dGVzIGFmdGVyIHJlY2VpcHQgb2YgdGhlIHRyYW5zbWlzc2lvbiBzZXJ2aWNlIHJlcXVlc3QuDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHMyIFxydGxjaFxmY3MxIFxhZjBcYWZzMjAgXGx0cmNoXGZjczAgXGJcZjQyXGxhbmcwXGxhbmdmZTBcbGFuZ25wMFxsYW5nZmVucDBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4MjIwNDIxIFxoaWNoXGFmNDJcZGJjaFxhZjBcbG9jaFxmNDIgNi40XHRhYn19XHBhcmRccGxhaW4gXGx0cnBhclxzMlxxbCBcZmk3MjBcbGkwXHJpMFxzYTI0MFx3aWRjdGxwYXINClx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIxXGlsdmwxXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDgyMjA0MjEgDQpTY2hlZHVsaW5nIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eC03MjBcdHgwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNjcwNDkzOCBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ1NjAzMDA3IFNjaGVkdWxlcyBmb3IgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgbXVzdCBiZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IHN1Ym1pdHRlZCB0byB0aGUgUlRQcyB9e1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ1NjAzMDA3IG5vIGxhdGVyIHRoYW4gMTQwMCBNU1Qgb2YgdGhlIGRheSBwcmlvciB0byB0aGUgZGF5IH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgb24gd2hpY2ggc3VjaCBzZXJ2aWNlIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ1NjAzMDA3IA0KaXMgdG8gY29tbWVuY2UuICBTY2hlZHVsZXMgZm9yIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIHN1Ym1pdHRlZCBhZnRlciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IHRoYXQgdGltZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkNTYwMzAwNyB3aWxsIGJlIGFjY29tbW9kYXRlZCBpZiBwcmFjdGljYWJsZS59e1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDgwOTg2NyAgIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ1NjAzMDA3IEhvdXItdG8taG91ciBzY2hlZHVsZXMgb2YgZW5lcmd5IHRvIGJlIGRlbGl2ZXJlZCBtdXN0IGJlIHN0YXRlZCBpbiBpbmNyZW1lbnRzIG9mIDEgbWVnYXdhdHQgcGVyIGhvdXIufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCAgIH17DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDgyMjA0MjEgU2NoZWR1bGluZyBjaGFuZ2VzIHdpbGwgYmUgcGVybWl0dGVkIHVwIHRvIDIwIG1pbnV0ZXMgYmVmb3JlIHRoZSBzdGFydCBvZiB0aGUgbmV4dCBjbG9jayBob3VyIHByb3ZpZGVkIHRoYXQgdGhlIERlbGl2ZXJpbmcgUGFydHkgYW5kIFJlY2VpdmluZyBQYXJ0eSBhbHNvIGFncmVlIHRvIHRoZSBzY2hlZHVsZSBtb2RpZmljYXQNCmlvbi4gIFRoZSBSVFBzIHBhcnRpY2lwYXRpbmcgaW4gYSBSZWdpb25hbCBUcmFuc2FjdGlvbiB3aWxsIGZ1cm5pc2ggdG8gdGhlIERlbGl2ZXJpbmcgUGFydHlccnF1b3RlIA0KcyBzeXN0ZW0gb3BlcmF0b3IgaG91ci10by1ob3VyIHNjaGVkdWxlcyBlcXVhbCB0byB0aG9zZSBmdXJuaXNoZWQgYnkgdGhlIFJlY2VpdmluZyBQYXJ0eSBhbmQgc2hhbGwgZGVsaXZlciB0aGUgY2FwYWNpdHkgYW5kIGVuZXJneSBwcm92aWRlZCBieSBzdWNoIHNjaGVkdWxlcyBvbiBhIG4NCm9uLWZpcm0gYmFzaXMuICBTaG91bGQgdGhlIFRyYW5zbWlzc2lvbiBDdXN0b21lciwgRGVsaXZlcmluZyBQYXJ0eSBvciBSZWNlaXZpbmcgUGFydHkgcmV2aXNlIG9yIHRlcm1pbmF0ZSBhbnkgc2NoZWR1bGUsIHN1Y2ggcGFydHkgc2hhbGwgaW1tZWRpYXRlbHkgbm90aWZ5IHRoZSBSVFBzIHByb3ZpZGluZyB0aGUgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgZm9yIHRoZSB0cmFuc2FjdGlvbiwgYW5kIHRoZSBSVFBzIHNoYWxsIGhhdmUgdA0KaGUgcmlnaHQgdG8gYWRqdXN0IGFjY29yZGluZ2x5IHRoZSBzY2hlZHVsZSBmb3IgY2FwYWNpdHkgYW5kIGVuZXJneSB0byBiZSByZWNlaXZlZCBhbmQgdG8gYmUgZGVsaXZlcmVkLn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQogIEEgUmVnaW9uYWwgVHJhbnNhY3Rpb24gY2FuIGJlIGFubnVsbGVkIGF0IHRoZSByZXF1ZXN0IG9mIHRoZSBUcmFuc21pc3Npb24gQ3VzdG9tZXIgb25seSBpZiBhbGwgb2YgdGhlIFJUUHMgdGhhdCB3b3VsZCBwYXJ0aWNpcGF0ZSBpbiB0aGUgUmVnaW9uYWwgVHJhbnNhY3Rpb24gYWdyZWUgdG8gYW5udWwgaXQuICBUcmFuc21pc3Npb24gQ3VzdG9tZXJzIHdpbGwgbm90IGJlIGNoYXJnZWQgZm9yIH17XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxpbnNyc2lkMTQ3NTI3MzQgYSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IHJlc2VydmF0aW9uIG9mIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE0NzUyNzM0IGlmIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgDQphbGwgb2YgdGhlIFJUUHMgdGhhdCB3b3VsZCBoYXZlIHBhcnRpY2lwYXRlZCBpbiBwcm92aWRpbmcgdGhlIHNlcnZpY2UgYWdyZWUgdG8gYW5udWwgaXQuDQpccGFyIA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxzMiBccnRsY2hcZmNzMSBcYWYwXGFmczIwIFxsdHJjaFxmY3MwIFxiXGY0MlxsYW5nMFxsYW5nZmUwXGxhbmducDBcbGFuZ2ZlbnAwXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkODU1MDMzOCBcaGljaFxhZjQyXGRiY2hcYWYwXGxvY2hcZjQyIDYuNVx0YWJ9fVxwYXJkXHBsYWluIFxsdHJwYXJcczJccWwgXGZpNzIwXGxpMFxyaTBcc2EyNDBcd2lkY3RscGFyDQpcdHgxODAwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxpbHZsMVxvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxjZ3JpZCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4NTUwMzM4IA0KVGFnZ2luZyBSZWdpb25hbCBUcmFuc2FjdGlvbnN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQ2NzA0OTM4IFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBSZWdpb25hbCBUcmENCm5zbWlzc2lvbiBTZXJ2aWNlIGlzIHRvIGJlIHV0aWxpemVkIGFuZCB0YWdnZWQgaW4gZWFjaCBjYXNlIGFjcm9zcyB0aGUgVHJhbnNtaXNzaW9uIFN5c3RlbXMgb2YgYWxsIG9mIHRoZSBSVFBzIGludm9sdmVkIGluIHRoZSBSZWdpb25hbCBUcmFuc2FjdGlvbi4gIEVhY2ggUmVnaW9uYWwgVHJhbnNhY3Rpb24gbXVzdCBiZSB0YWdnZWQgd2l0aCBhbiBFLVRhZyB0aGF0IGluY2x1ZGVzIGFsbCBzZWdtZW50cyBvZiB0aGUgUmVnaW9uYWwgVHJhbnNtaQ0Kc3Npb24gU2VydmljZSByZXNlcnZlZC4gIElmIGEgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIHRhZ3Mgb25seSBvbmUgb2YgdGhlIHNlZ21lbnRzIG9mIGEgcmVzZXJ2ZWQgcGF0aCwgdGhlIEUtVGFnIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgYSBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSB0YWcsIGFuZCB3aWxsIGJlIHByb2Nlc3NlZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGluZGl2aWR1YWwgfXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGluc3JzaWQxMTA5MjA2MyBSVFB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFxycXVvdGUgcyBPQVRULCB3aXRoIGFwcHJvcHJpYXRlIGFuY2lsbGFyeSBzZXJ2aWNlIGNoYXJnZXMgYW5kIGxvc3NlcyBiZWluZyBhc3Nlc3NlZC4gIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4NTUwMzM4IA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGRiY2hcYWYxM1xpbnNyc2lkNDYxMjc3NCANClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBcczEgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMCBcbHRyY2hcZmNzMCBcYlxmNDJcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWY0MlxkYmNoXGFmMFxsb2NoXGY0MiBBcnRpY2xlIFZJSS5cdGFifX1ccGFyZFxwbGFpbiBcbHRycGFyDQpcczFccWMgXGxpMFxyaTBcc2EyNDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxvdXRsaW5lbGV2ZWwwXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxsYW5nMTAzM1xsYW5nZmUxMDMzXGtlcm5pbmczMlxjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcbGluZSBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBSYXRlcw0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxzMiBccnRsY2hcZmNzMSBcYWYwXGFmczIwIFxsdHJjaFxmY3MwIFxiXGY0MlxsYW5nMFxsYW5nZmUwXGxhbmducDBcbGFuZ2ZlbnAwXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMjcxNDAwNCBcaGljaFxhZjQyXGRiY2hcYWYwXGxvY2hcZjQyIDcuMVx0YWJ9fVxwYXJkXHBsYWluIFxsdHJwYXJcczJccWwgXGZpNzIwXGxpMFxyaTBcc2EyNDBcd2lkY3RscGFyDQpcdHgxODAwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMVxpbHZsMVxvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxjZ3JpZCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQyNzE0MDA0IA0KUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgUmF0ZXMNClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4LTE0NDBcdHgtNzIwXHdyYXBkZWZhdWx0XGh5cGhwYXIwXGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBGb3IgZWFjaCBSZWdpb25hbCBUcmFuc2FjdGlvbiwgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIGFncmVlcyB0byBwYXkgdGhlIGZvbGxvd2luZyBjaGFyZ2VzOg0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzMlxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcdHg3MjBcdHgxNDQwXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGIwXGluc3JzaWQ0NjEyNzc0IA0KXHBhciBcdGFiIFx0YWIgKGEpXHRhYiBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgUmVnaW9uYWwgQ2hhcmdlLn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgICBBIGNoYXJnZSAoaQ0KbiAkKSBlcXVhbCB0byB0aGUgcHJvZHVjdCBvZiAoaSkgdGhlIHRvdGFsIHJlc2VydmVkIG1lZ2F3YXR0cyBmb3Igc3VjaCBSZWdpb25hbCBUcmFuc2FjdGlvbiAoaW4gTVdzKSBtdWx0aXBsaWVkIGJ5IChpaSkgdGhlIFJlZ2lvbmFsIFJhdGUgKGluICQvTVcpIGZvciBzdWNoIFJlZ2lvbmFsIFRyYW5zYWN0aW9uOyBwbHVzDQpccGFyIA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFx0YWIgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0IChiKVx0YWIgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IEFuY2lsbGFyeSBTZXJ2aWNlIDEgQ2hhcmdlfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NCANCi4gIEFuIEFuY2lsbGFyeSBTZXJ2aWNlIDEgY2hhcmdlIChpbiAkDQopIGVxdWFsIHRvIHRoZSBwcm9kdWN0IG9mIChpKSB0aGUgdG90YWwgbWVnYXdhdHRzIGZvciBzdWNoIFJlZ2lvbmFsIFRyYW5zYWN0aW9uIChpbiBNV3MpIG11bHRpcGxpZWQgYnkgKGlpKSB0aGUgc3VtIG9mIHRoZSByYXRlIChpbiAkL01XKSBmb3Igc2NoZWR1bGluZywgc3lzdGVtIGNvbnRyb2wgYW5kIGRpc3BhdGNoIHNlcnZpY2UgYXMgZWFjaCBjb21wb25lbnQgaXMgc3BlY2lmaWVkIGluIHRoZSBPQVRUIGZvciBlYWNoIFJUUCB0aGF0IHBhcnQNCmljaXBhdGVkIGluIHRoZSBSZWdpb25hbCBUcmFuc2FjdGlvbiwgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFx1bFxpbnNyc2lkNDYxMjc3NCBwcm92aWRlZH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgDQogdGhhdCBmb3IgYW55IHN1Y2ggUlRQIHRoYXQgY2hhcmdlcyBhIHBlci10cmFuc2FjdGlvbiBiYXNlZCBBbmNpbGxhcnkgU2VydmljZSAxIHJhdGUsIHRoZSBUcmFuc21pc3Npb24gQ3VzdG9tZXIgd2lsbCAgcGF5IHRoYXQgUlRQXHJxdW90ZSBzIHBlci10cmFuc2FjdGlvbiBiYXNlZCBBbmNpbGxhcnkgU2VydmljZSAxIHJhdGU7IHBsdXMNClxwYXIgDQpccGFyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgXHRhYiBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgKGMpXHRhYiBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzQgQW5jaWxsYXJ5IFNlcnZpY2UgMiBDaGFyZ2UuICB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0IA0KQW4gQW5jaWxsYXJ5IFNlcnZpY2UgMiBjaGFyZ2UgKGluICQpIGVxdWFsIHRvIHRoZSBwcm9kdWN0IG9mIChpKSB0aGUgdG90YWwgbWVnYXdhdHRzIGZvciBzdWNoIFJlZ2lvbmFsIFRyYW5zYWN0aW9uIChpbiBNV3MpIG11bHRpcGxpZWQgYnkgKGlpKSB0aGUgcmF0ZSAoaW4gJC9NVykgZm9yIHJlYWN0aXZlIHN1cHBseSBhbmQgdm9sdGFnZSBjb250cm9sIGFzIGVhY2ggY29tcG9uZW50IGlzIHNwZWNpZmllZCBpbiB0aGUgT0FUVA0KIG9mIHRoZSBsYXN0IFJUUCAoaS5lLiwgdGhlIFJUUCB0aGF0IHRyYW5zbWl0cyB0aGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyXHJxdW90ZSBzIGVuZXJneSB0byB0aGUgUmVnaW9uYWwgUG9pbnQgb2YgRGVsaXZlcnkpIHBhcnRpY2lwYXRpbmcgaW4gdGhlIFJlZ2lvbmFsIFRyYW5zYWN0aW9uOyBwbHVzDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ4Nzk4MTA3IA0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzMlxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcdHg3MjBcdHgxNDQwXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI0XGNncmlkIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGluc3JzaWQ0NjEyNzc0IFx0YWIgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0IChkKVx0YWIgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IEFkZGl0aW9uYWwgQW5jaWxsYXJ5IFNlcnZpY2VzLiAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDMyODA2NDkgQX17XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NCBkZGl0aW9uYWwgQW5jaWxsYXJ5IFNlcnZpY2VzOyBpLmUuIEF9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMzI4MDY0OSBuY2lsbGFyeSAzOiAgUg0KZWd1bGF0aW9uIGFuZCBGcmVxdWVuY3kgUmVzcG9uc2UgU2VydmljZTsgQW5jaWxsYXJ5IDQ6ICBFbmVyZ3kgSW1iYWxhbmNlIFNlcnZpY2U7IEFuY2lsbGFyeSA1OiAgT3BlcmF0aW5nIFJlc2VydmUgXGVuZGFzaCAgU3Bpbm5pbmcgUmVzZXJ2ZSBTZXJ2aWNlOyBBbmNpbGxhcnkgNjogIE9wZXJhdGluZyBSZXNlcnZlIFxlbmRhc2ggIFN1cHBsZW1lbnRhbCBSZXNlcnZlIFNlcnZpY2U7IGFuZCBBbmNpbGxhcnkgOSBcZW5kYXNoIA0KIEdlbmVyYXRvciBJbWJhbGFuY2UgU2VydmljZX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgLCB0byB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMzI4MDY0OSB0aGUgZXh0ZW50IHJlcXVpcmVkIGluIGNvbmp1bmN0aW9uIHdpdGggYSBSZWdpb25hbCBUcmFuc2FjdGlvbn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxiMFxpbnNyc2lkNDYxMjc3NCAsfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDMyODA2NDkgIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgYXMgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDMyODA2NDkgb2ZmZXJlZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGFwcHJvcHJpYXRlIH17DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NCBSVFBccnF1b3RlIHN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGIwXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkMzI4MDY0OSAgT0FUVH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgOyBwbHVzDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQxNTA5MDY0MyANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHR4NzIwXHR4MTQ0MFx0eDE4MDBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xvdXRsaW5lbGV2ZWwxXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNFxjZ3JpZCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxpbnNyc2lkNDYxMjc3NCBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgXHRhYiAoZSlcdGFiIFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBMb3NzZXMgQ2hhcmdlLiAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NCANCkEgbG9zc2VzIGNoYXJnZSAoaW4gJCkgZXF1YWwgdG8gdGhlIHByb2R1Y3Qgb2YgKGkpIHRoZSB0b3RhbCBtZWdhd2F0dHMgZm9yIHN1Y2ggUmVnaW9uYWwgVHJhbnNhY3Rpb24gKGluIA0KTVdzKSBtdWx0aXBsaWVkIGJ5IChpaSkgdGhlIHN1bSBvZiB0aGUgbG9zcyByYXRlcyAoaW4gJSkgYXMgZWFjaCBjb21wb25lbnQgaXMgc3BlY2lmaWVkIGluIHRoZSBPQVRUIGZvciBlYWNoIFJUUCB0aGF0IHBhcnRpY2lwYXRlZCBpbiB0aGUgUmVnaW9uYWwgVHJhbnNhY3Rpb24gKG1vbmV0aXplZCBiYXNlZCBvbiB0aGUgYXBwbGljYWJsZSBQYWxvIFZlcmRlIEluZGV4IHByaWNlKTsgcGx1cw0KXHBhciB9XHBhcmQgXGx0cnBhclxzMlxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcdHg3MjBcdHgxNDQwXHR4MjE2MFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXG91dGxpbmVsZXZlbDFcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZCBcbHRycGFyXHMyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eDcyMFx0eDE0NDBcdHgxODAwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cb3V0bGluZWxldmVsMVxhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCBcdGFiIFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGIwXGluc3JzaWQ0NjEyNzc0IChmKVx0YWIgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkNDYwNDYzOSBBZG1pbmlzdHJhdGl2ZSBDaGFyZ2VzLiAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDQ2MDQ2MzkgDQpUaGUgQWRtaW5pc3RyYXRpdmUgQ2hhcmdlIGlzIGRlc2lnbmVkIHRvIGNvdmVyIHRoZSBjb3N0cyBvZiB0aGUgQmlsbGluZyBBZ2VudH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDE1OTUzNTI0ICBhbmQgaXMgc2V0IGF0ICQxLjI2IHBlciBNV317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDkwNzUxMDggDQpoLiAgVGhlIEFkbWluaXN0cmF0aXZlIENoYXJnZSBzaGFsbCBub3QgYmUgY2hhbmdlZCBwcmlvciB0byBKdWx5IDEsIDIwMTgufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNTk4MTQzNiAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiMFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgVGhlc2UgY2hhcmdlcyBzaGFsbCBub3QgYmUgZGlzY291bnRlZC59e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0XGNoYXJyc2lkODUzMDQxNyANClxwYXIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpNzIwXGxpMFxyaTBcd2lkY3RscGFyXHR4MTgwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDQ2MTI3NzQgNy4yXHRhYiBQYXltZW50IHRvIEJpbGxpbmcgQWdlbnQgQWNjb3VudA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ2NzA0OTM4IFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NCANCkFsbCBjaGFyZ2VzIGZvciBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBwcm92aWRlZCBmb3IgaW4gdGhpcyBSZWdpb25hbCBUYXJpZmYgc2hhbGwgYmUgYmlsbGVkIHRvIHRoZSBUcmFuc21pc3Npb24gQ3VzdG9tZXIgYnkgdGhlIEJpbGxpbmcgQWdlbnQgYW5kIHBhaWQgYnkgdGhlIFRyYW5zbWlzc2lvbiBDdXN0b21lciB0byB0aGUgQmlsbGluZyBBZ2VudC4gIFRoZSBCaWxsaW5nIEFnZW50IHdpbGwgYWxzbyBiZSByZXNwb25zaWJsZQ0KIGZvciBtYWtpbmcgYW55IHJlZnVuZHMgdG8gd2hpY2ggdGhlIFRyYW5zbWlzc2lvbiBDdXN0b21lciBtYXkgYmUgZW50aXRsZWQgaW4gcmVzcGVjdCBvZiBhIFJlZ2lvbmFsIFRyYW5zYWN0aW9uLiANClxwYXIgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFjIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDQ2MTI3NzQgQXJ0aWNsZSBWSUlJLg0KXHBhciBEaXNwdXRlIFJlc29sdXRpb24gYW5kIEdvdmVybmluZyBMYXcNClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpbnNyc2lkNDYxMjc3NCANClxwYXIge1wqXGJrbWtzdGFydCBfVG9jMTM0NzE5MTkyfXtcKlxia21rc3RhcnQgX1RvYzEzNDcyNTIwOX17XCpcYmtta3N0YXJ0IF9Ub2MxMzU1NTQ4MjV9e1wqXGJrbWtzdGFydCBfVG9jMTg2NTk0MDQ0fXtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHM2NiBccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmMFxkYmNoXGFmMFxsb2NoXGYwIDguMVx0YWJ9fVxwYXJkXHBsYWluIFxsdHJwYXINClxzNjZccWwgXGZpLTcyMFxsaTE0NDBccmkwXG5vd2lkY3RscGFyXHR4MTgwMFx3cmFwZGVmYXVsdFxmYWF1dG9cbHMyNVxpbHZsMVxyaW4wXGxpbjE0NDBcaXRhcDBccGFyYXJzaWQzMzY3MzUgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNlxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNlxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwXGFmczI0IFxsdHJjaFxmY3MwIA0KXGZzMjRcaW5zcnNpZDQ2MTI3NzQgSW50ZXJuYWwgRGlzcHV0ZSBSZXNvbHV0aW9uIFByb2NlZHVyZXN7XCpcYmtta2VuZCBfVG9jMTM0NzE5MTkyfXtcKlxia21rZW5kIF9Ub2MxMzQ3MjUyMDl9e1wqXGJrbWtlbmQgX1RvYzEzNTU1NDgyNX17XCpcYmtta2VuZCBfVG9jMTg2NTk0MDQ0fSAgDQpccGFyIH1ccGFyZCBcbHRycGFyXHM2NlxxbCBcbGk3MjBccmkwXG5vd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjcyMFxpdGFwMFxwYXJhcnNpZDMzNjczNSB7XHJ0bGNoXGZjczEgXGFmMFxhZnMyNCBcbHRyY2hcZmNzMCBcZnMyNFxpbnNyc2lkNDYxMjc3NCANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczYzXHFsIFxmaTcyMFxsaTBccmkwXG5vd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI2XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcZnMyNFxpbnNyc2lkNDYxMjc3NCBBbnkgZGlzcHV0ZSBiZXR3ZWVuIGEgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIGFuZA0KIGFuIFJUUCBpbnZvbHZpbmcgdHJhbnNtaXNzaW9uIHNlcnZpY2UgdW5kZXIgdGhpcyBSZWdpb25hbCBUYXJpZmYgKGV4Y2x1ZGluZyBhcHBsaWNhdGlvbnMgZm9yIGNoYW5nZXMgdG8gdGhlIFJlZ2lvbmFsIFRhcmlmZiwgb3IgdG8gYW55IFNlcnZpY2UgQWdyZWVtZW50IGVudGVyZWQgaW50byBieSBhIEp1cmlzZGljdGlvbmFsIFJUUCB1bmRlciB0aGUgUmVnaW9uYWwgVGFyaWZmIG9yIGl0cyBwcmVkZWNlc3Nvciwgd2hpY2ggc2hhbGwgYmUgcHJlDQpzDQplbnRlZCBkaXJlY3RseSB0byB0aGUgQ29tbWlzc2lvbiBmb3IgcmVzb2x1dGlvbikgc2hhbGwgYmUgcmVmZXJyZWQgdG8gYSBkZXNpZ25hdGVkIHNlbmlvciByZXByZXNlbnRhdGl2ZSBvZiB0aGUgUlRQIGFuZCBhIHNlbmlvciByZXByZXNlbnRhdGl2ZSBvZiB0aGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIGZvciByZXNvbHV0aW9uIG9uIGFuIGluZm9ybWFsIGJhc2lzIGFzIHByb21wdGx5IGFzIHByYWN0aWNhYmxlLiAgSW4gdGhlIGV2ZW50IHRoZSANCmRlc2lnbmF0ZWQgcmVwcmVzZW50YXRpdmVzIGFyZSB1bmFibGUgdG8gcmVzb2x2ZSB0aGUgZGlzcHV0ZSB3aXRoaW4gdGhpcnR5ICgzMCkgZGF5cyB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDExMDkyMDYzICh9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDQ2MTI3NzQgDQpvciBzdWNoIG90aGVyIHBlcmlvZCBhcyB0aGUgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIGFuZCB0aGUgUlRQIG1heSBhZ3JlZSB1cG9ufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQxMTA5MjA2MyApfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQ0NjEyNzc0IA0KIGJ5IG11dHVhbCBhZ3JlZW1lbnQsIHN1Y2ggZGlzcHV0ZSBtYXkgYmUgc3VibWl0dGVkIHRvIGFyYml0cmF0aW9uIGFuZCByZXNvbHZlZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGFyYml0cmF0aW9uIHByb2NlZHVyZXMgc2V0IGZvcnRoIGJlbG93Lg0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzNjZccWwgXGxpMTE1MlxyaTBcbm93aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMTE1MlxpdGFwMFxwYXJhcnNpZDMzNjczNSBccnRsY2hcZmNzMSBcYWYwXGFmczI2XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcYlxmczI2XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjBcYWZzMjQgXGx0cmNoXGZjczAgDQpcZnMyNFxpbnNyc2lkNDYxMjc3NCB7XCpcYmtta3N0YXJ0IF9Ub2MxMzQ3MTkxOTN9e1wqXGJrbWtzdGFydCBfVG9jMTM0NzI1MjEwfXtcKlxia21rc3RhcnQgX1RvYzEzNTU1NDgyNn17XCpcYmtta3N0YXJ0IF9Ub2MxODY1OTQwNDV9DQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHM2NiBccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmMFxkYmNoXGFmMFxsb2NoXGYwIDguMlx0YWJ9fVxwYXJkIFxsdHJwYXJcczY2XHFsIFxmaS03MjBcbGkxNDQwXHJpMFxub3dpZGN0bHBhclxqY2xpc3R0YWJcdHgxODAwXHdyYXBkZWZhdWx0XGZhYXV0b1xsczI1XGlsdmwxXHJpbjBcbGluMTQ0MFxpdGFwMFxwYXJhcnNpZDMzNjczNSB7DQpccnRsY2hcZmNzMSBcYWYwXGFmczI0IFxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQ0NjEyNzc0IEV4dGVybmFsIEFyYml0cmF0aW9uIFByb2NlZHVyZXN9e1xydGxjaFxmY3MxIFxhZjBcYWZzMjQgXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDEwNTgzOTI4XGNoYXJyc2lkMTA1ODM5Mjgge1wqXGJrbWtlbmQgX1RvYzEzNDcxOTE5M317XCpcYmtta2VuZCBfVG9jMTM0NzI1MjEwfXtcKlxia21rZW5kIF9Ub2MxMzU1NTQ4MjZ9DQp7XCpcYmtta2VuZCBfVG9jMTg2NTk0MDQ1fQ0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzNjNccWwgXGZpNzIwXGxpMFxyaTBcbm93aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDMzNjczNSBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNlxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGZzMjRcaW5zcnNpZDEwNTgzOTI4IA0KXHBhciB9XHBhcmQgXGx0cnBhclxzNjNccWwgXGZpNzIwXGxpMFxyaTBcbm93aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDQ2MTI3NzQgDQpBbnkgYXJiaXRyYXRpb24gaW5pdGlhdGVkIHVuZGVyIHRoaXMgUmVnaW9uYWwgVGFyaWZmIHNoYWxsIGJlIGNvbmR1Y3RlZCBiZWZvcmUgYSBzaW5nbGUgbmV1dHJhbCBhcmJpdHJhdG9yIGFwcG9pbnRlZCBieSB0aGUgcGFydGllcyB0byB0aGUgZGlzcHV0ZSAoaGVyZWluYWZ0ZXIsIHRoZSBcJzkzUGFydGllc1wnOTQNCikuICBJZiB0aGUgUGFydGllcyBmYWlsIHRvIGFncmVlIHVwb24gYSBzaW5nbGUgYXJiaXRyYXRvciB3aXRoaW4gdGVuICgxMCkgZGF5cyBvZiB0aGUgcmVmZXJyYWwgb2YgdGhlIGRpc3B1dGUgdG8gYXJiaXRyYXRpb24sIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZnMyNFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDY3NzU3MzkgDQplYWNoIG9mIHRoZSBQYXJ0aWVzIHNoYWxsIGNob29zZSBvbmUgYXJiaXRyYXRvciB3aG8gc2hhbGwgc2l0IG9uIGEgdGhyZWUtbWVtYmVyIGFyYml0cmF0aW9uIHBhbmVsLiAgVGhlIHR3byBhcmJpdHJhdG9yc317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZnMyNFxpbnNyc2lkNDYxMjc3NCAgc28gY2hvc2VuDQogc2hhbGwgd2l0aGluIHR3ZW50eSAoMjApIGRheXMgc2VsZWN0IGEgdGhpcmQgYXJiaXRyYXRvciB0byBjaGFpciB0aGUgYXJiaXRyYXRpb24gcGFuZWwuICBJbiBlaXRoZXIgY2FzZSwgdGhlIGFyYml0cmF0b3JzIHNoYWxsIGJlIGtub3dsZWRnZWFibGUgaW4gZWxlY3RyaWMgdXRpbGl0eSBtYXR0ZXJzLCBpbmNsdWRpbmcgZWxlY3RyaWMgdHJhbnNtaXNzaW9uIGFuZCBidWxrIHBvd2VyIGlzc3VlcywgYW5kIHNoYWxsIG5vdCBoYXZlIGFueSBjdXINCnINCmVudCBvciBwYXN0IHN1YnN0YW50aWFsIGJ1c2luZXNzIG9yIGZpbmFuY2lhbCByZWxhdGlvbnNoaXBzIHdpdGggYW55IHBhcnR5IHRvIHRoZSBhcmJpdHJhdGlvbiAoZXhjZXB0IHByaW9yIGFyYml0cmF0aW9uKS4gIFRoZSBhcmJpdHJhdG9yKHMpIHNoYWxsIHByb3ZpZGUgZWFjaCBvZiB0aGUgUGFydGllcyBhbiBvcHBvcnR1bml0eSB0byBiZSBoZWFyZCBhbmQsIGV4Y2VwdCBhcyBvdGhlcndpc2UgcHJvdmlkZWQgaGVyZWluLCBzaGFsbCBnZW5lcg0KYWxseSBjb25kdWN0IHRoZSBhcmJpdHJhdGlvbiBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIENvbW1lcmNpYWwgQXJiaXRyYXRpb24gUnVsZXMgb2YgdGhlIEFtZXJpY2FuIEFyYml0cmF0aW9uIEFzc29jaWF0aW9uIGFuZCBhbnkgYXBwbGljYWJsZSBDb21taXNzaW9uIHJlZ3VsYXRpb25zLiANClxwYXIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQxMDU4MzkyOCANClxwYXIge1wqXGJrbWtzdGFydCBfVG9jMTM0NzE5MTk0fXtcKlxia21rc3RhcnQgX1RvYzEzNDcyNTIxMX17XCpcYmtta3N0YXJ0IF9Ub2MxMzU1NTQ4Mjd9e1wqXGJrbWtzdGFydCBfVG9jMTg2NTk0MDQ2fXtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHM2NiBccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmMFxkYmNoXGFmMFxsb2NoXGYwIDguM1x0YWJ9fVxwYXJkXHBsYWluIFxsdHJwYXINClxzNjZccWwgXGZpLTcyMFxsaTE0NDBccmkwXG5vd2lkY3RscGFyXGpjbGlzdHRhYlx0eDE4MDBcd3JhcGRlZmF1bHRcZmFhdXRvXGxzMjVcaWx2bDFccmluMFxsaW4xNDQwXGl0YXAwXHBhcmFyc2lkMzM2NzM1IFxydGxjaFxmY3MxIFxhZjBcYWZzMjZcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxiXGZzMjZcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMFxhZnMyNCANClxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQ0NjEyNzc0IEFyYml0cmF0aW9uIERlY2lzaW9uc3tcKlxia21rZW5kIF9Ub2MxMzQ3MTkxOTR9e1wqXGJrbWtlbmQgX1RvYzEzNDcyNTIxMX17XCpcYmtta2VuZCBfVG9jMTM1NTU0ODI3fXtcKlxia21rZW5kIF9Ub2MxODY1OTQwNDZ9ICANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczYzXHFsIFxsaTBccmkwXG5vd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI2XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcZnMyNFxpbnNyc2lkNDYxMjc3NCANCg0KXHBhciB9XHBhcmQgXGx0cnBhclxzNjNccWwgXGZpNzIwXGxpMFxyaTBcbm93aWRjdGxwYXJcd3JhcGRlZmF1bHRcZmFhdXRvXHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDQ2MTI3NzQgVW5sZXNzIG90aGVyd2lzZSBhZ3JlZWQsIHRoZSBhcmJpdHJhdG9yKHMpIHNoYWxsIHJlbmRlciBhIGRlY2lzaW9uDQogd2l0aGluIG5pbmV0eSAoOTApIGRheXMgb2YgYXBwb2ludG1lbnQgYW5kIHNoYWxsIG5vdGlmeSB0aGUgUGFydGllcyBpbiB3cml0aW5nIG9mIHN1Y2ggZGVjaXNpb24gYW5kIHRoZSByZWFzb25zIHRoZXJlZm9yLiAgVGhlIGFyYml0cmF0b3Iocykgc2hhbGwgYmUgYXV0aG9yaXplZCBvbmx5IHRvIGludGVycHJldCBhbmQgYXBwbHkgdGhlIHByb3Zpc2lvbnMgb2YgdGhlIFJlZ2lvbmFsIFRhcmlmZiBhbmQgYW55IFNlcnZpY2UgQWdyZWVtZW50IGUNCm50ZXJlZCBpbnRvIHVuZGVyIHRoZSBSZWdpb25hbCBUYXJpZmYgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQxMTA4MzEwNSAob3IgaXRzIHByZWRlY2Vzc29yKSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDQ2MTI3NzQgDQphbmQgc2hhbGwgaGF2ZSBubyBwb3dlciB0byBtb2RpZnkgb3IgY2hhbmdlIGFueSBvZiB0aGUgYWJvdmUgaW4gYW55IG1hbm5lci4gIFRoZSBkZWNpc2lvbiBvZiB0aGUgYXJiaXRyYXRvcihzKSBzaGFsbCBiZSBmaW5hbCBhbmQgYmluZGluZyB1cG9uIHRoZSBQYXJ0aWVzLCBhbmQganVkZ21lbnQgb24gdGhlIGF3YXJkIG1heSBiZSBlbnRlcmVkIGkNCm4gYW55IGNvdXJ0IGhhdmluZyBqdXJpc2RpY3Rpb24uICBUaGUgZGVjaXNpb24gb2YgdGhlIGFyYml0cmF0b3IocykgbWF5IGJlIGFwcGVhbGVkIHNvbGVseSBvbiB0aGUgZ3JvdW5kcyB0aGF0IHRoZSBjb25kdWN0IG9mIHRoZSBhcmJpdHJhdG9yKHMpLCBvciB0aGUgZGVjaXNpb24gaXRzZWxmLCB2aW9sYXRlZCB0aGUgc3RhbmRhcmRzIHNldCBmb3J0aCBpbiB0aGUgRmVkZXJhbCBBcmJpdHJhdGlvbiBBY3QgYW5kL29yIHRoZSBBZG1pbmlzdHJhdA0KaXZlIERpc3B1dGUgUmVzb2x1dGlvbiBBY3QuICBUaGUgZmluYWwgZGVjaXNpb24gb2YgdGhlIGFyYml0cmF0b3IgbXVzdCBhbHNvIGJlIGZpbGVkIHdpdGggdGhlIENvbW1pc3Npb24gaWYgaXQgYWZmZWN0cyBqdXJpc2RpY3Rpb25hbCByYXRlcywgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2Ygc2VydmljZSBvciBmYWNpbGl0aWVzLg0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDEwNTgzOTI4IA0KXHBhciB7XCpcYmtta3N0YXJ0IF9Ub2MxMzQ3MTkxOTV9e1wqXGJrbWtzdGFydCBfVG9jMTM0NzI1MjEyfXtcKlxia21rc3RhcnQgX1RvYzEzNTU1NDgyOH17XCpcYmtta3N0YXJ0IF9Ub2MxODY1OTQwNDd9e1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBcczY2IFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDQ2MTI3NzQgXGhpY2hcYWYwXGRiY2hcYWYwXGxvY2hcZjAgOC40XHRhYn19XHBhcmRccGxhaW4gXGx0cnBhcg0KXHM2NlxxbCBcZmktNzIwXGxpMTQ0MFxyaTBcbm93aWRjdGxwYXJcamNsaXN0dGFiXHR4MTgwMFx3cmFwZGVmYXVsdFxmYWF1dG9cbHMyNVxpbHZsMVxyaW4wXGxpbjE0NDBcaXRhcDBccGFyYXJzaWQzMzY3MzUgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNlxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGJcZnMyNlxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwXGFmczI0IA0KXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDQ2MTI3NzQgQ29zdHN7XCpcYmtta2VuZCBfVG9jMTM0NzE5MTk1fXtcKlxia21rZW5kIF9Ub2MxMzQ3MjUyMTJ9e1wqXGJrbWtlbmQgX1RvYzEzNTU1NDgyOH17XCpcYmtta2VuZCBfVG9jMTg2NTk0MDQ3fSAgDQpccGFyIH1ccGFyZCBcbHRycGFyXHM2NlxxbCBcbGk3MjBccmkwXHNiMTIwXG5vd2lkY3RscGFyXHdyYXBkZWZhdWx0XGZhYXV0b1xyaW4wXGxpbjcyMFxpdGFwMFxwYXJhcnNpZDQ2MTI3NzQge1xydGxjaFxmY3MxIFxhZjBcYWZzMjQgXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHM2M1xxbCBcZmk3MjBcbGkwXHJpMFxub3dpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCBccnRsY2hcZmNzMSBcYWYwXGFmczI0XGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyNlxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGZzMjRcaW5zcnNpZDQ2MTI3NzQgRWFjaCBQYXJ0eSBzaGFsbCBiZSByZXNwb25zaWJsZSBmb3IgaXRzIG93biBjb3N0cyBpbmN1cnJlZCBkdXJpbmcgdGhlIGFyYml0cmF0aW9uIHByb2Nlc3MgYW5kIGZvciB0aGUgZm9sbG93aW5nIGNvc3RzLCBpZiBhcHBsaWNhYmxlOg0KXHBhciANClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBcczYzIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmMFxkYmNoXGFmMFxsb2NoXGYwIDEuXHRhYn19XHBhcmQgXGx0cnBhclxzNjNccWwgXGZpLTM2MFxsaTE4MDBccmkwXG5vd2lkY3RscGFyXGpjbGlzdHRhYlx0eDE4MDBcd3JhcGRlZmF1bHRcZmFhdXRvXGxzMjNccmluMFxsaW4xODAwXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgDQpcYWYwIFxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQ0NjEyNzc0IHRoZSBjb3N0IG9mIHRoZSBhcmJpdHJhdG9yIGNob3NlbiBieSB0aGUgUGFydHkgdG8gc2l0IG9uIHRoZSB0aHJlZSBtZW1iZXIgcGFuZWwgYW5kIG9uZSBoYWxmIG9mIHRoZSBjb3N0IG9mIHRoZSB0aGlyZCBhcmJpdHJhdG9yIGNob3Nlbjsgb3INClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBcczYzIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmMFxkYmNoXGFmMFxsb2NoXGYwIDIuXHRhYn1vbmUgaGFsZiB0aGUgY29zdCBvZiB0aGUgc2luZ2xlIGFyYml0cmF0b3Igam9pbnRseSBjaG9zZW4gYnkgdGhlIFBhcnRpZXMuDQpccGFyIH1ccGFyZCBcbHRycGFyXHM2M1xxbCBcbGkxODAwXHJpMFxub3dpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW4xODAwXGl0YXAwXHBhcmFyc2lkNDYxMjc3NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZnMyNFxpbnNyc2lkMTE1NDg3MjggDQpccGFyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcZnMyNFxpbnNyc2lkNDYxMjc3NCANClxwYXIge1wqXGJrbWtzdGFydCBfVG9jMTM0NzE5MTk2fXtcKlxia21rc3RhcnQgX1RvYzEzNDcyNTIxM317XCpcYmtta3N0YXJ0IF9Ub2MxMzU1NTQ4Mjl9e1wqXGJrbWtzdGFydCBfVG9jMTg2NTk0MDQ4fXtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHM2NiBccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQ0NjEyNzc0IFxoaWNoXGFmMFxkYmNoXGFmMFxsb2NoXGYwIDguNVx0YWJ9fVxwYXJkXHBsYWluIFxsdHJwYXINClxzNjZccWwgXGZpLTcyMFxsaTE0NDBccmkwXG5vd2lkY3RscGFyXGpjbGlzdHRhYlx0eDE4MDBcd3JhcGRlZmF1bHRcZmFhdXRvXGxzMjZcaWx2bDFccmluMFxsaW4xNDQwXGl0YXAwXHBhcmFyc2lkMzM2NzM1IFxydGxjaFxmY3MxIFxhZjBcYWZzMjZcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxiXGZzMjZcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMFxhZnMyNCANClxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQ0NjEyNzc0IFJpZ2h0cyBVbmRlciBUaGUgRmVkZXJhbCBQb3dlciBBY3R7XCpcYmtta2VuZCBfVG9jMTM0NzE5MTk2fXtcKlxia21rZW5kIF9Ub2MxMzQ3MjUyMTN9e1wqXGJrbWtlbmQgX1RvYzEzNTU1NDgyOX17XCpcYmtta2VuZCBfVG9jMTg2NTk0MDQ4fTsgR292ZXJuaW5nIExhdw0KXHBhciB9XHBhcmQgXGx0cnBhclxzNjZccWwgXGxpNzIwXHJpMFxub3dpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW43MjBcaXRhcDBccGFyYXJzaWQzMzY3MzUge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjEyNzc0ICAgfXtccnRsY2hcZmNzMSBcYWYwXGFmczI0IFxsdHJjaFxmY3MwIFxmczI0XGluc3JzaWQ0NjEyNzc0IA0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxzNjNccWwgXGxpNzIwXHJpMFxub3dpZGN0bHBhclx3cmFwZGVmYXVsdFxmYWF1dG9ccmluMFxsaW43MjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI2XGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDQ2MTI3NzQgDQpcdGFiIFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYxMjc3NFxjaGFycnNpZDkwNzUxMDggKGEpXHRhYiBOb3RoaW5nIGluIHRoaXMgc2VjdGlvbiBzaGFsbCByZXN0cmljdCB0aGUgcmlnaHRzIG9mIGFueSBwYXJ0eSB0byBmaWxlIGEgY29tcGxhaW50IHdpdGggdGhlIENvbW1pc3Npb24gdW5kZXIgcmVsZXZhbnQgcHJvdmlzaW9ucyBvZiB0aGUgRmVkZXJhbCBQb3dlciBBY3QufXtccnRsY2hcZmNzMSBcYWYwIA0KXGx0cmNoXGZjczAgXGZzMjRcaW5zcnNpZDQ2MTI3NzQgDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHMyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx0eDcyMFx0eDE0NDBcdHgxODAwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cb3V0bGluZWxldmVsMVxhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ0NjEyNzc0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxiXGZzMjRcY2dyaWQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcYjBcaW5zcnNpZDQ2MTI3NzQgXHRhYiBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ3NDMxNzQgKH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDkwNzUxMDggYn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYjBcaW5zcnNpZDQ2MTI3NzRcY2hhcnJzaWQ3NDMxNzQgKVx0YWIgDQpUaGUgdmFsaWRpdHksIGludGVycHJldGF0aW9uIGFuZCBwZXJmb3JtYW5jZSBvZiB0aGlzIFJlZ2lvbmFsIFRhcmlmZiBhbmQgZWFjaCBvZiBpdHMgcHJvdmlzaW9ucyBzaGFsbCBiZSBnb3Zlcm5lZCBieSBmZWRlcmFsIGxhdyBhbmQvb3IgYnkgdGhlIGxhdyBvZiB0aGUgc3RhdGUgaW4gd2hpY2ggdGhlIFRyYW5zbWlzc2lvbiBQcm92aWRlciBoYXMgaXRzIHByaW5jaXBhbCBwbGFjZSBvZiBidXNpbmVzcyAodW5sZXNzIHByZWVtcHRlZCBieSBmZWQNCmVyYWwgbGF3KS4NClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJccWMgXGxpNzIwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjcyMFxpdGFwMFxwYXJhcnNpZDMzNDk1MTEgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2XGNoYXJyc2lkNzQzMTc0IFxzZWN0IH1cc2VjdGQgXGx0cnNlY3RccGducmVzdGFydFxsaW5leDBcZW5kbmhlcmVcc2VjdGxpbmVncmlkMzYwXHNlY3RkZWZhdWx0Y2xcc2VjdHJzaWQzMzY3MzVcc2Z0bmJqIHtcZm9vdGVyciBcbHRycGFyIFxwYXJkXHBsYWluIFxsdHJwYXINClxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ4MDk4NjcgDQpccGFyIH19e1xmb290ZXJmIFxsdHJwYXIgXHBhcmRccGxhaW4gXGx0cnBhclxzMTdccWMgXGxpMFxyaTBcd2lkY3RscGFyXHRxY1x0eDQzMjBcdHFyXHR4ODY0MFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDE1NjAxMzk0IFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxjZ3JpZCB7XHJ0bGNoXGZjczEgXGFmMCANClxsdHJjaFxmY3MwIFxpbnNyc2lkODA5ODY3IFNjaGVkdWxlIDguMi19e1xmaWVsZFxmbGRkaXJ0eXtcKlxmbGRpbnN0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxjczE4XGluc3JzaWQ4MDk4NjcgIFBBR0UgfX17XGZsZHJzbHQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNzMThcbGFuZzEwMjRcbGFuZ2ZlMTAyNFxub3Byb29mXGluc3JzaWQ5Nzk2MDE5IDEyfX19XHNlY3RkIFxsdHJzZWN0DQpcbGluZXgwXGVuZG5oZXJlXHNlY3RkZWZhdWx0Y2xcc2Z0bmJqIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkODA5ODY3IA0KXHBhciB9fVxwYXJkXHBsYWluIFxsdHJwYXJccWMgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIFxydGxjaFxmY3MxIFxhZjBcYWZzMjRcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNmMVxsYW5nMTAzM1xsYW5nZmUxMDMzXGNncmlkXGxhbmducDEwMzNcbGFuZ2ZlbnAxMDMzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGJcaW5zcnNpZDEwMTAzNTM2IEFOTkVYIEENClxwYXIgRm9ybSBvZiBTZXJ2aWNlIEFncmVlbWVudCBmb3INClxwYXIgV2VzdENvbm5lY3QgUG9pbnQtVG8tUG9pbnQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgVGFyaWZmDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNmMVxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYwXGxvY2hcZjAgMS4wXHRhYn19XHBhcmQgXGx0cnBhclxxbCBcZmktNzIwXGxpNzIwXHJpMFx3aWRjdGxwYXINClxqY2xpc3R0YWJcdHg3MjBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIyXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMzAxODcyNCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IFRoaXMgU2VydmljZSBBZ3JlZW1lbnQsIGRhdGVkIGFzIG9mIFtfX19fX19fX19fX19fX19dICh0aGlzIFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcdWxcaW5zcnNpZDEwMTAzNTM2IFNlcnZpY2UgQWdyZWVtZW50fXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgXCc5NCksIGlzIGVudGVyZWQgaW50byBieSBhbmQgYmV0d2VlbiBbX19fX19fX19fX19fX19fXX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxNlxzdXBlclxpbnNyc2lkMTAxMDM1MzYgXGNoZnRuIHtcZm9vdG5vdGUgXGx0cnBhciBccGFyZFxwbGFpbiBcbHRycGFyDQpcczE1XHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCBccnRsY2hcZmNzMSBcYWYwXGFmczIwXGFsYW5nMTAyNSBcbHRyY2hcZmNzMCBcZnMyMFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxNlxzdXBlclxpbnNyc2lkODA5ODY3IA0KXGNoZnRuIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDgwOTg2NyAgSW5jbHVkZSBuYW1lIG9mIGFwcGxpY2FibGUgUlRQLn19fXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgKFwnOTN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQxMDEwMzUzNlxjaGFycnNpZDQ2MDQ2MzkgUlRQfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGluc3JzaWQxMDEwMzUzNiBcJzk0IGFuZCBjb2xsZWN0aXZlbHksIHdpdGggb3RoZXIgdHJhbnNtaXNzaW9uIHByb3ZpZGVycyBwcm92aWRpbmcgc2VydmljZSBpbiBhIFJlZ2lvbmFsIFRyYW5zYWN0aW9uLCB0aGUgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDEwMTAzNTM2IFJUUHN9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiBcJzk0DQopIGFuZCBbX19fX19fX19fX19fX19fXX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxNlxzdXBlclxpbnNyc2lkMTAxMDM1MzYgXGNoZnRuIHtcZm9vdG5vdGUgXGx0cnBhciBccGFyZFxwbGFpbiBcbHRycGFyXHMxNVxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAgXHJ0bGNoXGZjczEgXGFmMFxhZnMyMFxhbGFuZzEwMjUgDQpcbHRyY2hcZmNzMCBcZnMyMFxjZjFcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxNlxzdXBlclxpbnNyc2lkODA5ODY3IFxjaGZ0biB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ4MDk4NjcgIEluY2x1ZGUgbmFtZSBvZiBFbGlnaWINCmxlIEN1c3RvbWVyIHJlcXVlc3RpbmcgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UufX19e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiAgKHRoZSBcJzkzfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkMTAxMDM1MzYgVHJhbnNtaXNzaW9uIEN1c3RvbWVyfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgXCc5NA0KKS4gIENhcGl0YWxpemVkIHRlcm1zIHVzZWQgYnV0IG5vdCBkZWZpbmVkIGhlcmVpbiBzaGFsbCBoYXZlIHRoZSBtZWFuaW5ncyBhc3NpZ25lZCB0byB0aGVtIGluIHRoZSBSVFBccnF1b3RlIHMgV2VzdENvbm5lY3QgUG9pbnQtVG8tUG9pbnQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgVGFyaWZmICh0aGUgXCc5M317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDEzNTA2NTgwIFJlZ2lvbmFsIFRhcmlmZn17DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgXCc5NCkuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNmMVxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYwXGxvY2hcZjAgMi4wXHRhYn19XHBhcmQgXGx0cnBhclxxbCBcZmktNzIwXGxpNzIwXHJpMFx3aWRjdGxwYXINClxqY2xpc3R0YWJcdHg3MjBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIyXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMzAxODcyNCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IFRoZSBUcmFuc21pc3Npb24gQ3VzdG9tZXIgaGFzIGJlZW4gZGV0ZXJtaW5lZCBieSB0aGUgUlRQIHRvIGJlIGEgVHJhbnNtaXNzaW9uIEN1c3RvbWVyIHVuZGVyIHRoZSB9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEzNTA2NTgwIFJlZ2lvbmFsIFRhcmlmZn17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IC4gIA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiANClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxjZjFcaW5zcnNpZDEwMTAzNTM2IFxoaWNoXGFmMFxkYmNoXGFmMFxsb2NoXGYwIDMuMFx0YWJ9fVxwYXJkIFxsdHJwYXJccWwgXGZpLTcyMFxsaTcyMFxyaTBcd2lkY3RscGFyDQpcamNsaXN0dGFiXHR4NzIwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMlxhZGp1c3RyaWdodFxyaW4wXGxpbjcyMFxpdGFwMFxwYXJhcnNpZDMwMTg3MjQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiBTZXJ2aWNlIHVuZGVyIHRoaXMgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTEwODMxMDUgU2VydmljZSB9e1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IEFncmVlbWVudCBzaGFsbCBiZSBwcm92aWRlZCBieSB0aGUgUlRQIHVwb24gcmVxdWVzdCBieSBhbiBhdXRob3JpemVkIHJlcHJlc2VudGF0aXZlIG9mIHRoZSBUcmFuc21pc3Npb24gQ3VzdG9tZXIuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNmMVxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYwXGxvY2hcZjAgNC4wXHRhYn19XHBhcmQgXGx0cnBhclxxbCBcZmktNzIwXGxpNzIwXHJpMFx3aWRjdGxwYXINClxqY2xpc3R0YWJcdHg3MjBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIyXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMzAxODcyNCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KVGhlIFRyYW5zbWlzc2lvbiBDdXN0b21lciBhZ3JlZXM6IChhKSB0byBzdXBwbHkgaW5mb3JtYXRpb24gdGhhdCB0aGUgUlRQIGRlZW1zIHJlYXNvbmFibHkgbmVjZXNzYXJ5IGluIGFjY29yZGFuY2Ugd2l0aCBHb29kIFV0aWxpdHkgUHJhY3RpY2UgaW4gb3JkZXIgdG8gcHJvdmlkDQplIGFueSByZXF1ZXN0ZWQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2U7IGFuZCAoYikgdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiB0byB0aGUgUlRQcyBhbmQgdGhlIEJpbGxpbmcgQWdlbnQgcHVyc3VhbnQgdG8gYW5kIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTM1MDY1ODAgUmVnaW9uYWwgVGFyaWZmfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGluc3JzaWQxMDEwMzUzNiAgaW4gY29ubmVjdGlvbiB3aXRoIGFueSByZXF1ZXN0ZWQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNmMVxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYwXGxvY2hcZjAgNS4wXHRhYn19XHBhcmQgXGx0cnBhclxxbCBcZmktNzIwXGxpNzIwXHJpMFx3aWRjdGxwYXINClxqY2xpc3R0YWJcdHg3MjBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIyXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMzAxODcyNCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IFRoZSBSVFAgYWdyZWVzIHRvIHByb3ZpZA0KZSBhbmQgdGhlIFRyYW5zbWlzc2lvbiBDdXN0b21lciBhZ3JlZXMgdG8gdGFrZSBhbmQgcGF5IGZvciB0aGUgcmVxdWVzdGVkIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBvZiB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTM1MDY1ODAgUmVnaW9uYWwgVGFyaWZmfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgDQogYW5kIHRoaXMgU2VydmljZSBBZ3JlZW1lbnQuDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNmMVxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYwXGxvY2hcZjAgNi4wXHRhYn19XHBhcmQgXGx0cnBhclxxbCBcZmktNzIwXGxpNzIwXHJpMFx3aWRjdGxwYXINClxqY2xpc3R0YWJcdHg3MjBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIyXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMzAxODcyNCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIHVuZGVyIHRoaXMgU2VydmljZSBBZ3JlZW1lbnQgc2hhbGwgY28NCm1tZW5jZSBvbiB0aGUgbGF0ZXIgb2YgKGEpIHRoZSByZXF1ZXN0ZWQgY29tbWVuY2VtZW50IGRhdGUsIG9yIChiKSBzdWNoIG90aGVyIGRhdGUgYXMgdGhlIHJlcXVlc3RlZCBSZWdpb25hbCBUcmFuc21pc3Npb24gU2VydmljZSBpcyBwZXJtaXR0ZWQgdG8gYmVjb21lIGVmZmVjdGl2ZSBieSB0aGUgQ29tbWlzc2lvbiwgaWYgYXBwbGljYWJsZS4gIFJlZ2lvbmFsIFRyYW5zbWlzc2lvbiBTZXJ2aWNlIHVuZGVyIHRoaXMgU2VydmljZSBBZ3JlZW1lbg0KdCBzaGFsbCB0ZXJtaW5hdGUgb24gc3VjaCBkYXRlIGFzIGlzIG11dHVhbGx5IGFncmVlZCB1cG9uIGJ5IHRoZSBUcmFuc21pc3Npb24gQ3VzdG9tZXIgYW5kIHRoZSBSVFAsIGJ1dCBubyBsYXRlciB0aGFuIHRoZSBlYXJsaWVzdCB0byBvY2N1ciBvZiAoaSkgdGhlIGRhdGUgb2Ygd2l0aGRyYXdhbCBvZiB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTM1MDY1ODAgUmVnaW9uYWwgVGFyaWZmfXtccnRsY2hcZmNzMSANClxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiAgYnkgdGhlIFJUUCwgb3IgKGlpKSB0aGUgZGF0ZSBvZiB0ZXJtaW5hdGlvbiBvZiB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTM1MDY1ODAgUmVnaW9uYWwgVGFyaWZmfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgIGJ5IHRoZSBSVFBzLg0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiANClxwYXIge1xsaXN0dGV4dFxwYXJkXHBsYWluXGx0cnBhciBccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxjczE5XGRiY2hcYWYxM1xjaGFyc2NhbGV4MFxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYxM1xsb2NoXGYwIDcuMFx0YWJ9fVxwYXJkIFxsdHJwYXJccWwgXGZpLTcyMFxsaTcyMFxyaTBcd2lkY3RscGFyDQpcamNsaXN0dGFiXHR4NzIwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cbHMyMlxhZGp1c3RyaWdodFxyaW4wXGxpbjcyMFxpdGFwMFxwYXJhcnNpZDMwMTg3MjQge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNzMTlcY2YwXGRiY2hcYWYxM1xjaGFyc2NhbGV4MFxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYxM1xsb2NoXGYwIA0KVHJhbnNtaXNzaW9uIEN1c3RvbWVyIGFja25vd2xlZGdlcyBhbmQgYWdyZWVzIHRoYXQgdGhlIFJUUCBtYXkgd2l0aGRyYXcgYXQgYW55IHRpbWUgaXRzIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxOVxjZjBcZGJjaFxhZjEzXGNoYXJzY2FsZXgwXGluc3JzaWQxMzUwNjU4MCBcaGljaFxhZjBcZGJjaFxhZjEzXGxvY2hcZjAgUmVnaW9uYWwgVGFyaWZmfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIA0KXGNzMTlcY2YwXGRiY2hcYWYxM1xjaGFyc2NhbGV4MFxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYxM1xsb2NoXGYwICBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIHRoZXJlb2YgYW5kIHRoYXQgZWZmZWN0aXZlIHVwb24gd2l0aGRyYXdhbCB0aGlzIFNlcnZpY2UgQWdyZWVtZW50IHNoYWxsIGF1dG9tYXRpY2FsbHkgdGVybWlcaGljaFxhZjBcZGJjaFxhZjEzXGxvY2hcZjAgDQpuYXRlIHNvbGVseSB3aXRoIHJlc3BlY3QgdG8gdGhlIFJUUCwgd2l0aG91dCBhbnkgYWN0aW9uIGJ5IGFueSBwYXJ0eSBoZXJldG8uICB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNzMTlcY2YwXGluc3JzaWQxMDEwMzUzNlxjaGFycnNpZDI5NzczNjAgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxOVxjZjBcaW5zcnNpZDExNTQ4NzI4IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGk3MjBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMjk3NzM2MCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY3MxOVxjZjBcaW5zcnNpZDI5NzczNjAgDQpccGFyIHtcbGlzdHRleHRccGFyZFxwbGFpblxsdHJwYXIgXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcY2YxXGluc3JzaWQxMDEwMzUzNiBcaGljaFxhZjBcZGJjaFxhZjBcbG9jaFxmMCA4LjBcdGFifX1ccGFyZCBcbHRycGFyXHFsIFxmaS03MjBcbGk3MjBccmkwXHdpZGN0bHBhcg0KXGpjbGlzdHRhYlx0eDcyMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGxzMjJcYWRqdXN0cmlnaHRccmluMFxsaW43MjBcaXRhcDBccGFyYXJzaWQzMDE4NzI0IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgDQpBbnkgbm90aWNlIG9yIHJlcXVlc3QgbWFkZSB0byBvciBieSBhIHBhcnR5IHJlZ2FyZGluZyB0aGlzIFNlcnZpY2UgQWdyZWVtZW50IHNoYWxsIGJlIG1hZGUgdG8gdGhlIHJlcHJlc2VudGF0aXZlKHMpIG9mIHRoZSBvdGhlciBwYXJ0eSBvciBwYXJ0aWVzIGFzIGluZGljYXRlZCBiZWxvdzoNClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTcyMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW43MjBcaXRhcDBccGFyYXJzaWQyNzE5NjA4IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQxMDEwMzUzNlxjaGFycnNpZDE0NDkzNzU5IFJUUDoNClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpNzIwXHJpMFx3aWRjdGxwYXJcdHg1NDAwXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW43MjBcaXRhcDBccGFyYXJzaWQyNzE5NjA4IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgTmFtZTogX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClx1bFxpbnNyc2lkMTAxMDM1MzYgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQxMDEwMzUzNlxjaGFycnNpZDE0NDkzNzU5IA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiBBZGRyZXNzOiBfX19fX19fX19fX19fX19fX19fX19fX19fX19ffXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkMTAxMDM1MzYgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQxMDEwMzUzNlxjaGFycnNpZDE0NDkzNzU5IA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiBBZGRyZXNzIDI6IF9fX19fX19fX19fX19fX19fX19fX19fX19fX199e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQxMDEwMzUzNiBcdGFiIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDEwMTAzNTM2XGNoYXJyc2lkMTQ0OTM3NTkgDQpccGFyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IENpdHksIFNUIFppcDogfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkMTAxMDM1MzYgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQxMDEwMzUzNlxjaGFycnNpZDE0NDkzNzU5IA0KXHBhciB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiBBdHRlbnRpb246IF9fX19fX19fX19fX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDEwMTAzNTM2IFx0YWIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkMTAxMDM1MzZcY2hhcnJzaWQ3MDE0MDM4IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGk3MjBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMjcxOTYwOCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciANClxwYXIgDQpccGFyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxpbnNyc2lkMTAxMDM1MzZcY2hhcnJzaWQxNDQ5Mzc1OSBUcmFuc21pc3Npb24gQ3VzdG9tZXI6DQpccGFyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IE5hbWU6IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXw0KXHBhciBBZGRyZXNzOiBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTcyMFxyaTBcd2lkY3RscGFyXHR4NTQwMFx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMjcxOTYwOCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IEFkZHJlc3MgMjogX19fX19fX19fX19fX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClx1bFxpbnNyc2lkMTAxMDM1MzYgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQxMDEwMzUzNlxjaGFycnNpZDcwMTQwMzggDQpccGFyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IENpdHksIFNUIFppcDogfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkMTAxMDM1MzYgXHRhYiB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXHVsXGluc3JzaWQxMDEwMzUzNlxjaGFycnNpZDE0NDkzNzU5IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGk3MjBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMjcxOTYwOCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IEF0dGVudGlvbjogX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fDQpccGFyIA0KXHBhciB7XGxpc3R0ZXh0XHBhcmRccGxhaW5cbHRycGFyIFxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGNmMVxpbnNyc2lkMTAxMDM1MzYgXGhpY2hcYWYwXGRiY2hcYWYwXGxvY2hcZjAgOS4wXHRhYn19XHBhcmQgXGx0cnBhclxxbCBcZmktNzIwXGxpNzIwXHJpMFx3aWRjdGxwYXINClxqY2xpc3R0YWJcdHg3MjBcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xsczIyXGFkanVzdHJpZ2h0XHJpbjBcbGluNzIwXGl0YXAwXHBhcmFyc2lkMzAxODcyNCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IFRoZSB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMzUwNjU4MCBSZWdpb25hbCBUYXJpZmZ9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgDQpcaW5zcnNpZDEwMTAzNTM2ICBpcyBpbmNvcnBvcmF0ZWQgYW5kIG1hZGUgYSBwYXJ0IH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDExMDgzMTA1IG9mIHRofXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwNDYzOSBpc317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDExMDgzMTA1ICBTZXJ2aWNlIEFncmVlbWVudH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxpbnNyc2lkMTAxMDM1MzYgLg0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDAge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiANClxwYXIgSU4gV0lUTkVTUyBXSEVSRU9GLCB0aGUgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDU0Njc5NiBwfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgYXJ0aWVzIGhhdmUgY2F1c2VkIHRoaXMgU2VydmljZSBBZ3JlZW1lbnQgdG8gYmUgZXhlY3V0ZWQgYnkgdGhlaXIgcmVzcGVjdGl2ZSBhdXRob3JpemVkIG9mZmljaWFscy4NClxwYXIgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDEwMjQ5NzQzIHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxiXGluc3JzaWQxMDEwMzUzNiBSVFA6ICB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDEwMTAzNTM2XGNoYXJyc2lkNzAxNDAzOCANClxwYXIgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgDQpccGFyIEJ5Olx0YWIgX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MDQ2MzkgX19fX19fX19fX19fX19fX19fX19fX19ffXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgXHRhYiANClxwYXIgXHRhYiBOYW1lXHRhYiANClxwYXIgDQpccGFyIFx0YWIgX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MDQ2MzkgX19fX19fX19fX19fX19fX19fX19fX19ffXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFx1bFxpbnNyc2lkMTAxMDM1MzZcY2hhcnJzaWQ3MDE0MDM4IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcZmk3MjBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQyNzE5NjA4IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgUHJpbnRlZCBOYW1lXHRhYiANClxwYXIgDQpccGFyIF9fX19fX19fX19fX19fX199e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjA0NjM5IF9fX19fX19fX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciBUaXRsZQ0KXHBhciANClxwYXIgX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQ2MDQ2MzkgX19fX19fX19fX19fX19fX19fX19fX19ffXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgDQpccGFyIERhdGVccGFnZSANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMTAyNDk3NDMge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDEwMTAzNTM2XGNoYXJyc2lkNzAxNDAzOCBUcmFuc21pc3Npb24gQ3VzdG9tZXI6DQpccGFyIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQyNzE5NjA4IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgQnk6XHRhYiBfX19fX19fX19fX19fX19ffXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwNDYzOSANCl9fX19fX19fX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IFx0YWIgDQpccGFyIFx0YWIgTmFtZVx0YWIgDQpccGFyIA0KXHBhciBcdGFiIF9fX19fX19fX19fX19fX199e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjA0NjM5IF9fX19fX19fX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcdWxcaW5zcnNpZDEwMTAzNTM2XGNoYXJyc2lkNzAxNDAzOCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGZpNzIwXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMjcxOTYwOCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IFByaW50ZWQgTmFtZVx0YWIgDQpccGFyIA0KXHBhciBfX19fX19fX19fX19fX19ffXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDYwNDYzOSBfX19fX19fX19fX19fX19fX19fX19fX199e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiANClxwYXIgVGl0bGUNClxwYXIgDQpccGFyIF9fX19fX19fX19fX19fX199e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQ0NjA0NjM5IF9fX19fX19fX19fX19fX19fX19fX19fX317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciBEYXRlDQpccGFyIA0KXHBhciB9XHBhcmQgXGx0cnBhclxxYyBcbGkwXHJpMFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQxMDI5Mjk1OCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxrZXJuaW5nMlxpbnNyc2lkMTAxMDM1MzYgRVhISUJJVCB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGJca2VybmluZzJcaW5zcnNpZDEyMDY4MzI3IEN9ew0KXHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcYlxrZXJuaW5nMlxpbnNyc2lkMTAxMDM1MzYgDQpccGFyIEZPUk0gT0YgQURERU5EVU0NClxwYXIgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDEwMjkyOTU4IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxrZXJuaW5nMlxpbnNyc2lkMTAxMDM1MzYgQnkgZXhlY3V0aW9uIG9mIHRoaXMgYWRkZW5kdW0gKHRoaXMgXCc5M0FkZGVuZHVtXCc5NCkgdG8gdGhlIFdlc3RDb25uZWN0IH17DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxrZXJuaW5nMlxpbnNyc2lkMTM5MDY2MDUgQW1lbmRlZCBhbmQgUmVzdGF0ZWQgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxrZXJuaW5nMlxpbnNyc2lkMTAxMDM1MzYgUG9pbnQtdG8tUG9pbnQgUmVnaW9uYWwgVHJhbnNtaXNzaW9uIFNlcnZpY2UgUGFydGljaXBhdGlvbiBBZ3JlZW1lbnQsICh0aGUgXCc5M1BhcnRpY2lwYXRpb24gQWdyZWVtZW50XCc5NA0KKSwgdGhlIHVuZGVyc2lnbmVkIGhlcmVieSBqb2lucyBpbiB0aGUgZXhlY3V0aW9uIG9mIHRoZSBQYXJ0aWNpcGF0aW9uIEFncmVlbWVudCwgYnkgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgDQphbmQgYW1vbmcgQXJpem9uYSBQdWJsaWMgU2VydmljZSBDb21wYW55LCBFbCBQYXNvIEVsZWN0cmljIENvbXBhbnksIFB1YmxpYyBTZXJ2aWNlIENvbXBhbnkgb2YgQ29sb3JhZG8sIFB1YmxpYyBTZXJ2aWNlIENvbXBhbnkgb2YgTmV3IE1leGljbywgU291dGh3ZXN0IFRyYW5zbWlzc2lvbiBDb29wZXJhdGl2ZSwgSW5jLiwgVHJpLVN0YXRlIEdlbmVyYXRpb24gYW5kDQogVHJhbnNtaXNzaW9uIEFzc29jaWF0aW9uLCBJbmMuLCBUdWNzb24gRWxlY3RyaWMgUG93ZXIgQ29tcGFueSwgV2VzdGVybiBBcmVhIFBvd2VyIEFkbWluaXN0cmF0aW9uIGFuZCB9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGtlcm5pbmcyXGluc3JzaWQxMDEwMzUzNiBlYWNoIG90aGVyIHBlcnNvbiB0aGF0IGJlY29tZXMgYX17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBca2VybmluZzJcaW5zcnNpZDc0MzE3NCBufXsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGtlcm5pbmcyXGluc3JzaWQxMDEwMzUzNiAgUlRQIHRoZXJldW5kZXIgYWZ0ZXIgdGhlfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxrZXJuaW5nMlxpbnNyc2lkNjE2NTUxNSAgRXhlY3V0aW9uIERhdGV9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGtlcm5pbmcyXGluc3JzaWQxMDEwMzUzNiAgYW5kIHB1cnN1YW50IHRvIHRoZSB0ZXJtcyB0aGVyZW9mIH17DQpccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgKGVhY2gsIGF9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMzUwNTkyOCBufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgIFwnOTNSVFBcJzk0IGFuZCwgY29sbGVjdGl2ZWx5LCB0aGUgXCc5M1JUUHNcJzk0KS4gIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCANClxrZXJuaW5nMlxpbnNyc2lkMTAxMDM1MzYgQnkgZXhlY3V0aW5nIHRoaXMgQWRkZW5kdW0sIHRoZSB1bmRlcnNpZ25lZCBoZXJlYnkgYWdyZWVzIHRoYXQgaXQgYmVjb21lfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxrZXJuaW5nMlxpbnNyc2lkMTM5MDY2MDUgc317XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBca2VybmluZzJcaW5zcnNpZDEwMTAzNTM2IA0KIGEgUGFydHkgdG8gdGhlIFBhcnRpY2lwYXRpb24gQWdyZWVtZW50IGFuZCBhZ3JlZXMgdG8gYmUgYm91bmQgYnkgYWxsIG9mIHRoZSB0ZXJtcyBhbmQgcHJvdmlzaW9ucyBvZiB0aGUgUGFydGljaXBhdGlvbiBBZ3JlZW1lbnQgYXBwbGljYWJsZSB0byBhIFBhcnR5IHRoZXJldG8sIHN1YmplY3QgdG8gYW55IGFwcGxpY2FibGUgUmVndWxhdG9yeSBBcHByb3ZhbHMufXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgDQogIEVmZmVjdGl2ZSBhcyBvZiB0aGUgZGF0ZSB0aGlzIEFkZGVuZHVtIGlzIGRlY2xhcmVkIGVmZmVjdGl2ZSBieSB0aGUgQ29tbWlzc2lvbiwgaWYgYXBwbGljYWJsZSwgYW5kIHVwb24gcmVjZWlwdCBvZiBhbnkgb3RoZXIgYXBwbGljYWJsZSBSZWd1bGF0b3J5IEFwcHJvdmFscywgdGhlIHVuZGVyc2lnbmVkIHNoYWxsIGJlIGF9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMTg4ODk3IG59e1xydGxjaFxmY3MxIFxhZjAgDQpcbHRyY2hcZmNzMCBcaW5zcnNpZDEwMTAzNTM2ICBSVFAgZm9yIGFsbCBwdXJwb3NlcyBvZiB0aGUgUGFydGljaXBhdGlvbiBBZ3JlZW1lbnQsIHNoYWxsIGJlIGJvdW5kIGJ5IHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyB0aGVyZW9mLCBhbmQgc2hhbGwgaGF2ZSBhbGwgb2YgdGhlIHJpZ2h0cywgZHV0aWVzIGFuZCBvYmxpZ2F0aW9ucyBvZiBhfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTE4ODg5NyBufXsNClxydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiAgUlRQIHVuZGVyIHRoZSBQYXJ0aWNpcGF0aW9uIEFncmVlbWVudC4gIH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBca2VybmluZzJcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciANClxwYXIgVGhlIHVuZGVyc2lnbmVkIHJlcHJlc2VudHMgYW5kIHdhcnJhbnRzIHRvIHRoZSBvdGhlciBSVFBzIHRoYXQgZWFjaCBvZiB0aGUgcmVwcmVzZW50YXRpb25zIGFuZCB3YXJyYW50aWVzIGluIEFydGljbGUgNyBvZiB0aGV9e1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGtlcm5pbmcyXGluc3JzaWQxNjA4Njg1MiAgfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxrZXJuaW5nMlxpbnNyc2lkMTAxMDM1MzYgDQpQYXJ0aWNpcGF0aW9uIEFncmVlbWVudCBpcyB0cnVlIGFuZCBjb3JyZWN0IHdpdGggcmVzcGVjdCB0byB0aGUgdW5kZXJzaWduZWQgYXMgb2YgdGhlIGRhdGUgaGVyZW9mLiAgDQpccGFyIH1ccGFyZFxwbGFpbiBcbHRycGFyXHM0NFxxaiBcbGkwXHJpMFxzbDM2MFxzbG11bHQxXHdpZGN0bHBhclx0eC0xNDQwXHR4LTcyMFx3cmFwZGVmYXVsdFxoeXBocGFyMFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGlsdmwxMlxvdXRsaW5lbGV2ZWwwXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDEwMjkyOTU4IFxydGxjaFxmY3MxIFxhZjBcYWZzMjBcYWxhbmcxMDI1IFxsdHJjaFxmY3MwIFxmczI0XGNncmlkIHsNClxydGxjaFxmY3MxIFxhYlxhZjAgXGx0cmNoXGZjczAgXGJcaW5zcnNpZDEwMTAzNTM2IA0KXHBhciB9e1xydGxjaFxmY3MxIFxhYlxhZjAgXGx0cmNoXGZjczAgXGJcdWxcaW5zcnNpZDEwMTAzNTM2IFtORVcgUlRQXQ0KXHBhciANClxwYXIgfVxwYXJkXHBsYWluIFxsdHJwYXJcczYwXHFsIFxsaTBccmkwXGtlZXBca2VlcG5cd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMTAyOTI5NTggXHJ0bGNoXGZjczEgXGFmMVxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcbGFuZzEwMzNcbGFuZ2ZlMTAzM1xjZ3JpZFxsYW5nbnAxMDMzXGxhbmdmZW5wMTAzMyB7XHJ0bGNoXGZjczEgDQpcYWYxIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTAxMDM1MzYgQnkgX19fX19fX19fX19fX19fX19fX19fX19fX19fX18NClxwYXIgVGl0bGUgX19fX19fX19fX19fX19fX19fX19fX19fX19fXw0KXHBhciB9XHBhcmQgXGx0cnBhclxzNjBccWwgXGxpMFxyaTBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMTAyOTI5NTgge1xydGxjaFxmY3MxIFxhZjEgXGx0cmNoXGZjczAgXGluc3JzaWQxMDEwMzUzNiBfX19fX19fX19fX19fX19fX19fX19fX19fX19fXw0KXHBhciBfX19fX19fX19fX19fX19fX19fX19fX19fX19fXw0KXHBhciBfX19fX19fX19fX19fX19fX19fX19fX19fX19fXw0KXHBhciANClxwYXIgQXR0bjogX19fX19fX19fX19fX19fX19fX19fX19fDQpccGFyIA0KXHBhciBUZWxlcGhvbmU6ICAoW19fX10pIFtfX19fX19fX19fX19dDQpccGFyIEZhY3NpbWlsZTogIChbX19fXSkgW19fX19fX19fX19fX10NClxwYXIgRW1haWw6ICBbX19fX19fX19fX19fX19fX19fX19fXw0KXHBhciB9XHBhcmRccGxhaW4gXGx0cnBhclxxbCBcbGkwXHJpMFxzbC0yMDBcc2xtdWx0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQxMzMwOTYgXHJ0bGNoXGZjczEgXGFmMFxhZnMyNFxhbGFuZzEwMjUgXGx0cmNoXGZjczAgXGZzMjRcY2YxXGxhbmcxMDMzXGxhbmdmZTEwMzNcY2dyaWRcbGFuZ25wMTAzM1xsYW5nZmVucDEwMzMge1xydGxjaFxmY3MxIA0KXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEzNzY3ODI3IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFxzbC0yMDBcc2xtdWx0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQxNTY4OTY4OSB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDEzMzA5NiANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcc2wtMjAwXHNsbXVsdDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNDIwMDE2NCB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDQyMDAxNjQgDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHNsLTIwMFxzbG11bHQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDExNTQ4NzI4IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNDEzMzAyNyANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcc2wtMjAwXHNsbXVsdDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9ccHJhdXRoMVxwcmRhdGUtMjAyODc1NDI3MFxhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ2NzA0OTM4IHtcKlxvbGRwcHJvcHMgXHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFxzbC0yMDBcc2xtdWx0MA0KXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDY3MDQ5MzggfXtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkMTE1NDg3MjggDQpccGFyIH1ccGFyZCBcbHRycGFyXHFsIFxsaTBccmkwXHNsLTIwMFxzbG11bHQwXHdpZGN0bHBhclx3cmFwZGVmYXVsdFxhc3BhbHBoYVxhc3BudW1cZmFhdXRvXGFkanVzdHJpZ2h0XHJpbjBcbGluMFxpdGFwMFxwYXJhcnNpZDExOTMxMzI5IHtccnRsY2hcZmNzMSBcYWYwIFxsdHJjaFxmY3MwIFxpbnNyc2lkNjcwNDkzOCANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcc2wtMjAwXHNsbXVsdDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkMTQxODAzOTgge1xydGxjaFxmY3MxIFxhZjAgXGx0cmNoXGZjczAgXGluc3JzaWQxMTkzMTMyOSANClxwYXIgfVxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcc2wtMjAwXHNsbXVsdDBcd2lkY3RscGFyXHdyYXBkZWZhdWx0XGFzcGFscGhhXGFzcG51bVxmYWF1dG9cYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkNjA0MDMwMyB7XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDE0MTgwMzk4IA0KXHBhciB9XHBhcmQgXGx0cnBhclxxbCBcbGkwXHJpMFxzbC0yMDBcc2xtdWx0MFx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xwcmF1dGgxXHByZGF0ZTExOTI1MTI2MjZcYWRqdXN0cmlnaHRccmluMFxsaW4wXGl0YXAwXHBhcmFyc2lkODY3MDU1NCB7XCpcb2xkcHByb3BzIFxwYXJkIFxsdHJwYXJccWwgXGxpMFxyaTBcc2wtMjAwXHNsbXVsdDANClx3aWRjdGxwYXJcd3JhcGRlZmF1bHRcYXNwYWxwaGFcYXNwbnVtXGZhYXV0b1xhZGp1c3RyaWdodFxyaW4wXGxpbjBcaXRhcDBccGFyYXJzaWQ4NjcwNTU0IH17XHJ0bGNoXGZjczEgXGFmMCBcbHRyY2hcZmNzMCBcaW5zcnNpZDYwNDAzMDMgDQpccGFyIH17XCpcdGhlbWVkYXRhIDUwNGIwMzA0MTQwMDA2MDAwODAwMDAwMDIxMDA4MjhhYmMxM2ZhMDAwMDAwMWMwMjAwMDAxMzAwMDAwMDViNDM2ZjZlNzQ2NTZlNzQ1ZjU0Nzk3MDY1NzM1ZDJlNzg2ZDZjYWM5MWNiNmFjMzMwMTA0NWY3ODVmZTgzZDBiNmQ4DQo3MmJhMjhhNWQ4Y2VhMjQ5Nzc3ZDJjZDIwZjE4ZTRiMTJkNmE4Zjg0MzQwOWM5ZGY3N2VjYjg1MGJhMDgyZDc0MjMxMDYyY2U5OTdiNTVhZThmZTNhMDBlMTg5M2YzNTRlOTU1NWU2ODg1NjQ3ZGUzYThhYmY0ZmJlZTI5YmJkNw0KMmEzMTUwMDM4MzI3YWNmNDA5OTM1ZWQ3ZDc1N2U1ZWUxNDMwMjk5OWE2NTRlOTllMzkzYzE4OTM2YzhmMjNhNGRjMDcyNDc5Njk3ZDFjODFlNTFhM2IxM2MwN2U0MDg3ZTZiNjI4ZWU4Y2Y1YzQ0ODljZjFjNGQwNzVmOTJhMGINCjQ0ZDdhMDdhODNjODJmMzA4YWM3YjBhMGYwZmJmOTBjMjQ4MDk4MGI1OGFiYzczMzYxNWFhMmQyMTBjMmUwMmNiMDQ0MzAwNzZhN2VlODMzZGZiNmNlNjJlM2VkN2UxNDY5M2U4MzE3ZDhjZDA0MzNiZjVjNjBmNTNmZWEyZmU3DQowNjViZDgwZmFjYjY0N2U5ZTI1YzdmYzQyMWZkMmRkYjUyNmIyZTkzNzNmZWQ0YmI5MDJlMTgyZTk3YjdiNDYxZTZiZmFkM2YwMTAwMDBmZmZmMDMwMDUwNGIwMzA0MTQwMDA2MDAwODAwMDAwMDIxMDBhNWQ2YTdlN2MwMDAwMA0KMDAzNjAxMDAwMDBiMDAwMDAwNWY3MjY1NmM3MzJmMmU3MjY1NmM3Mzg0OGZjZjZhYzMzMDBjODdlZjg1YmQ4M2QxN2Q1MWQyYzMxODI1NzYyZmE1OTA0MzJmYTM3ZDAwZTEyODdmNjgyMjFiZGIxYmViZGI0ZmM3MDYwYWJiMDgNCjg0YTRlZmY3YTkzZGZlYWU4YmY5ZTE5NGU3MjAxNjlhYWEwNmMzZTI0MzNmY2I2OGUxNzYzZGJmN2Y4MmM5ODVhNGE3MjUwODViNzg3MDg2YTM3YmRiYjU1ZmJjNTBkMWEzM2NjZDMxMWJhNTQ4YjYzMDk1MTIwZjg4ZDk0ZmJjDQo1MmFlNDI2NGQxYzkxMGQyNGE0NWRiMzQ2MjI0N2ZhNzkxNzE1ZmQ3MWY5ODllMTllMDM2NGNkM2Y1MTY1MmQ3Mzc2MGFlOGZhOGM5ZmZiM2MzMzBjYzllNGZjMTdmYWYyY2U1NDUwNDZlMzc5NDRjNjllNDYyYTFhODJmZTM1Mw0KYmQ5MGE4NjVhYWQ0MWVkMGI1YjhmOWQ2ZmQwMTAwMDBmZmZmMDMwMDUwNGIwMzA0MTQwMDA2MDAwODAwMDAwMDIxMDA2Yjc5OTYxNjgzMDAwMDAwOGEwMDAwMDAxYzAwMDAwMDc0Njg2NTZkNjUyZjc0Njg2NTZkNjUyZjc0NjgNCjY1NmQ2NTRkNjE2ZTYxNjc2NTcyMmU3ODZkNmMwY2NjNGQwYWMzMjAxMDQwZTE3ZGExNzc5MGQ5Mzc2M2JiMjg0NTYyYjJjYmFlYmJmNjAwNDM5YzFhNDFjN2EwZDI5ZmRiZDdlNWUzODMzN2NlZGYxNGQ1OWI0YjBkNTkyYzljDQowNzBkOGE2NWNkMmU4OGI3ZjA3YzJjYTcxYmE4ZGE0ODFjYzUyYzZjZTFjNzE1ZTZlOTc4MThjOWI0OGQxM2RmNDljODczNTE3ZDIzZDU5MDg1YWRiNWRkMjBkNmI1MmJkNTIxZWYyY2RkNWViOTI0NmEzZDhiNDc1N2U4ZDNmNw0KMjllMjQ1ZWIyYjI2MGEwMjM4ZmQwMTAwMDBmZmZmMDMwMDUwNGIwMzA0MTQwMDA2MDAwODAwMDAwMDIxMDA5NmI1YWRlMjk2MDYwMDAwNTAxYjAwMDAxNjAwMDAwMDc0Njg2NTZkNjUyZjc0Njg2NTZkNjUyZjc0Njg2NTZkNjUNCjMxMmU3ODZkNmNlYzU5NGY2ZmRiMzYxNGJmMGZkODc3MjA3NDZmNjMyNzc2MWEwNzc1OGFkOGIxOWIyZDRkMWJjNDZlODcxZTY5ODk5NmQ4NTBhMjQwZDI0OTdkMWJkYWUzODAwMWMzYmE2MTg3MTVkODZkODc2MTViODExNmQ4DQphNWZiMzRkOTNhNmMxZGQwYWZiMDQ3NTI5MmM1NTg1ZTkyMzZkODhhYWQzZTI0MTJmOWUzZmJmZjFlMWZhOWFiZDdlZWM3MGMxZDEyMjEyOTRmZGE1ZWZkNzJjZDQzMjRmMTc5NDA5M2IwZWRkZDFlZjYyZmFkNzk0ODJhOWMwNA0KOThmMTg0YjRiZDI5OTFkZWI1OGRmN2RmYmI4YWQ3NTU0NDYyODI2MDdkMjJkNzcxZGI4Yjk0NGFkNzk3OTZhNDBmYzM1ODVlZTYyOTQ5NjA2ZWNjNDU4YzE1YmM4YTcwMjkxMGY4MDhlOGM2NmM2OWI5NTY1YjVkOGEzMTRkM2MNCjk0ZTAxOGM4ZGUxYThmYTk0ZmQwNTA5M2Y0MzY3MmUyM2QwNmFmODk5MjdhYzA2NzYyYTA0OTEzNjc4NWMxMDYwNzc1OGQ5MDUzZDk2NTAyMWQ2MmQ2ZjY4MDRmYzA4Zjg2ZTRiZWYyMTBjMzUyYzE0NGRiYWI5OTlmYjdiNDcxDQo3NTA5YWY2NzhiOTg1YWIwYjZiNGFlNmY3ZWQ5YmE2YzQxNzBiMDZjNzg4YTcwNTQzMGFkZjcxYmFkMmI1YjA1N2QwMzYwNmExZWQ3ZWJmNWJhYmQ3YTQxY2YwMGIwZWY4M2E2NTY5NjMyY2Q0NjdmYWRkZWM5Njk5NjQwZjY3MQ0KOWU3NmI3ZDZhYzM1NWM3Yzg5ZmVjYTljY2NhZDRlYTdkMzZjNjViMjU4YTIwNjY0MWYxYjczZjhiNWRhNmE2MzczZDljMTFiOTBjNTM3ZTdmMDhkY2U2NmI3YmJlYWUwMGRjOGUyNTdlN2YwZmQyYmFkZDU4NjhiMzdhMDg4ZDENCmU0NjAwZWFkMWRkYWVmNjdkNDBiYzg5OGIzZWQ0YWY4MWFjMGQ3NmExOTdjODY4MjY4MjhhMjRiYjMxOGYzNDQyZDhhYjUxOGRmZTNhMjBmMDAwZDY0NThkMTA0YTk2OTRhYzZkODg3MjhlZWUyNzgyNDI4ZDYwY2YwM2FjMWE1DQoxOTNiZTRjYmI5MjFjZDBiNDk1ZmQwNTRiNWJkMGY1MzBjMTkzMWEzZjdlYWY5ZjdhZjllM2Y0NWM3MGY5ZTFkM2ZmOGU5ZjhlMWMzZTMwNzNmNWE0MmNlYWE2ZDljODRlNTU1MmZiZmZkZWNjZmM3MWZhMzNmOWU3ZWYzZjJkMQ0KMTdkNTc4NTljNmZmZmFjMzI3YmZmY2ZjNzkzNTEwZDI2NzI2Y2U4YjJmOWZmY2Y2ZWNjOThiYWYzZWZkZmRiYjQ3MTVmMDRkODE0NzY1Zjg5MGM2NDRhMjliZTQwOGVkZjMxODE0MzM1NjcxMjUyNzIzNzFiZTE1YzMwOGQzZjINCjhhY2QyNDk0MzhjMTlhNGIwNWZkOWU4YTFjZjRjZDI5NjY5OTc3MWMzOTNhYzRiNWUwMWQwMWU1YTMwYTc4N2Q3MmNmMTE3ODEwODk4OWEyMTU5Yzc3YTJkODAxZWU3MmNlM2E1YzU0NWE2MTQ3ZjMyYTk5NzkzODQ5YzI2YWU2DQo2MjUyYzZlZDYzN2M1OGM1YmI4YjEzYzdiZmJkNDkwYTc1MzMwZjRiNDdmMTZlNDQxYzMxZjcxODRlMTQwZTQ5NDIxNGQyNzNmYzgwOTAwYWVkZWU1MmVhZDg3NTk3ZmE4MjRiM2U1NmU4MmU0NTFkNGMyYjRkMzJhNDIzMjc5YQ0KNjY4YmI2NjkwYzdlOTk1NmU5MGNmZTc2NmNiMzdiMDc3NTM4YWJkMjdhOGIxY2JhNDhjODBhY2MyYTg0MWYxMmU2OThmMTNhOWUyODFjNTc5MTFjZTI5ODk1MGQ3ZTAzYWJhODRhYzhjMTU0Zjg2NTVjNGYyYWYwNzQ0ODE4NDcNCmJkODA0ODU5YjVlNjk2MDA3ZDRiNGVkZmMxNTBiMTJhZGRiZWNiYTZiMThiMTQ4YTFlNTRkMWJjODEzOTJmMjNiN2Y4NDEzN2MyNzE1YTg1MWRkMDI0MmE2MzNmOTAwNzEwYTIxOGVkNzE1NTA1ZGZlNTZlODZlODc3ZjAwMzRlDQoxNmJhZmIwZTI1OGViYjRmYWYwNmI3NjllODg4MzQwYjEwM2QzMzExZGE5NzUwYWE5ZDBhMWNkM2U0ZWZjYTMxYTM1MDhmNmQwYzVjNWMzOTg2MDJmOGUyZWJjNzE1OTFmNWI2MTZlMjRkZDg5M2FhMzI2MWZiNDRmOTVkODQzYg0KNTk3NGJiNWMwNGY0ZWRhZmI5NWI3ODkyZWMxMTA4ZjNmOThkZTc1ZGM5N2Q1NzcyYmRmZjdjYzk1ZDk0Y2Y2NzJkYjRiM2RhMGE2NTU3ZjcwZGI2MjkzNjJkNzJiY2IwNDMxZTUzYzYwNjZhY2FjODBkNjk5YTY0MDlmYjQ0ZDANCjg3NDFiZGNlOWMwZTQ5NzE2MjRhMjM3OGNjZWFiYTgzMGIwNTM2NmI5MGUwZWEyM2FhYTI0MTg0NTM2OGIwZWI5ZTI2MTJjYThjNzQyODUxY2EyNTFjZWNjYzcwMjU2ZDhkODcyNjVkZDk2MzYxNTMxZjE4NmMzZDkwNThlZGYyDQpjMDBlYWZlOGUxZmM1YzUwOTAzMWJiNGQ2ODBlOWYzOWEzMTU0ZGUwYWNjYzU2YWU2NDQ0NDFlZGQ3NjE1NmQ3NDI5ZDk5NWJkZDg4NjY0YTlkYzNhZDUwMTk3YzM4YWYxYTBjMTZkNjg0MDYwNDQxZGIwMjU2NWU4NWYzYjk2Ng0KMGQwNzEzY2M0OGEwZWQ2ZWY3ZGVkYzJkYzYwYjE3ZTkyMjE5ZTE4MDY0M2VkMjdhY2ZmYmE4NmU5Yzk0Yzc4YWI5MDk4MGQ4YTlmMDkxM2VlNDlkNjJiNTEyYjc5NjI2ZmIwNmRjY2VlMmE0MzJiYmM2MDI3NmI5ZjdkZWM0NGINCjc5MDRjZmJjYTRmM2Y2NDQzYWIyYTQ5YzljMmM0MTQ3NmRhZmQ1NWM2ZTdhYzhjNzY5ZGIxYmMzOTkxNjFlZTMxNGJjMmU3NWNmODc1OTA4MTc0M2JlMTIzNmVjNGY0ZDY2OTNlNTMzNmZiNjcyYzVkYzI0YThjMzM1ODViNWZiDQo5Y2MyNGUxZDQ4ODU1NDViNTg0NjM2MzRjYzU0MTYwMjJjZDE5Y2FjZmNjYjRkMzBlYjQ1Mjk2MDIzZmQzNWE0NTg1OTgzNjBmOGQ3YTQwMDNiYmFhZTI1ZTMzMWYxNTVkOWQ5YTUxMTZkM2JmYjlhOTU1MjNlNTE0NDBjYTJlMA0KMDg4ZGQ4NDRlYzYzNzBiZjBlNTVkMDI3YTAxMmFlMjY0YzQ1ZDAyZjcwOGZhNmFkNmRhNmRjZTI5YzI1NWRmOWY2Y2FlMGVjMzg2NjY5ODRiMzcyYWI1MzM0Y2Y2NDBiMzc3OTVjYzg2MGRlNGFlMjgxNmU5NWIyMWJlNWNlYWYNCjhhNDlmOTBiNTJhNTFjYzZmZjMzNTVmNDdlMDIzNzA1MmI4MWY2ODAwZmQ3YjgwMjIzOWRhZjZkOGYwYjE1NzFhODQyNjk0NGZkYmU4MGM2YzFkNDBlODgxNmI4OGI4NTY5MDgyYWI4NGMzNmZmMDUzOWQ0ZmY2ZGNlNTkxYTI2DQphZGUxYzBhN2Y2Njk4ODA0ODVmZDQ4NDU4MjkwM2QyODRiMjZmYTRlMjE1NmNmZjYyZTRiOTI2NTg0NGM0NDk1YzQ5NWE5MTU3YjQ0MGUwOTFiZWExYWI4YWFmNzc2MGY0NTEwZWFhNjlhNjQ2NWMwZTA0ZWM2OWZmYjllNjVkMA0KMjhkNDRkNGUzOWRmOWMxYTUyZWNiZDM2MDdmZWU5Y2VjNzI2MzMyOGU1ZDY2MWQzZDBlNGY2MmY0NGFjZDg1NWVkN2FiMzNjZGY3YmNiOGFlODg5NTk5YmQ1YzhiMzAyOTg5NWI2ODI1Njk2ZjZhZjI5YzIzOWI3NWE1YmIxZTYNCjM0NWU2ZWU2YzI4MTE3ZTczNTg2YzFhMjIxNGFlMWJlMDdlOTNmYjBmZjUxZTEzM2ZiNjU0MjZmYTg0M2JlMGZiNTE1YzE4NzA2NGQwY2MyMDZhMmZhOTI2ZDNjOTAyZTkwNzY3MDA0OGQ5MzFkYjRjMWE0NDk1OWQzNjZhZDkzDQpiNjVhYmU1OTVmNzBhNzViZjAzZDYxNmMyZGQ5NTlmYzdkNGU2MzE3Y2Q5OWNiY2VjOWM1OGIzNDc2NjY2MWM3ZDY3NjZjYTFhOWMxYjMyNzUzMTQ4NmM2Zjk0MWM2MzhjNjdjZDIyYTdmNzVlMmEzN2JlMGU4MmRiOGRmOWYzMA0KMjU0ZDMwYzEzNzI1ODFhMWY1MWM5ODNjODBlNGI3MWNjZGQyOGRiZjAwMDAwMGZmZmYwMzAwNTA0YjAzMDQxNDAwMDYwMDA4MDAwMDAwMjEwMDBkZDE5MDlmYjYwMDAwMDAxYjAxMDAwMDI3MDAwMDAwNzQ2ODY1NmQ2NTJmNzQNCjY4NjU2ZDY1MmY1ZjcyNjU2YzczMmY3NDY4NjU2ZDY1NGQ2MTZlNjE2NzY1NzIyZTc4NmQ2YzJlNzI2NTZjNzM4NDhmNGQwYWMyMzAxNDg0Zjc4Mjc3MDg2ZjZmZDNiYTEwOTEyNmRkODhkMGFkZDQwMzg0ZTQzNTBkMzYzZjI0DQo1MWVjZWQwZGFlMmMwODJlODc2MWJlOTk2OWJiOTc5ZGM5MTM2MzMyZGUzMTY4YWExYTA4M2FlOTk1NzE5YWMxNmRiOGVjOGU0MDUyMTY0ZTg5ZDkzYjY0YjA2MDgyOGU2ZjM3ZWQxNTY3OTE0YjI4NGQyNjI0NTIyODJlMzE5OA0KNzIwZTI3NGE5MzljZDA4YTU0Zjk4MGFlMzhhMzhmNTZlNDIyYTNhNjQxYzhiYmQwNDhmNzc1N2RhMGYxOWIwMTdjYzUyNGJkNjIxMDdiZDUwMDE5OTY1MDlhZmZiM2ZkMzgxYTg5NjcyZjFmMTY1ZGZlNTE0MTczZDk4NTA1MjgNCmEyYzZjY2UwMjM5YmFhNGMwNGNhNWJiYWJhYzRkZjAwMDAwMGZmZmYwMzAwNTA0YjAxMDIyZDAwMTQwMDA2MDAwODAwMDAwMDIxMDA4MjhhYmMxM2ZhMDAwMDAwMWMwMjAwMDAxMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwDQowMDAwMDAwMDViNDM2ZjZlNzQ2NTZlNzQ1ZjU0Nzk3MDY1NzM1ZDJlNzg2ZDZjNTA0YjAxMDIyZDAwMTQwMDA2MDAwODAwMDAwMDIxMDBhNWQ2YTdlN2MwMDAwMDAwMzYwMTAwMDAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA0KMDAyYjAxMDAwMDVmNzI2NTZjNzMyZjJlNzI2NTZjNzM1MDRiMDEwMjJkMDAxNDAwMDYwMDA4MDAwMDAwMjEwMDZiNzk5NjE2ODMwMDAwMDA4YTAwMDAwMDFjMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxNDAyMDAwMDc0NjgNCjY1NmQ2NTJmNzQ2ODY1NmQ2NTJmNzQ2ODY1NmQ2NTRkNjE2ZTYxNjc2NTcyMmU3ODZkNmM1MDRiMDEwMjJkMDAxNDAwMDYwMDA4MDAwMDAwMjEwMDk2YjVhZGUyOTYwNjAwMDA1MDFiMDAwMDE2MDAwMDAwMDAwMDAwMDAwMDAwDQowMDAwMDAwMGQxMDIwMDAwNzQ2ODY1NmQ2NTJmNzQ2ODY1NmQ2NTJmNzQ2ODY1NmQ2NTMxMmU3ODZkNmM1MDRiMDEwMjJkMDAxNDAwMDYwMDA4MDAwMDAwMjEwMDBkZDE5MDlmYjYwMDAwMDAxYjAxMDAwMDI3MDAwMDAwMDAwMA0KMDAwMDAwMDAwMDAwMDAwMDliMDkwMDAwNzQ2ODY1NmQ2NTJmNzQ2ODY1NmQ2NTJmNWY3MjY1NmM3MzJmNzQ2ODY1NmQ2NTRkNjE2ZTYxNjc2NTcyMmU3ODZkNmMyZTcyNjU2YzczNTA0YjA1MDYwMDAwMDAwMDA1MDAwNTAwNWQwMTAwMDA5NjBhMDAwMDAwMDB9DQp7XCpcY29sb3JzY2hlbWVtYXBwaW5nIDNjM2Y3ODZkNmMyMDc2NjU3MjczNjk2ZjZlM2QyMjMxMmUzMDIyMjA2NTZlNjM2ZjY0Njk2ZTY3M2QyMjU1NTQ0NjJkMzgyMjIwNzM3NDYxNmU2NDYxNmM2ZjZlNjUzZDIyNzk2NTczMjIzZjNlMGQwYTNjNjEzYTYzNmM3MjRkDQo2MTcwMjA3ODZkNmM2ZTczM2E2MTNkMjI2ODc0NzQ3MDNhMmYyZjczNjM2ODY1NmQ2MTczMmU2ZjcwNjU2ZTc4NmQ2YzY2NmY3MjZkNjE3NDczMmU2ZjcyNjcyZjY0NzI2MTc3Njk2ZTY3NmQ2YzJmMzIzMDMwMzYyZjZkNjE2OQ0KNmUyMjIwNjI2NzMxM2QyMjZjNzQzMTIyMjA3NDc4MzEzZDIyNjQ2YjMxMjIyMDYyNjczMjNkMjI2Yzc0MzIyMjIwNzQ3ODMyM2QyMjY0NmIzMjIyMjA2MTYzNjM2NTZlNzQzMTNkMjI2MTYzNjM2NTZlNzQzMTIyMjA2MTYzNjMNCjY1NmU3NDMyM2QyMjYxNjM2MzY1NmU3NDMyMjIyMDYxNjM2MzY1NmU3NDMzM2QyMjYxNjM2MzY1NmU3NDMzMjIyMDYxNjM2MzY1NmU3NDM0M2QyMjYxNjM2MzY1NmU3NDM0MjIyMDYxNjM2MzY1NmU3NDM1M2QyMjYxNjM2MzY1NmU3NDM1MjIyMDYxNjM2MzY1NmU3NDM2M2QyMjYxNjM2MzY1NmU3NDM2MjIyMDY4NmM2OTZlNmIzZDIyNjg2YzY5NmU2YjIyMjA2NjZmNmM0ODZjNjk2ZTZiM2QyMjY2NmY2YzQ4NmM2OTZlNmIyMjJmM2V9DQp7XCpcbGF0ZW50c3R5bGVzXGxzZHN0aW1heDI2N1xsc2Rsb2NrZWRkZWYwXGxzZHNlbWloaWRkZW5kZWYxXGxzZHVuaGlkZXVzZWRkZWYxXGxzZHFmb3JtYXRkZWYwXGxzZHByaW9yaXR5ZGVmOTl7XGxzZGxvY2tlZGV4Y2VwdCBcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIE5vcm1hbDsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHFmb3JtYXQxIFxsc2Rwcmlvcml0eTAgXGxzZGxvY2tlZDAgaGVhZGluZyAxO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHFmb3JtYXQxIFxsc2Rwcmlvcml0eTAgXGxzZGxvY2tlZDAgaGVhZGluZyAyO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHFmb3JtYXQxIFxsc2Rwcmlvcml0eTAgXGxzZGxvY2tlZDAgaGVhZGluZyAzOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MCBcbHNkbG9ja2VkMCBoZWFkaW5nIDQ7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MCBcbHNkbG9ja2VkMCBoZWFkaW5nIDU7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MCBcbHNkbG9ja2VkMCBoZWFkaW5nIDY7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIGhlYWRpbmcgNztcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIGhlYWRpbmcgODtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIGhlYWRpbmcgOTsNClxsc2Rwcmlvcml0eTM5IFxsc2Rsb2NrZWQwIHRvYyAxO1xsc2Rwcmlvcml0eTM5IFxsc2Rsb2NrZWQwIHRvYyAyO1xsc2Rwcmlvcml0eTM5IFxsc2Rsb2NrZWQwIHRvYyAzO1xsc2Rwcmlvcml0eTM5IFxsc2Rsb2NrZWQwIHRvYyA0O1xsc2Rwcmlvcml0eTM5IFxsc2Rsb2NrZWQwIHRvYyA1O1xsc2Rwcmlvcml0eTM5IFxsc2Rsb2NrZWQwIHRvYyA2O1xsc2Rwcmlvcml0eTM5IFxsc2Rsb2NrZWQwIHRvYyA3Ow0KXGxzZHByaW9yaXR5MzkgXGxzZGxvY2tlZDAgdG9jIDg7XGxzZHByaW9yaXR5MzkgXGxzZGxvY2tlZDAgdG9jIDk7XGxzZHByaW9yaXR5MCBcbHNkbG9ja2VkMCBmb290bm90ZSB0ZXh0O1xsc2Rwcmlvcml0eTAgXGxzZGxvY2tlZDAgYW5ub3RhdGlvbiB0ZXh0O1xsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkzNSBcbHNkbG9ja2VkMCBjYXB0aW9uO1xsc2Rwcmlvcml0eTAgXGxzZGxvY2tlZDAgZm9vdG5vdGUgcmVmZXJlbmNlOw0KXGxzZHByaW9yaXR5MCBcbHNkbG9ja2VkMCBhbm5vdGF0aW9uIHJlZmVyZW5jZTtcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIHBhZ2UgbnVtYmVyO1xsc2Rwcmlvcml0eTAgXGxzZGxvY2tlZDAgTGlzdCBCdWxsZXQ7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MTAgXGxzZGxvY2tlZDAgVGl0bGU7XGxzZHByaW9yaXR5MSBcbHNkbG9ja2VkMCBEZWZhdWx0IFBhcmFncmFwaCBGb250Ow0KXGxzZHByaW9yaXR5MCBcbHNkbG9ja2VkMCBCb2R5IFRleHQ7XGxzZHByaW9yaXR5MCBcbHNkbG9ja2VkMCBCb2R5IFRleHQgSW5kZW50O1xsc2Rwcmlvcml0eTAgXGxzZGxvY2tlZDAgTGlzdCBDb250aW51ZTtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkxMSBcbHNkbG9ja2VkMCBTdWJ0aXRsZTtcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIEJsb2NrIFRleHQ7DQpcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIEh5cGVybGluaztcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkyMiBcbHNkbG9ja2VkMCBTdHJvbmc7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MjAgXGxzZGxvY2tlZDAgRW1waGFzaXM7XGxzZHByaW9yaXR5MCBcbHNkbG9ja2VkMCBhbm5vdGF0aW9uIHN1YmplY3Q7DQpcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIEJhbGxvb24gVGV4dDtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTU5IFxsc2Rsb2NrZWQwIFRhYmxlIEdyaWQ7XGxzZHVuaGlkZXVzZWQwIFxsc2Rsb2NrZWQwIFBsYWNlaG9sZGVyIFRleHQ7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MSBcbHNkbG9ja2VkMCBObyBTcGFjaW5nOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MCBcbHNkbG9ja2VkMCBMaWdodCBTaGFkaW5nO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjEgXGxzZGxvY2tlZDAgTGlnaHQgTGlzdDtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTYyIFxsc2Rsb2NrZWQwIExpZ2h0IEdyaWQ7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTYzIFxsc2Rsb2NrZWQwIE1lZGl1bSBTaGFkaW5nIDE7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2NCBcbHNkbG9ja2VkMCBNZWRpdW0gU2hhZGluZyAyO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjUgXGxzZGxvY2tlZDAgTWVkaXVtIExpc3QgMTsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjYgXGxzZGxvY2tlZDAgTWVkaXVtIExpc3QgMjtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY3IFxsc2Rsb2NrZWQwIE1lZGl1bSBHcmlkIDE7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2OCBcbHNkbG9ja2VkMCBNZWRpdW0gR3JpZCAyOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2OSBcbHNkbG9ja2VkMCBNZWRpdW0gR3JpZCAzO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzAgXGxzZGxvY2tlZDAgRGFyayBMaXN0O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzEgXGxzZGxvY2tlZDAgQ29sb3JmdWwgU2hhZGluZzsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzIgXGxzZGxvY2tlZDAgQ29sb3JmdWwgTGlzdDtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTczIFxsc2Rsb2NrZWQwIENvbG9yZnVsIEdyaWQ7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MCBcbHNkbG9ja2VkMCBMaWdodCBTaGFkaW5nIEFjY2VudCAxOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MSBcbHNkbG9ja2VkMCBMaWdodCBMaXN0IEFjY2VudCAxO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjIgXGxzZGxvY2tlZDAgTGlnaHQgR3JpZCBBY2NlbnQgMTtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTYzIFxsc2Rsb2NrZWQwIE1lZGl1bSBTaGFkaW5nIDEgQWNjZW50IDE7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY0IFxsc2Rsb2NrZWQwIE1lZGl1bSBTaGFkaW5nIDIgQWNjZW50IDE7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2NSBcbHNkbG9ja2VkMCBNZWRpdW0gTGlzdCAxIEFjY2VudCAxO1xsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHkwIFxsc2Rsb2NrZWQwIFJldmlzaW9uOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MzQgXGxzZGxvY2tlZDAgTGlzdCBQYXJhZ3JhcGg7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MjkgXGxzZGxvY2tlZDAgUXVvdGU7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MzAgXGxzZGxvY2tlZDAgSW50ZW5zZSBRdW90ZTsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjYgXGxzZGxvY2tlZDAgTWVkaXVtIExpc3QgMiBBY2NlbnQgMTtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY3IFxsc2Rsb2NrZWQwIE1lZGl1bSBHcmlkIDEgQWNjZW50IDE7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2OCBcbHNkbG9ja2VkMCBNZWRpdW0gR3JpZCAyIEFjY2VudCAxOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2OSBcbHNkbG9ja2VkMCBNZWRpdW0gR3JpZCAzIEFjY2VudCAxO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzAgXGxzZGxvY2tlZDAgRGFyayBMaXN0IEFjY2VudCAxO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzEgXGxzZGxvY2tlZDAgQ29sb3JmdWwgU2hhZGluZyBBY2NlbnQgMTsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzIgXGxzZGxvY2tlZDAgQ29sb3JmdWwgTGlzdCBBY2NlbnQgMTtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTczIFxsc2Rsb2NrZWQwIENvbG9yZnVsIEdyaWQgQWNjZW50IDE7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MCBcbHNkbG9ja2VkMCBMaWdodCBTaGFkaW5nIEFjY2VudCAyOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MSBcbHNkbG9ja2VkMCBMaWdodCBMaXN0IEFjY2VudCAyO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjIgXGxzZGxvY2tlZDAgTGlnaHQgR3JpZCBBY2NlbnQgMjtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTYzIFxsc2Rsb2NrZWQwIE1lZGl1bSBTaGFkaW5nIDEgQWNjZW50IDI7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY0IFxsc2Rsb2NrZWQwIE1lZGl1bSBTaGFkaW5nIDIgQWNjZW50IDI7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2NSBcbHNkbG9ja2VkMCBNZWRpdW0gTGlzdCAxIEFjY2VudCAyO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjYgXGxzZGxvY2tlZDAgTWVkaXVtIExpc3QgMiBBY2NlbnQgMjsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjcgXGxzZGxvY2tlZDAgTWVkaXVtIEdyaWQgMSBBY2NlbnQgMjtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY4IFxsc2Rsb2NrZWQwIE1lZGl1bSBHcmlkIDIgQWNjZW50IDI7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2OSBcbHNkbG9ja2VkMCBNZWRpdW0gR3JpZCAzIEFjY2VudCAyOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk3MCBcbHNkbG9ja2VkMCBEYXJrIExpc3QgQWNjZW50IDI7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk3MSBcbHNkbG9ja2VkMCBDb2xvcmZ1bCBTaGFkaW5nIEFjY2VudCAyO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzIgXGxzZGxvY2tlZDAgQ29sb3JmdWwgTGlzdCBBY2NlbnQgMjsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzMgXGxzZGxvY2tlZDAgQ29sb3JmdWwgR3JpZCBBY2NlbnQgMjtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTYwIFxsc2Rsb2NrZWQwIExpZ2h0IFNoYWRpbmcgQWNjZW50IDM7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MSBcbHNkbG9ja2VkMCBMaWdodCBMaXN0IEFjY2VudCAzOw0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MiBcbHNkbG9ja2VkMCBMaWdodCBHcmlkIEFjY2VudCAzO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjMgXGxzZGxvY2tlZDAgTWVkaXVtIFNoYWRpbmcgMSBBY2NlbnQgMztcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY0IFxsc2Rsb2NrZWQwIE1lZGl1bSBTaGFkaW5nIDIgQWNjZW50IDM7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY1IFxsc2Rsb2NrZWQwIE1lZGl1bSBMaXN0IDEgQWNjZW50IDM7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2NiBcbHNkbG9ja2VkMCBNZWRpdW0gTGlzdCAyIEFjY2VudCAzO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjcgXGxzZGxvY2tlZDAgTWVkaXVtIEdyaWQgMSBBY2NlbnQgMzsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjggXGxzZGxvY2tlZDAgTWVkaXVtIEdyaWQgMiBBY2NlbnQgMztcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY5IFxsc2Rsb2NrZWQwIE1lZGl1bSBHcmlkIDMgQWNjZW50IDM7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk3MCBcbHNkbG9ja2VkMCBEYXJrIExpc3QgQWNjZW50IDM7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTcxIFxsc2Rsb2NrZWQwIENvbG9yZnVsIFNoYWRpbmcgQWNjZW50IDM7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk3MiBcbHNkbG9ja2VkMCBDb2xvcmZ1bCBMaXN0IEFjY2VudCAzO1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzMgXGxzZGxvY2tlZDAgQ29sb3JmdWwgR3JpZCBBY2NlbnQgMzsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjAgXGxzZGxvY2tlZDAgTGlnaHQgU2hhZGluZyBBY2NlbnQgNDtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTYxIFxsc2Rsb2NrZWQwIExpZ2h0IExpc3QgQWNjZW50IDQ7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MiBcbHNkbG9ja2VkMCBMaWdodCBHcmlkIEFjY2VudCA0Ow0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MyBcbHNkbG9ja2VkMCBNZWRpdW0gU2hhZGluZyAxIEFjY2VudCA0O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjQgXGxzZGxvY2tlZDAgTWVkaXVtIFNoYWRpbmcgMiBBY2NlbnQgNDtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY1IFxsc2Rsb2NrZWQwIE1lZGl1bSBMaXN0IDEgQWNjZW50IDQ7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY2IFxsc2Rsb2NrZWQwIE1lZGl1bSBMaXN0IDIgQWNjZW50IDQ7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2NyBcbHNkbG9ja2VkMCBNZWRpdW0gR3JpZCAxIEFjY2VudCA0O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjggXGxzZGxvY2tlZDAgTWVkaXVtIEdyaWQgMiBBY2NlbnQgNDsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjkgXGxzZGxvY2tlZDAgTWVkaXVtIEdyaWQgMyBBY2NlbnQgNDtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTcwIFxsc2Rsb2NrZWQwIERhcmsgTGlzdCBBY2NlbnQgNDtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTcxIFxsc2Rsb2NrZWQwIENvbG9yZnVsIFNoYWRpbmcgQWNjZW50IDQ7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTcyIFxsc2Rsb2NrZWQwIENvbG9yZnVsIExpc3QgQWNjZW50IDQ7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk3MyBcbHNkbG9ja2VkMCBDb2xvcmZ1bCBHcmlkIEFjY2VudCA0O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjAgXGxzZGxvY2tlZDAgTGlnaHQgU2hhZGluZyBBY2NlbnQgNTsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjEgXGxzZGxvY2tlZDAgTGlnaHQgTGlzdCBBY2NlbnQgNTtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTYyIFxsc2Rsb2NrZWQwIExpZ2h0IEdyaWQgQWNjZW50IDU7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MyBcbHNkbG9ja2VkMCBNZWRpdW0gU2hhZGluZyAxIEFjY2VudCA1Ow0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2NCBcbHNkbG9ja2VkMCBNZWRpdW0gU2hhZGluZyAyIEFjY2VudCA1O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjUgXGxzZGxvY2tlZDAgTWVkaXVtIExpc3QgMSBBY2NlbnQgNTtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY2IFxsc2Rsb2NrZWQwIE1lZGl1bSBMaXN0IDIgQWNjZW50IDU7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY3IFxsc2Rsb2NrZWQwIE1lZGl1bSBHcmlkIDEgQWNjZW50IDU7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2OCBcbHNkbG9ja2VkMCBNZWRpdW0gR3JpZCAyIEFjY2VudCA1O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjkgXGxzZGxvY2tlZDAgTWVkaXVtIEdyaWQgMyBBY2NlbnQgNTsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzAgXGxzZGxvY2tlZDAgRGFyayBMaXN0IEFjY2VudCA1O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzEgXGxzZGxvY2tlZDAgQ29sb3JmdWwgU2hhZGluZyBBY2NlbnQgNTtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTcyIFxsc2Rsb2NrZWQwIENvbG9yZnVsIExpc3QgQWNjZW50IDU7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTczIFxsc2Rsb2NrZWQwIENvbG9yZnVsIEdyaWQgQWNjZW50IDU7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2MCBcbHNkbG9ja2VkMCBMaWdodCBTaGFkaW5nIEFjY2VudCA2O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjEgXGxzZGxvY2tlZDAgTGlnaHQgTGlzdCBBY2NlbnQgNjsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjIgXGxzZGxvY2tlZDAgTGlnaHQgR3JpZCBBY2NlbnQgNjtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTYzIFxsc2Rsb2NrZWQwIE1lZGl1bSBTaGFkaW5nIDEgQWNjZW50IDY7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2NCBcbHNkbG9ja2VkMCBNZWRpdW0gU2hhZGluZyAyIEFjY2VudCA2Ow0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2NSBcbHNkbG9ja2VkMCBNZWRpdW0gTGlzdCAxIEFjY2VudCA2O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NjYgXGxzZGxvY2tlZDAgTWVkaXVtIExpc3QgMiBBY2NlbnQgNjtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY3IFxsc2Rsb2NrZWQwIE1lZGl1bSBHcmlkIDEgQWNjZW50IDY7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTY4IFxsc2Rsb2NrZWQwIE1lZGl1bSBHcmlkIDIgQWNjZW50IDY7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk2OSBcbHNkbG9ja2VkMCBNZWRpdW0gR3JpZCAzIEFjY2VudCA2O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzAgXGxzZGxvY2tlZDAgRGFyayBMaXN0IEFjY2VudCA2Ow0KXGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcHJpb3JpdHk3MSBcbHNkbG9ja2VkMCBDb2xvcmZ1bCBTaGFkaW5nIEFjY2VudCA2O1xsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHByaW9yaXR5NzIgXGxzZGxvY2tlZDAgQ29sb3JmdWwgTGlzdCBBY2NlbnQgNjtcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2Rwcmlvcml0eTczIFxsc2Rsb2NrZWQwIENvbG9yZnVsIEdyaWQgQWNjZW50IDY7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkxOSBcbHNkbG9ja2VkMCBTdWJ0bGUgRW1waGFzaXM7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MjEgXGxzZGxvY2tlZDAgSW50ZW5zZSBFbXBoYXNpczsNClxsc2RzZW1paGlkZGVuMCBcbHNkdW5oaWRldXNlZDAgXGxzZHFmb3JtYXQxIFxsc2Rwcmlvcml0eTMxIFxsc2Rsb2NrZWQwIFN1YnRsZSBSZWZlcmVuY2U7XGxzZHNlbWloaWRkZW4wIFxsc2R1bmhpZGV1c2VkMCBcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MzIgXGxzZGxvY2tlZDAgSW50ZW5zZSBSZWZlcmVuY2U7DQpcbHNkc2VtaWhpZGRlbjAgXGxzZHVuaGlkZXVzZWQwIFxsc2RxZm9ybWF0MSBcbHNkcHJpb3JpdHkzMyBcbHNkbG9ja2VkMCBCb29rIFRpdGxlO1xsc2Rwcmlvcml0eTM3IFxsc2Rsb2NrZWQwIEJpYmxpb2dyYXBoeTtcbHNkcWZvcm1hdDEgXGxzZHByaW9yaXR5MzkgXGxzZGxvY2tlZDAgVE9DIEhlYWRpbmc7fX17XCpcZGF0YXN0b3JlIDAxMDUwMDAwMDIwMDAwMDAxODAwMDAwMA0KNGQ3Mzc4NmQ2YzMyMmU1MzQxNTg1ODRkNGM1MjY1NjE2NDY1NzIyZTM1MmUzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYwMDAwDQpkMGNmMTFlMGExYjExYWUxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzZTAwMDMwMGZlZmYwOTAwMDYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAxMDAwMDBmZWZmZmZmZjAwMDAwMDAwZmVmZmZmZmYwMDAwMDAwMDAwMDAwMDAwZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYNCmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZg0KZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmDQpmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYNCmZmZmZmZmZmZmZmZmZmZmZmZGZmZmZmZmZlZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZg0KZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmDQpmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYNCmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZg0KZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY1MjAwNmYwMDZmMDA3NDAwMjAwMDQ1MDA2ZTAwNzQwMDcyMDA3OTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDE2MDAwNTAwZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWM2OWQ5ODg4YjhiM2Q0Yzg1OWVhZjZjZDE1OGJlMGYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MDU5DQpjZTg2Y2QzYWNlMDFmZWZmZmZmZjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDANCjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA0KMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwDQowMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTA1MDAwMDAwMDAwMDAwfX0=</record_binary_data>
      <record_plain_text>EXHIBIT B 

WESTCONNECT 
POINT-TO-POINT 
REGIONAL TRANSMISSION SERVICE 
TARIFF

Article I. 
Preamble
            Arizona Public Service Company (the "Transmission Provider"), in coordination with the other RTPs (as defined below) will provide Regional Transmission Service pursuant to the applicable terms and conditions of this WestConnect Point-To-Point Regional Transmission Service Tariff (the "Regional Tariff") commencing on the Effective Date (as defined below) and ending on the earlier of the date when this Regional Tariff is terminated or the Transmission Provider withdraws this Regional Tariff in accordance with its terms.  

Article II. 
Definitions
In addition to terms defined elsewhere in this Regional Tariff and unless the context otherwise requires, capitalized and defined terms used herein shall have the meanings given to them below:

		"Administrative Charge" has the meaning set forth in Section 7.1(f).

		"Balancing Authority" means the responsible entity that integrates resource plans ahead of time, maintains load-interchange-generation balance within a Balancing Authority Area, and supports interconnection frequency in real time.  The Balancing Authority shall be either the Transmission Provider or a designee of the Transmission Provider.

            "Balancing Authority Area" means the collection of generation, transmission, and loads within the metered boundaries of the Balancing Authority.  The Balancing Authority maintains load-resource balance within this area.

		"Billing Agent" means an independent third party retained by the RTPs to act as billing agent for Regional Transactions.
            
            "Commission" means the Federal Energy Regulatory Commission or any successor thereto.

            "Curtail" or "Curtailment" means a reduction in Regional Transmission Service in response to a transfer capability shortage as a result of emergency or system reliability conditions.

            "Delivering Party" means the entity supplying capacity and energy at Regional Point(s) of Receipt to be transmitted by the RTPs pursuant to this Regional Tariff.
            
            "Effective Date" means [Jurisdictional RTPs use the following language:  the date on which the Commission makes this Regional Tariff effective.]  [Non-jurisdictional RTPs use the following language:  the date on which the Transmission  Provider makes this Tariff effective pursuant to a posting on its OASIS.]  

            "Eligible Customer" is an entity that has met the conditions required of Transmission Customers to take point-to-point transmission service under the respective OATT of each RTP providing service for a particular Regional Transaction.  

            "Good Utility Practice" shall mean any of the practices, methods and acts engaged in or approved by a significant portion of the electric utility industry operating within the western reliability region of the North American Electric Reliability Corporation during the relevant time period, or any of the practices, methods and acts which, in the exercise of reasonable judgment in light of the facts known at the time the decision was made, could have been expected to accomplish the desired result at a reasonable cost consistent with good business practices, reliability, safety and expedition.  Good Utility Practice is not intended to be limited to the optimum practice, method, or act to the exclusion of all others, but rather to be acceptable practices, methods, or acts generally accepted in the region.

		"Interruption" or "Interrupt" means a reduction in Regional Transmission Service due to economic reasons.

		"Jurisdictional RTP" means an RTP that is subject to the jurisdiction of the Commission under Sections 205 and 206 of the Federal Power Act.

            "Native Load Customers" means the wholesale and retail customers of an RTP on whose behalf the RTP, by statute, franchise, regulatory requirement, or contract, has undertaken an obligation to construct and operate the RTP's Transmission System to meet the reliable electric needs of such customers.

		"Network Customers" means customers receiving transmission service pursuant to the terms of an RTP's Network Integration Transmission Service Agreement under Part III of the RTP's OATT.
            
            "Non-Firm Transmission Service" means hourly non-firm point-to-point transmission service provided by any RTP pursuant to its respective OATT.

            "Non-Jurisdictional RTP" means an RTP that is not subject to the jurisdiction of the Commission under Sections 205 and 206 of the Federal Power Act.
            
"OATT" means, in respect of a particular RTP, the open access transmission tariff of such RTP on file with the Commission or, if such RTP is not required to file such tariff with the Commission, the open access transmission tariff of such RTP posted on its OASIS. 
	
	"Participation Agreement" means that certain WestConnect Amended and Restated Point-to-Point Regional Transmission Service Participation Agreement effective as of the Effective Date (as defined therein) by and among the RTPs.

            "Receiving Party" means the entity receiving capacity and energy made available at, and transmitted by RTPs to, Regional Point(s) of Delivery pursuant to this Regional Tariff.

            "Regional Charge" has the meaning set forth in Section 7.1(a).

            "Regional Point(s) of Delivery" means the point(s) of interconnection on the Regional Transmission System where capacity and energy from the Delivering Party will be made available and delivered to the Receiving Party by the RTPs pursuant to this Regional Tariff.

            "Regional Point(s) of Receipt" means the point(s) of interconnection on the Regional Transmission System where capacity and energy from the Delivering Party will be received by the RTPs for transmission pursuant to this Regional Tariff.

            "Regional Rate" means the highest of the ceiling rates for hourly non-firm transmission service posted on the respective OASIS of the RTPs who would provide Regional Transmission Service, for service under their OATTs at the time of the Regional Transaction.  The Regional Rate is not a discounted rate subject to Schedule 8 of the Commission's pro forma open access transmission tariff and shall not be subject to discount.
            
            "Regional Tariff" means this WestConnect Point-To-Point Regional Transmission Service Tariff as set forth in the preamble.
            
            "Regional Transaction" means a single transaction in which Regional Transmission Service is provided to an Eligible Customer, pursuant to the Regional Tariff.

            "Regional Transmission Service" means hourly non-firm point-to-point transmission service across the Regional Transmission System provided by the Transmission Provider and other RTPs pursuant to this Regional Tariff. 

            "Regional Transmission System" means the aggregate facilities owned, controlled or operated by the RTPs that are used to provide Regional Transmission Service pursuant to this Regional Tariff.
            
            "RTP" means any entity that is a Party to the Participation Agreement, and that is providing Regional Transmission Service pursuant to the Regional Tariff as adopted by such entity.

		"Service Agreement" has the meaning set forth in Section 3.3.

            "Transmission Customer" means an Eligible Customer taking Regional Transmission Service under this Regional Tariff.

            "Transmission System" means, in respect of any RTP, the facilities owned by such RTP that are used to provide Regional Transmission Service pursuant to this Regional Tariff.
            
            "wesTTrans" means the OASIS site of the RTPs, or its successor site.

Article III. 
Nature of Regional Transmission Service
      3.1 Hourly Service
	Regional Transmission Service shall be provided on an hourly basis and can be reserved for up to twenty-four (24) consecutive hours.  Notwithstanding anything to the contrary contained in this Regional Tariff, in no event shall Regional Transmission Service be available on any RTP's Transmission System if the term would extend beyond the date on which that RTP would no longer be an RTP providing Regional Transmission Service pursuant to this Regional Tariff.

      3.2 Reservation Priority

	Regional Transmission Service shall be available from transfer capability in excess of that needed for reliable service to Native Load Customers, Network Customers and other transmission customers taking long-term and short-term firm point-to-point transmission service, or daily, weekly and monthly non-firm transmission service, previously-reserved hourly non-firm transmission service under an RTP's OATT, or service reserved pursuant to a grandfathered agreement, and for margins or reserves required or permitted under applicable reliability standards.  Subject to such availability, Regional Transmission Service shall be available on a first-come, first-served basis (i.e., in the chronological sequence in which each Eligible Customer has reserved such service). 

      3.3 Service Agreements

	Eligible Customers must execute an umbrella service agreement in the form attached hereto as Annex A, or must have executed an umbrella service agreement in the form attached as Annex A to any predecessor to this Regional Tariff (the "Service Agreement"), with all of the RTPs or each RTP whose Transmission System will be used to provide Regional Transmission Service for such Eligible Customer at any time; provided that the umbrella service agreements previously executed by Eligible Customers with RTPs shall be deemed to refer to this Regional Tariff and shall continue in effect and constitute Service Agreements for all purposes of this Regional Tariff until terminated in accordance with their terms.  Executed Service Agreements that contain the information required under this Regional Tariff for service provided by Jurisdictional RTPs shall be filed with the Commission if required by Commission regulations.

      3.4 Curtailment or Interruption of Regional Transmission Service

            (a)  If a Curtailment on the Regional Transmission System, or a portion thereof, is required, then Curtailments will be made on a non-discriminatory basis to the Regional Transaction(s) that effectively relieve the constraint.  When the RTPs determine that an electrical emergency exists on the Regional Transmission System and implement emergency procedures to Curtail Regional Transmission Service, the Transmission Customer shall make the required reductions upon request of the RTPs.  The RTPs reserve the right to Curtail, in whole or in part, Regional Transmission Service provided under this Regional Tariff for reliability reasons when an emergency or other unforeseen condition threatens to impair or degrade the reliability of the Regional Transmission System.  

            (b)	  The RTPs reserve the right to Interrupt, in whole or in part, Regional Transmission Service provided under this Regional Tariff for economic or other reasons in accordance with the product type priority rules established in the RTPs' OATTs.  The RTPs also will discontinue or reduce service to the Transmission Customer to the extent that deliveries for transmission are discontinued or reduced at the Regional Point(s) of Receipt.  
            
            (c)  Where required, Curtailments or Interruptions will be made on a non-discriminatory basis to the transaction(s) that effectively relieve the constraint; provided, however, that Regional Transmission Service shall be subordinate to firm transmission service provided to Native Load Customers, customers taking Firm Point-to-Point transmission service and Network Customers under transactions that are not Regional Transactions.  If multiple transactions require Curtailment or Interruption, to the extent practicable and consistent with Good Utility Practice, Curtailments or Interruptions will be made in accordance with the product type priority rules established in the RTPs' OATTs.  The RTPs will provide advance notice of Curtailment or Interruption where such notice can be provided consistent with Good Utility Practice.
            
            (d)  No credit will be given to Transmission Customers affected by Curtailments or Interruptions of Regional Transmission Service. 

      3.5 Classification of Regional Transmission Service
            (a)	Due to the short term, non-firm nature of the Regional Transmission Service, the Transmission Customer taking Regional Transmission Service may not change its Regional Point(s) of Receipt or Point(s) of Delivery to obtain alternative service on a non-firm basis.  Transmission Customers may not redirect, resell, rollover or convert Regional Transmission Service.
            (b)	The Palo Verde/Hassayampa Common Bus will be treated as a single Regional Point of Receipt and as a single Regional Point of Delivery for transactions scheduled to or from such Common Bus.
		(c)	The Transmission Provider shall provide deliveries of capacity and energy from the Regional Point(s) of Receipt to the Regional Point(s) of Delivery on a non-firm basis only.  Regional Points of Receipt and corresponding capacity reservations shall be as mutually agreed upon by the RTPs for Regional Transmission Service.  The Transmission Customer's reserved capacity shall be the greater of either (1) the sum of the capacity reservations at the Regional Point(s) of Receipt, or (2) the sum of the capacity reservations at the Regional Point(s) of Delivery.  The Transmission Customer will be billed for its reserved capacity.  The Transmission Customer may not exceed its capacity reserved at each Regional Point of Receipt and each Regional Point of Delivery.

		(d)	Eligible Customers requesting Regional Transmission Service for the transmission of power do so with the full realization that such service is subject to availability and to Curtailment or Interruption under the terms of this Regional Tariff.

      3.6 Withdrawal and Termination of the Regional Tariff
      	(a)	The Transmission Provider may withdraw this Regional Tariff, and any other RTP may withdraw its Regional Tariff, (i) at any time prior to the Effective Date, at the sole discretion of the Transmission Provider or the RTP, respectively; (ii) at any time (either before, on or after the Effective Date), due to the occurrence or material risk of adverse regulatory action (subject to any obligations incurred for transactions already consummated under the Regional Tariff in which the withdrawing Transmission Provider or other RTP participated), as determined in the sole discretion of the Transmission Provider or other RTP, including, but not limited, to, conditions that may be imposed by the Commission or any other governmental authority, or as a result of intervenor action or a complaint, on the Regional Transmission Service, such as subjecting the rates, transmission revenue requirements or costs of a Non-Jurisdictional RTP to review under the Federal Power Act, either directly or indirectly, or subjecting an RTP to refunds or the possibility thereof, or (iii) for any reason and at the sole discretion of the withdrawing RTP, upon ninety (90) days prior written notice to the other RTPs effective at any time following the Effective Date.  It shall be a condition precedent to the effectiveness of any withdrawal that the withdrawing Transmission Provider or other RTP pay all amounts due and payable under this Regional Tariff prior to such withdrawal.  The Transmission Provider acknowledges and agrees that this Regional Tariff will continue in effect as to other RTPs notwithstanding the withdrawal of one or more other RTPs.
      
		(b) 	This Regional Tariff will be in effect until the Transmission Provider and the other RTPs mutually agree to terminate Regional Transmission Service or the Transmission Provider has withdrawn this Regional Tariff in accordance with its terms.  

Article IV. 
Regional Transmission Service Terms
      4.1 General Conditions

	The Transmission Provider will provide Regional Transmission Service over its Transmission System to any Eligible Customer that has met the requirements of this Regional Tariff.

      4.2 Calculation of Available Transfer Capability

	Each RTP shall calculate the Available Transfer Capability ("ATC") consistent with the applicable requirements of the Reliability Standards adopted by the North American Electric Reliability Corporation and in accordance with its OATT.

      4.3 Real Power Losses

	Losses will be based on transactions across each Transmission System used in the Regional Transaction, as provided in Section 7.1(e) hereof, and will be monetized at the rate published in the ICE Palo Verde Financial Peak Daily Electricity Price Index or ICE Palo Verde Financial Off-Peak Daily Electricity Price Index ("Palo Verde Index") for the trade date of the transaction, and will be paid for by the Transmission Customer.

Article V. 
Transmission Customer Responsibilities 
      5.1 Conditions Required of Transmission Customers
      Regional Transmission Service shall be provided by the RTPs only if the following conditions are satisfied by the Transmission Customer: 
            (a)		The Transmission Customer has submitted a request for service via the wesTTrans.net OASIS site; 
            (b)	The Transmission Customer qualifies as an Eligible Customer as defined in this Regional Tariff, which includes satisfying the creditworthiness criteria as defined in the OATT of each RTP that will provide the transmission service;
            (c)	The Transmission Customer has arrangements in place for any other transmission service necessary to effect the delivery from the generating source to the Regional Transmission System prior to the time Regional Transmission Service commences; 
            (d)	The Transmission Customer has executed a Service Agreement with the Transmission Provider and each other RTP whose Transmission System will be used for the Regional Transaction; 
            (e)	If the Regional Transmission Service is to be used to serve load within the Balancing Authority Area of an RTP, the Transmission Customer satisfies any requirements for ancillary services under Schedules 3-6 of that RTP's OATT (as the same may be amended or revised from time to time); and
            (f)	If the Regional Transmission Service is to be used to deliver energy from a generator located within an RTP's Balancing Authority Area to load outside that Balancing Authority Area, the Transmission Customer satisfies any requirements for Generator Imbalance Service under Schedule 9 of that RTP's OATT (as the same may be amended or revised from time to time).
5.2 Conditions Applicable to RTPs who Own Facilities Financed by Local Furnishing Bonds or Other Tax-Exempt Bonds

      In addition to the conditions in Section 5.1, Regional Transmission Service shall be provided by the RTPs only if Eligible Customers requesting Regional Transmission Service comply with all special requirements (e.g., Two County Furnishing Bond requirements) applicable to the RTPs that own transmission, distribution or generation facilities financed by local furnishing bonds or other tax-exempt bonds, which special requirements are specified in the RTPs' OATTs.
Article VI. 
Procedures for Arranging Regional Transmission Service 
      6.1 Reservation of Regional Transmission Service
	Requests for Regional Transmission Service shall be submitted no earlier than 0700 MST of the day before the requested Regional Transmission Service is to commence and must be received no later than 1400 MST of such day.  Requests for Regional Transmission Service submitted after 1400 MST of such day will be accommodated if practicable. 
6.2 Processing of Requests for Regional Transmission Service that Would Be more Expensive than Service under Individual OATTs
	If the WestConnect Deal Wizard indicates that a proposed Regional Transaction is more expensive at the Regional Rate than it would be under the combined OATT rates of the RTPs that would provide the requested Regional Transmission Service - i.e., if the WestConnect Regional Transmission Service software shows a negative amount - each segment of the requested transmission path will be processed as a transmission service request under the relevant RTP's individual OATT.  A new submission of transmission service requests for the transaction to each of the relevant RTPs will not be required.  In such cases, each reserved segment of the transaction will be billed by the relevant RTP individually in accordance with its OATT, and will not be billed under this Regional Tariff.
 
      6.3 Determination of Available Transfer Capability
	Following receipt of a transmission service request, all RTPs will make a determination on a non-discriminatory basis of ATC pursuant to Section 4.2.  Such determination shall be made as soon as reasonably practicable after receipt, but not later than 30 minutes after receipt of the transmission service request.
      6.4 Scheduling Regional Transmission Service
	Schedules for Regional Transmission Service must be submitted to the RTPs no later than 1400 MST of the day prior to the day on which such service is to commence.  Schedules for Regional Transmission Service submitted after that time will be accommodated if practicable.  Hour-to-hour schedules of energy to be delivered must be stated in increments of 1 megawatt per hour.  Scheduling changes will be permitted up to 20 minutes before the start of the next clock hour provided that the Delivering Party and Receiving Party also agree to the schedule modification.  The RTPs participating in a Regional Transaction will furnish to the Delivering Party's system operator hour-to-hour schedules equal to those furnished by the Receiving Party and shall deliver the capacity and energy provided by such schedules on a non-firm basis.  Should the Transmission Customer, Delivering Party or Receiving Party revise or terminate any schedule, such party shall immediately notify the RTPs providing the Regional Transmission Service for the transaction, and the RTPs shall have the right to adjust accordingly the schedule for capacity and energy to be received and to be delivered.  A Regional Transaction can be annulled at the request of the Transmission Customer only if all of the RTPs that would participate in the Regional Transaction agree to annul it.  Transmission Customers will not be charged for a reservation of Regional Transmission Service if all of the RTPs that would have participated in providing the service agree to annul it.

      6.5 Tagging Regional Transactions
	Regional Transmission Service is to be utilized and tagged in each case across the Transmission Systems of all of the RTPs involved in the Regional Transaction.  Each Regional Transaction must be tagged with an E-Tag that includes all segments of the Regional Transmission Service reserved.  If a Transmission Customer tags only one of the segments of a reserved path, the E-Tag will not be considered a Regional Transmission Service tag, and will be processed in accordance with the individual RTP's OATT, with appropriate ancillary service charges and losses being assessed.  

Article VII. 
Regional Transmission Service Rates
      7.1 Regional Transmission Service Rates
For each Regional Transaction, Transmission Customer agrees to pay the following charges:

		(a)		Regional Charge.  A charge (in $) equal to the product of (i) the total reserved megawatts for such Regional Transaction (in MWs) multiplied by (ii) the Regional Rate (in $/MW) for such Regional Transaction; plus

		(b)		Ancillary Service 1 Charge.  An Ancillary Service 1 charge (in $) equal to the product of (i) the total megawatts for such Regional Transaction (in MWs) multiplied by (ii) the sum of the rate (in $/MW) for scheduling, system control and dispatch service as each component is specified in the OATT for each RTP that participated in the Regional Transaction, provided that for any such RTP that charges a per-transaction based Ancillary Service 1 rate, the Transmission Customer will  pay that RTP's per-transaction based Ancillary Service 1 rate; plus

		(c)		Ancillary Service 2 Charge.  An Ancillary Service 2 charge (in $) equal to the product of (i) the total megawatts for such Regional Transaction (in MWs) multiplied by (ii) the rate (in $/MW) for reactive supply and voltage control as each component is specified in the OATT of the last RTP (i.e., the RTP that transmits the Transmission Customer's energy to the Regional Point of Delivery) participating in the Regional Transaction; plus

		(d)		Additional Ancillary Services.  Additional Ancillary Services; i.e. Ancillary 3:  Regulation and Frequency Response Service; Ancillary 4:  Energy Imbalance Service; Ancillary 5:  Operating Reserve - Spinning Reserve Service; Ancillary 6:  Operating Reserve - Supplemental Reserve Service; and Ancillary 9 - Generator Imbalance Service, to the extent required in conjunction with a Regional Transaction, as offered in accordance with the appropriate RTP's OATT; plus

		(e)		Losses Charge.  A losses charge (in $) equal to the product of (i) the total megawatts for such Regional Transaction (in MWs) multiplied by (ii) the sum of the loss rates (in %) as each component is specified in the OATT for each RTP that participated in the Regional Transaction (monetized based on the applicable Palo Verde Index price); plus

		(f)		Administrative Charges.  The Administrative Charge is designed to cover the costs of the Billing Agent and is set at $1.26 per MWh.  The Administrative Charge shall not be changed prior to July 1, 2018. 

These charges shall not be discounted.

      7.2	Payment to Billing Agent Account

	All charges for Regional Transmission Service provided for in this Regional Tariff shall be billed to the Transmission Customer by the Billing Agent and paid by the Transmission Customer to the Billing Agent.  The Billing Agent will also be responsible for making any refunds to which the Transmission Customer may be entitled in respect of a Regional Transaction. 

Article VIII.
Dispute Resolution and Governing Law

8.1 Internal Dispute Resolution Procedures  

      Any dispute between a Transmission Customer and an RTP involving transmission service under this Regional Tariff (excluding applications for changes to the Regional Tariff, or to any Service Agreement entered into by a Jurisdictional RTP under the Regional Tariff or its predecessor, which shall be presented directly to the Commission for resolution) shall be referred to a designated senior representative of the RTP and a senior representative of the Transmission Customer for resolution on an informal basis as promptly as practicable.  In the event the designated representatives are unable to resolve the dispute within thirty (30) days (or such other period as the Transmission Customer and the RTP may agree upon) by mutual agreement, such dispute may be submitted to arbitration and resolved in accordance with the arbitration procedures set forth below.

8.2 External Arbitration Procedures
      
      Any arbitration initiated under this Regional Tariff shall be conducted before a single neutral arbitrator appointed by the parties to the dispute (hereinafter, the "Parties").  If the Parties fail to agree upon a single arbitrator within ten (10) days of the referral of the dispute to arbitration, each of the Parties shall choose one arbitrator who shall sit on a three-member arbitration panel.  The two arbitrators so chosen shall within twenty (20) days select a third arbitrator to chair the arbitration panel.  In either case, the arbitrators shall be knowledgeable in electric utility matters, including electric transmission and bulk power issues, and shall not have any current or past substantial business or financial relationships with any party to the arbitration (except prior arbitration).  The arbitrator(s) shall provide each of the Parties an opportunity to be heard and, except as otherwise provided herein, shall generally conduct the arbitration in accordance with the Commercial Arbitration Rules of the American Arbitration Association and any applicable Commission regulations. 
      
8.3 Arbitration Decisions  

      Unless otherwise agreed, the arbitrator(s) shall render a decision within ninety (90) days of appointment and shall notify the Parties in writing of such decision and the reasons therefor.  The arbitrator(s) shall be authorized only to interpret and apply the provisions of the Regional Tariff and any Service Agreement entered into under the Regional Tariff (or its predecessor) and shall have no power to modify or change any of the above in any manner.  The decision of the arbitrator(s) shall be final and binding upon the Parties, and judgment on the award may be entered in any court having jurisdiction.  The decision of the arbitrator(s) may be appealed solely on the grounds that the conduct of the arbitrator(s), or the decision itself, violated the standards set forth in the Federal Arbitration Act and/or the Administrative Dispute Resolution Act.  The final decision of the arbitrator must also be filed with the Commission if it affects jurisdictional rates, terms and conditions of service or facilities.
      
8.4 Costs  

      Each Party shall be responsible for its own costs incurred during the arbitration process and for the following costs, if applicable:
      
1. the cost of the arbitrator chosen by the Party to sit on the three member panel and one half of the cost of the third arbitrator chosen; or
2. one half the cost of the single arbitrator jointly chosen by the Parties.


8.5 Rights Under The Federal Power Act; Governing Law
  
		(a)	Nothing in this section shall restrict the rights of any party to file a complaint with the Commission under relevant provisions of the Federal Power Act.
		(b)	The validity, interpretation and performance of this Regional Tariff and each of its provisions shall be governed by federal law and/or by the law of the state in which the Transmission Provider has its principal place of business (unless preempted by federal law).

ANNEX A
Form of Service Agreement for
WestConnect Point-To-Point Regional Transmission Service Tariff

1.0 This Service Agreement, dated as of [_______________] (this "Service Agreement"), is entered into by and between [_______________]1("RTP" and collectively, with other transmission providers providing service in a Regional Transaction, the "RTPs") and [_______________]2 (the "Transmission Customer").  Capitalized terms used but not defined herein shall have the meanings assigned to them in the RTP's WestConnect Point-To-Point Regional Transmission Service Tariff (the "Regional Tariff").

2.0 The Transmission Customer has been determined by the RTP to be a Transmission Customer under the Regional Tariff.  

3.0 Service under this Service Agreement shall be provided by the RTP upon request by an authorized representative of the Transmission Customer.

4.0 The Transmission Customer agrees: (a) to supply information that the RTP deems reasonably necessary in accordance with Good Utility Practice in order to provide any requested Regional Transmission Service; and (b) to provide information to the RTPs and the Billing Agent pursuant to and in accordance with the Regional Tariff in connection with any requested Regional Transmission Service.

5.0 The RTP agrees to provide and the Transmission Customer agrees to take and pay for the requested Regional Transmission Service in accordance with the provisions of the Regional Tariff and this Service Agreement.

6.0 Regional Transmission Service under this Service Agreement shall commence on the later of (a) the requested commencement date, or (b) such other date as the requested Regional Transmission Service is permitted to become effective by the Commission, if applicable.  Regional Transmission Service under this Service Agreement shall terminate on such date as is mutually agreed upon by the Transmission Customer and the RTP, but no later than the earliest to occur of (i) the date of withdrawal of the Regional Tariff by the RTP, or (ii) the date of termination of the Regional Tariff by the RTPs.

7.0 Transmission Customer acknowledges and agrees that the RTP may withdraw at any time its Regional Tariff in accordance with the terms and conditions thereof and that effective upon withdrawal this Service Agreement shall automatically terminate solely with respect to the RTP, without any action by any party hereto.  


8.0 Any notice or request made to or by a party regarding this Service Agreement shall be made to the representative(s) of the other party or parties as indicated below:

RTP:
Name: _______________________________	
Address: ____________________________	
Address 2: ____________________________	
City, ST Zip: 	
Attention: ___________________________	



Transmission Customer:
Name: _________________________________
Address: _______________________________
Address 2: ____________________________	
City, ST Zip: 	
Attention: ______________________________

9.0 The Regional Tariff is incorporated and made a part of this Service Agreement.

IN WITNESS WHEREOF, the parties have caused this Service Agreement to be executed by their respective authorized officials.

RTP:  

By:	________________________________________	
	Name	

	________________________________________
      Printed Name	
      
      ________________________________________
      Title
      
      ________________________________________
      Date

Transmission Customer:

By:	________________________________________	
	Name	

	________________________________________
      Printed Name	
      
      ________________________________________
      Title
      
      ________________________________________
      Date
      
EXHIBIT C
FORM OF ADDENDUM

By execution of this addendum (this "Addendum") to the WestConnect Amended and Restated Point-to-Point Regional Transmission Service Participation Agreement, (the "Participation Agreement"), the undersigned hereby joins in the execution of the Participation Agreement, by and among Arizona Public Service Company, El Paso Electric Company, Public Service Company of Colorado, Public Service Company of New Mexico, Southwest Transmission Cooperative, Inc., Tri-State Generation and Transmission Association, Inc., Tucson Electric Power Company, Western Area Power Administration and each other person that becomes an RTP thereunder after the Execution Date and pursuant to the terms thereof (each, an "RTP" and, collectively, the "RTPs").  By executing this Addendum, the undersigned hereby agrees that it becomes a Party to the Participation Agreement and agrees to be bound by all of the terms and provisions of the Participation Agreement applicable to a Party thereto, subject to any applicable Regulatory Approvals.  Effective as of the date this Addendum is declared effective by the Commission, if applicable, and upon receipt of any other applicable Regulatory Approvals, the undersigned shall be an RTP for all purposes of the Participation Agreement, shall be bound by the terms and conditions thereof, and shall have all of the rights, duties and obligations of an RTP under the Participation Agreement.  

The undersigned represents and warrants to the other RTPs that each of the representations and warranties in Article 7 of the Participation Agreement is true and correct with respect to the undersigned as of the date hereof.  

[NEW RTP]

By _____________________________
Title ____________________________
_____________________________
_____________________________
_____________________________

Attn: ________________________

Telephone:  ([___]) [____________]
Facsimile:  ([___]) [____________]
Email:  [______________________









1 Include name of applicable RTP.
2 Include name of Eligible Customer requesting Regional Transmission Service.
---------------


------------------------------------------------------------




---------------


------------------------------------------------------------




B11




Schedule 8.2-12</record_plain_text>
      <record_change_type>CHANGE</record_change_type>
      <filing_id>197</filing_id>
      <filing_title>WesConnect Point-to-Point Regional Transmission Service Agreement</filing_title>
      <filing_type>130</filing_type>
      <associated_filing_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_record_id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <associated_option_code xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" />
      <record_current_status>Effective</record_current_status>
      <current_effective_date>2013-07-01</current_effective_date>
      <ferc_order_date>2013-06-28</ferc_order_date>
      <ferc_action_status>Accept</ferc_action_status>
      <suspend_motion>N</suspend_motion>
    </record_data>
  </ferc_filing_data>
</Document>